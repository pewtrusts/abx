!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GTMPush=function(t){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:t})},e.publishWindowResize=function(t){var e;window.addEventListener("resize",function(){e||(e=setTimeout(function(){t.setState("resize",[document.documentElement.clientWidth,document.documentElement.clientHeight]),e=null},350))},!1)};e.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(t,e){var n=this,i=e||0;return e&&(this.style.transition="opacity "+e+"s ease-in-out"),new Promise(function(e){var r=window.getComputedStyle(n).getPropertyValue("transition-duration")||i,o=1e3*parseFloat(r);n.fadeOutContent(),setTimeout(function(){n.innerHTML=t,n.classList.remove("no-opacity"),e(!0)},o)})})),e.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(t,e){if(this.length<=t)return this;var n=this.substr(0,t-1);return(e?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var t,e=0;if(0===this.length)return e;for(t=0;t<this.length;t++)e=(e<<5)-e+this.charCodeAt(t),e|=0;return e})),e.DOMHelpers={c:function(t){if(-1!==t.indexOf(".")||-1!==t.indexOf("#")){var e=t.match(/\.([^#.]*)/g)||[],n=t.match(/#([^.]*)/),i=t.match(/^([^.#]+)/),r=document.createElement(i[0]);return e.forEach(function(t){r.classList.add(t.replace(".",""))}),null!==n&&r.setAttribute("id",n[1]),r}return document.createElement(t)},q:function(t){return document.querySelector(t)},qa:function(t){return document.querySelectorAll(t)}}},function(t,e,n){const i=n(2),r={};function o(){console.log(r)}Array.prototype.compare=Array.prototype.compare||function(t){if(this.length!=t.length)return!1;if(0===this.length&&0===t.length)return!0;console.log("in compare"),console.log(this);for(var e=0;e<t.length;e++)if(this[e]!==t[e])return!1;return!0},e.stateModule={logState:o,getState:function(t){return void 0!==r[t]?r[t][0]:void 0},getPreviousState:function(t){return void 0!==r[t]&&void 0!==r[t][1]?r[t][1]:void 0},setState:function(t,e){void 0===r[t]?(r[t]=[e],i.publish(t,e),o()):("string"==typeof e||"number"==typeof e?r[t][0]!==e:!Array.isArray(e)||!Array.isArray(r[t][0])||!e.compare(r[t][0]))&&(r[t].unshift(e),i.publish(t,e),o(),r[t].length>2&&(r[t].length=2))}}},function(t,e,n){(function(t){!function(n,i){"use strict";var r={};n.PubSub=r;var o=n.define;!function(t){var e={},n=-1;function i(t){var e;for(e in t)if(t.hasOwnProperty(e))return!0;return!1}function r(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function o(t,e,n){t(e,n)}function a(t,n,i,a){var s,p=e[n],u=a?o:r;if(e.hasOwnProperty(n))for(s in p)p.hasOwnProperty(s)&&u(p[s],t,i)}function s(t,n,r,o){var s=function(t,e,n){return function(){var i=String(t),r=i.lastIndexOf(".");for(a(t,t,e,n);-1!==r;)i=i.substr(0,r),r=i.lastIndexOf("."),a(t,i,e,n)}}(t="symbol"==typeof t?t.toString():t,n,o),p=function(t){var n=String(t),r=Boolean(e.hasOwnProperty(n)&&i(e[n])),o=n.lastIndexOf(".");for(;!r&&-1!==o;)n=n.substr(0,o),o=n.lastIndexOf("."),r=Boolean(e.hasOwnProperty(n)&&i(e[n]));return r}(t);return!!p&&(!0===r?s():setTimeout(s,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,i){if("function"!=typeof i)return!1;t="symbol"==typeof t?t.toString():t,e.hasOwnProperty(t)||(e[t]={});var r="uid_"+String(++n);return e[t][r]=i,r},t.subscribeOnce=function(e,n){var i=t.subscribe(e,function(){t.unsubscribe(i),n.apply(this,arguments)});return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)e.hasOwnProperty(n)&&0===n.indexOf(t)&&delete e[n]},t.unsubscribe=function(n){var i,r,o,a="string"==typeof n&&(e.hasOwnProperty(n)||function(t){var n;for(n in e)if(e.hasOwnProperty(n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!a&&"string"==typeof n,p="function"==typeof n,u=!1;if(!a){for(i in e)if(e.hasOwnProperty(i)){if(r=e[i],s&&r[n]){delete r[n],u=n;break}if(p)for(o in r)r.hasOwnProperty(o)&&r[o]===n&&(delete r[o],u=!0)}return u}t.clearSubscriptions(n)}}(r),"function"==typeof o&&o.amd?o(function(){return r}):(void 0!==t&&t.exports&&(e=t.exports=r),e.PubSub=r,t.exports=e=r)}("object"==typeof window&&window||this)}).call(this,n(7)(t))},function(t,e,n){"use strict";(function(t){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.15.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,i=["Edge","Trident","Firefox"],r=0,o=0;o<i.length;o+=1)if(n&&navigator.userAgent.indexOf(i[o])>=0){r=1;break}var a=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},r))}};function s(t){return t&&"[object Function]"==={}.toString.call(t)}function p(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function u(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function l(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=p(t),n=e.overflow,i=e.overflowX,r=e.overflowY;return/(auto|scroll|overlay)/.test(n+r+i)?t:l(u(t))}var c=n&&!(!window.MSInputMethodContext||!document.documentMode),d=n&&/MSIE 10/.test(navigator.userAgent);function f(t){return 11===t?c:10===t?d:c||d}function h(t){if(!t)return document.documentElement;for(var e=f(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===p(n,"position")?h(n):n:t?t.ownerDocument.documentElement:document.documentElement}function m(t){return null!==t.parentNode?m(t.parentNode):t}function v(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,r=n?e:t,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var a,s,p=o.commonAncestorContainer;if(t!==p&&e!==p||i.contains(r))return"BODY"===(s=(a=p).nodeName)||"HTML"!==s&&h(a.firstElementChild)!==a?h(p):p;var u=m(t);return u.host?v(u.host,e):v(t,m(e).host)}function y(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var i=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||i)[e]}return t[e]}function b(t,e){var n="x"===e?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function g(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],f(10)?parseInt(n["offset"+t])+parseInt(i["margin"+("Height"===t?"Top":"Left")])+parseInt(i["margin"+("Height"===t?"Bottom":"Right")]):0)}function w(t){var e=t.body,n=t.documentElement,i=f(10)&&getComputedStyle(n);return{height:g("Height",e,n,i),width:g("Width",e,n,i)}}var x=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},k=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),S=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},E=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function _(t){return E({},t,{right:t.left+t.width,bottom:t.top+t.height})}function O(t){var e={};try{if(f(10)){e=t.getBoundingClientRect();var n=y(t,"top"),i=y(t,"left");e.top+=n,e.left+=i,e.bottom+=n,e.right+=i}else e=t.getBoundingClientRect()}catch(t){}var r={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?w(t.ownerDocument):{},a=o.width||t.clientWidth||r.right-r.left,s=o.height||t.clientHeight||r.bottom-r.top,u=t.offsetWidth-a,l=t.offsetHeight-s;if(u||l){var c=p(t);u-=b(c,"x"),l-=b(c,"y"),r.width-=u,r.height-=l}return _(r)}function C(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=f(10),r="HTML"===e.nodeName,o=O(t),a=O(e),s=l(t),u=p(e),c=parseFloat(u.borderTopWidth,10),d=parseFloat(u.borderLeftWidth,10);n&&r&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var h=_({top:o.top-a.top-c,left:o.left-a.left-d,width:o.width,height:o.height});if(h.marginTop=0,h.marginLeft=0,!i&&r){var m=parseFloat(u.marginTop,10),v=parseFloat(u.marginLeft,10);h.top-=c-m,h.bottom-=c-m,h.left-=d-v,h.right-=d-v,h.marginTop=m,h.marginLeft=v}return(i&&!n?e.contains(s):e===s&&"BODY"!==s.nodeName)&&(h=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=y(e,"top"),r=y(e,"left"),o=n?-1:1;return t.top+=i*o,t.bottom+=i*o,t.left+=r*o,t.right+=r*o,t}(h,e)),h}function P(t){if(!t||!t.parentElement||f())return document.documentElement;for(var e=t.parentElement;e&&"none"===p(e,"transform");)e=e.parentElement;return e||document.documentElement}function A(t,e,n,i){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=r?P(t):v(t,e);if("viewport"===i)o=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,i=C(t,n),r=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=e?0:y(n),s=e?0:y(n,"left");return _({top:a-i.top+i.marginTop,left:s-i.left+i.marginLeft,width:r,height:o})}(a,r);else{var s=void 0;"scrollParent"===i?"BODY"===(s=l(u(e))).nodeName&&(s=t.ownerDocument.documentElement):s="window"===i?t.ownerDocument.documentElement:i;var c=C(s,a,r);if("HTML"!==s.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===p(e,"position"))return!0;var i=u(e);return!!i&&t(i)}(a))o=c;else{var d=w(t.ownerDocument),f=d.height,h=d.width;o.top+=c.top-c.marginTop,o.bottom=f+c.top,o.left+=c.left-c.marginLeft,o.right=h+c.left}}var m="number"==typeof(n=n||0);return o.left+=m?n:n.left||0,o.top+=m?n:n.top||0,o.right-=m?n:n.right||0,o.bottom-=m?n:n.bottom||0,o}function L(t,e,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=A(n,i,o,r),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},p=Object.keys(s).map(function(t){return E({key:t},s[t],{area:(e=s[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),u=p.filter(function(t){var e=t.width,i=t.height;return e>=n.clientWidth&&i>=n.clientHeight}),l=u.length>0?u[0].key:p[0].key,c=t.split("-")[1];return l+(c?"-"+c:"")}function T(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return C(n,i?P(e):v(e,n),i)}function D(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),i=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function M(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function B(t,e,n){n=n.split("-")[0];var i=D(t),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",p=o?"height":"width",u=o?"width":"height";return r[a]=e[a]+e[p]/2-i[p]/2,r[s]=n===s?e[s]-i[u]:e[M(s)],r}function I(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function R(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var i=I(t,function(t){return t[e]===n});return t.indexOf(i)}(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&s(n)&&(e.offsets.popper=_(e.offsets.popper),e.offsets.reference=_(e.offsets.reference),e=n(e,t))}),e}function j(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function Y(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var r=e[i],o=r?""+r+n:t;if(void 0!==document.body.style[o])return o}return null}function z(t){var e=t.ownerDocument;return e?e.defaultView:window}function H(t,e,n,i){n.updateBound=i,z(t).addEventListener("resize",n.updateBound,{passive:!0});var r=l(t);return function t(e,n,i,r){var o="BODY"===e.nodeName,a=o?e.ownerDocument.defaultView:e;a.addEventListener(n,i,{passive:!0}),o||t(l(a.parentNode),n,i,r),r.push(a)}(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function F(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,z(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function q(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function N(t,e){Object.keys(e).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&q(e[n])&&(i="px"),t.style[n]=e[n]+i})}var X=n&&/Firefox/i.test(navigator.userAgent);function W(t,e,n){var i=I(t,function(t){return t.name===e}),r=!!i&&t.some(function(t){return t.name===n&&t.enabled&&t.order<i.order});if(!r){var o="`"+e+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}var U=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],V=U.slice(3);function K(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=V.indexOf(t),i=V.slice(n+1).concat(V.slice(0,n));return e?i.reverse():i}var G={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function J(t,e,n,i){var r=[0,0],o=-1!==["right","left"].indexOf(i),a=t.split(/(\+|\-)/).map(function(t){return t.trim()}),s=a.indexOf(I(a,function(t){return-1!==t.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var p=/\s*,\s*|\s+/,u=-1!==s?[a.slice(0,s).concat([a[s].split(p)[0]]),[a[s].split(p)[1]].concat(a.slice(s+1))]:[a];return(u=u.map(function(t,i){var r=(1===i?!o:o)?"height":"width",a=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,i){var r=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],a=r[2];if(!o)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=i}return _(s)[e]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(t,r,e,n)})})).forEach(function(t,e){t.forEach(function(n,i){q(n)&&(r[e]+=n*("-"===t[i-1]?-1:1))})}),r}var Q={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var r=t.offsets,o=r.reference,a=r.popper,s=-1!==["bottom","top"].indexOf(n),p=s?"left":"top",u=s?"width":"height",l={start:S({},p,o[p]),end:S({},p,o[p]+o[u]-a[u])};t.offsets.popper=E({},a,l[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,i=t.placement,r=t.offsets,o=r.popper,a=r.reference,s=i.split("-")[0],p=void 0;return p=q(+n)?[+n,0]:J(n,o,a,s),"left"===s?(o.top+=p[0],o.left-=p[1]):"right"===s?(o.top+=p[0],o.left+=p[1]):"top"===s?(o.left+=p[0],o.top-=p[1]):"bottom"===s&&(o.left+=p[0],o.top+=p[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||h(t.instance.popper);t.instance.reference===n&&(n=h(n));var i=Y("transform"),r=t.instance.popper.style,o=r.top,a=r.left,s=r[i];r.top="",r.left="",r[i]="";var p=A(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);r.top=o,r.left=a,r[i]=s,e.boundaries=p;var u=e.priority,l=t.offsets.popper,c={primary:function(t){var n=l[t];return l[t]<p[t]&&!e.escapeWithReference&&(n=Math.max(l[t],p[t])),S({},t,n)},secondary:function(t){var n="right"===t?"left":"top",i=l[n];return l[t]>p[t]&&!e.escapeWithReference&&(i=Math.min(l[n],p[t]-("right"===t?l.width:l.height))),S({},n,i)}};return u.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";l=E({},l,c[e](t))}),t.offsets.popper=l,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,r=t.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(r),s=a?"right":"bottom",p=a?"left":"top",u=a?"width":"height";return n[s]<o(i[p])&&(t.offsets.popper[p]=o(i[p])-n[u]),n[p]>o(i[s])&&(t.offsets.popper[p]=o(i[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!W(t.instance.modifiers,"arrow","keepTogether"))return t;var i=e.element;if("string"==typeof i){if(!(i=t.instance.popper.querySelector(i)))return t}else if(!t.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],o=t.offsets,a=o.popper,s=o.reference,u=-1!==["left","right"].indexOf(r),l=u?"height":"width",c=u?"Top":"Left",d=c.toLowerCase(),f=u?"left":"top",h=u?"bottom":"right",m=D(i)[l];s[h]-m<a[d]&&(t.offsets.popper[d]-=a[d]-(s[h]-m)),s[d]+m>a[h]&&(t.offsets.popper[d]+=s[d]+m-a[h]),t.offsets.popper=_(t.offsets.popper);var v=s[d]+s[l]/2-m/2,y=p(t.instance.popper),b=parseFloat(y["margin"+c],10),g=parseFloat(y["border"+c+"Width"],10),w=v-t.offsets.popper[d]-b-g;return w=Math.max(Math.min(a[l]-m,w),0),t.arrowElement=i,t.offsets.arrow=(S(n={},d,Math.round(w)),S(n,f,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(j(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=A(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),i=t.placement.split("-")[0],r=M(i),o=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case G.FLIP:a=[i,r];break;case G.CLOCKWISE:a=K(i);break;case G.COUNTERCLOCKWISE:a=K(i,!0);break;default:a=e.behavior}return a.forEach(function(s,p){if(i!==s||a.length===p+1)return t;i=t.placement.split("-")[0],r=M(i);var u=t.offsets.popper,l=t.offsets.reference,c=Math.floor,d="left"===i&&c(u.right)>c(l.left)||"right"===i&&c(u.left)<c(l.right)||"top"===i&&c(u.bottom)>c(l.top)||"bottom"===i&&c(u.top)<c(l.bottom),f=c(u.left)<c(n.left),h=c(u.right)>c(n.right),m=c(u.top)<c(n.top),v=c(u.bottom)>c(n.bottom),y="left"===i&&f||"right"===i&&h||"top"===i&&m||"bottom"===i&&v,b=-1!==["top","bottom"].indexOf(i),g=!!e.flipVariations&&(b&&"start"===o&&f||b&&"end"===o&&h||!b&&"start"===o&&m||!b&&"end"===o&&v),w=!!e.flipVariationsByContent&&(b&&"start"===o&&h||b&&"end"===o&&f||!b&&"start"===o&&v||!b&&"end"===o&&m),x=g||w;(d||y||x)&&(t.flipped=!0,(d||y)&&(i=a[p+1]),x&&(o=function(t){return"end"===t?"start":"start"===t?"end":t}(o)),t.placement=i+(o?"-"+o:""),t.offsets.popper=E({},t.offsets.popper,B(t.instance.popper,t.offsets.reference,t.placement)),t=R(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,r=i.popper,o=i.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return r[a?"left":"top"]=o[n]-(s?r[a?"width":"height"]:0),t.placement=M(e),t.offsets.popper=_(r),t}},hide:{order:800,enabled:!0,fn:function(t){if(!W(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=I(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,r=t.offsets.popper,o=I(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:e.gpuAcceleration,s=h(t.instance.popper),p=O(s),u={position:r.position},l=function(t,e){var n=t.offsets,i=n.popper,r=n.reference,o=Math.round,a=Math.floor,s=function(t){return t},p=o(r.width),u=o(i.width),l=-1!==["left","right"].indexOf(t.placement),c=-1!==t.placement.indexOf("-"),d=e?l||c||p%2==u%2?o:a:s,f=e?o:s;return{left:d(p%2==1&&u%2==1&&!c&&e?i.left-1:i.left),top:f(i.top),bottom:f(i.bottom),right:d(i.right)}}(t,window.devicePixelRatio<2||!X),c="bottom"===n?"top":"bottom",d="right"===i?"left":"right",f=Y("transform"),m=void 0,v=void 0;if(v="bottom"===c?"HTML"===s.nodeName?-s.clientHeight+l.bottom:-p.height+l.bottom:l.top,m="right"===d?"HTML"===s.nodeName?-s.clientWidth+l.right:-p.width+l.right:l.left,a&&f)u[f]="translate3d("+m+"px, "+v+"px, 0)",u[c]=0,u[d]=0,u.willChange="transform";else{var y="bottom"===c?-1:1,b="right"===d?-1:1;u[c]=v*y,u[d]=m*b,u.willChange=c+", "+d}var g={"x-placement":t.placement};return t.attributes=E({},g,t.attributes),t.styles=E({},u,t.styles),t.arrowStyles=E({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return N(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&N(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,r){var o=T(r,e,t,n.positionFixed),a=L(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",a),N(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},$=function(){function t(e,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=a(this.update.bind(this)),this.options=E({},t.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(E({},t.Defaults.modifiers,r.modifiers)).forEach(function(e){i.options.modifiers[e]=E({},t.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return E({name:t},i.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&s(t.onLoad)&&t.onLoad(i.reference,i.popper,i.options,t,i.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return k(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=T(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=L(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=B(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=R(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[Y("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=H(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return F.call(this)}}]),t}();$.Utils=("undefined"!=typeof window?window:t).PopperUtils,$.placements=U,$.Defaults=Q,e.a=$}).call(this,n(15))},function(t,e,n){"use strict";n(0);var i,r=n(5),o=(i=r)&&i.__esModule?i:{default:i};n(22);var a=new o.default("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&a.prerender(),a.init()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=f(n(6)),o=n(1),a=n(0),s=f(n(8)),p=f(n(9)),u=f(n(17)),l=f(n(19)),c=f(n(20)),d=f(n(21));function f(t){return t&&t.__esModule?t:{default:t}}(0,a.publishWindowResize)(o.stateModule);var h={},m=[],v=2014;function y(){var t=this;return new Promise(function(e,n){var i=t.el;r.default.parse(""+s.default,{download:!0,dynamicTyping:!0,header:!0,fastMode:!1,skipEmptyLines:!0,beforeFirstChunk:function(t){var e=t.hashCode();window.IS_PRERENDERING?i.setAttribute("data-data-hash",e):e.toString()!==i.getAttribute("data-data-hash")&&(i.setAttribute("data-data-mismatch",!0),console.log("data mismatch"),h.isMismatched=!0)},complete:function(n){m.length=0,h.years=[];for(var i=!0,r=0;i;)n.data[0].hasOwnProperty(v+r)?h.years.push(v+r):i=!1,r++;h.unnestedData=n.data.map(function(t){return t.id="drug-"+t.id,h.years.forEach(function(e){t[e]=[0].map(function(){return{column:parseInt(t[e]),isDiscontinued:-1!==t[e].toString().indexOf("d")}})}),t}),h.data=h.years.map(function(t){return{year:t,observations:[0].map(function(e){return[1,2,3,4,5].map(function(n){return{phase:n,values:h.unnestedData.filter(function(i){return i[t][e].column===n})}})})}}),console.log(h);var o=[],a=[];h.data.forEach(function(t){t.observations.forEach(function(e,n){e.forEach(function(e){o.push(e.values.filter(function(e){return!0!==e[t.year][n].isDiscontinued}).length),a.push(e.values.filter(function(e){return!0===e[t.year][n].isDiscontinued}).length)})})}),h.maxActive=Math.max.apply(Math,o),h.maxDiscontinued=Math.max.apply(Math,a),console.log(h),m.push(t.createComponent(h,p.default,"div#viz-view",{renderToSelector:"#abx-visualization",rerenderOnDataMismatch:!0,parent:t})),e(!0)},error:function(t){n(t)}})})}var b=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,u.default),i(e,[{key:"prerender",value:function(){this.el.insertAdjacentHTML("beforeend",l.default),document.querySelector("#intro").insertAdjacentHTML("afterbegin",c.default),document.querySelector("#abx-notes").insertAdjacentHTML("afterbegin",d.default),y.call(this).then(function(){m.forEach(function(t){console.log(t),t.container.appendChild(t.el)})})}},{key:"init",value:function(){var t=this;(function t(e,n,i){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,n);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,i)}if("value"in r)return r.value;var a=r.get;return void 0!==a?a.call(i):void 0})(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),y.call(this).then(function(){m.forEach(function(e){e.init(t)})})}}]),e}();e.default=b},function(t,e,n){var i,r,o;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),r=[],void 0===(o="function"==typeof(i=function(){"use strict";var t,e,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},i=!n.document&&!!n.postMessage,r=i&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),o=!1,a={},s=0,p={parse:function(e,i){var r=(i=i||{}).dynamicTyping||!1;if(S(r)&&(i.dynamicTypingFunction=r,r={}),i.dynamicTyping=r,i.transform=!!S(i.transform)&&i.transform,i.worker&&p.WORKERS_SUPPORTED){var u=function(){if(!p.WORKERS_SUPPORTED)return!1;if(!o&&null===p.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var e=p.SCRIPT_PATH||t;e+=(-1!==e.indexOf("?")?"&":"?")+"papaworker";var i=new n.Worker(e);return i.onmessage=b,i.id=s++,a[i.id]=i}();return u.userStep=i.step,u.userChunk=i.chunk,u.userComplete=i.complete,u.userError=i.error,i.step=S(i.step),i.chunk=S(i.chunk),i.complete=S(i.complete),i.error=S(i.error),delete i.worker,void u.postMessage({input:e,config:i,workerId:u.id})}var l=null;return p.NODE_STREAM_INPUT,"string"==typeof e?l=i.download?new c(i):new f(i):!0===e.readable&&S(e.read)&&S(e.on)?l=new h(i):(n.File&&e instanceof File||e instanceof Object)&&(l=new d(i)),l.stream(e)},unparse:function(t,e){var n=!1,i=!0,r=",",o="\r\n",a='"',s=!1;"object"==typeof e&&("string"!=typeof e.delimiter||p.BAD_DELIMITERS.filter(function(t){return-1!==e.delimiter.indexOf(t)}).length||(r=e.delimiter),("boolean"==typeof e.quotes||Array.isArray(e.quotes))&&(n=e.quotes),"boolean"!=typeof e.skipEmptyLines&&"string"!=typeof e.skipEmptyLines||(s=e.skipEmptyLines),"string"==typeof e.newline&&(o=e.newline),"string"==typeof e.quoteChar&&(a=e.quoteChar),"boolean"==typeof e.header&&(i=e.header));var u=new RegExp(v(a),"g");if("string"==typeof t&&(t=JSON.parse(t)),Array.isArray(t)){if(!t.length||Array.isArray(t[0]))return c(null,t,s);if("object"==typeof t[0])return c(l(t[0]),t,s)}else if("object"==typeof t)return"string"==typeof t.data&&(t.data=JSON.parse(t.data)),Array.isArray(t.data)&&(t.fields||(t.fields=t.meta&&t.meta.fields),t.fields||(t.fields=Array.isArray(t.data[0])?t.fields:l(t.data[0])),Array.isArray(t.data[0])||"object"==typeof t.data[0]||(t.data=[t.data])),c(t.fields||[],t.data||[],s);throw"exception: Unable to serialize unrecognized input";function l(t){if("object"!=typeof t)return[];var e=[];for(var n in t)e.push(n);return e}function c(t,e,n){var a="";"string"==typeof t&&(t=JSON.parse(t)),"string"==typeof e&&(e=JSON.parse(e));var s=Array.isArray(t)&&0<t.length,p=!Array.isArray(e[0]);if(s&&i){for(var u=0;u<t.length;u++)0<u&&(a+=r),a+=d(t[u],u);0<e.length&&(a+=o)}for(var l=0;l<e.length;l++){var c=s?t.length:e[l].length,f=!1,h=s?0===Object.keys(e[l]).length:0===e[l].length;if(n&&!s&&(f="greedy"===n?""===e[l].join("").trim():1===e[l].length&&0===e[l][0].length),"greedy"===n&&s){for(var m=[],v=0;v<c;v++){var y=p?t[v]:v;m.push(e[l][y])}f=""===m.join("").trim()}if(!f){for(var b=0;b<c;b++){0<b&&!h&&(a+=r);var g=s&&p?t[b]:b;a+=d(e[l][g],b)}l<e.length-1&&(!n||0<c&&!h)&&(a+=o)}}return a}function d(t,e){if(null==t)return"";if(t.constructor===Date)return JSON.stringify(t).slice(1,25);t=t.toString().replace(u,a+a);var i="boolean"==typeof n&&n||Array.isArray(n)&&n[e]||function(t,e){for(var n=0;n<e.length;n++)if(-1<t.indexOf(e[n]))return!0;return!1}(t,p.BAD_DELIMITERS)||-1<t.indexOf(r)||" "===t.charAt(0)||" "===t.charAt(t.length-1);return i?a+t+a:t}}};if(p.RECORD_SEP=String.fromCharCode(30),p.UNIT_SEP=String.fromCharCode(31),p.BYTE_ORDER_MARK="\ufeff",p.BAD_DELIMITERS=["\r","\n",'"',p.BYTE_ORDER_MARK],p.WORKERS_SUPPORTED=!i&&!!n.Worker,p.SCRIPT_PATH=null,p.NODE_STREAM_INPUT=1,p.LocalChunkSize=10485760,p.RemoteChunkSize=5242880,p.DefaultDelimiter=",",p.Parser=y,p.ParserHandle=m,p.NetworkStreamer=c,p.FileStreamer=d,p.StringStreamer=f,p.ReadableStreamStreamer=h,n.jQuery){var u=n.jQuery;u.fn.parse=function(t){var e=t.config||{},i=[];return this.each(function(t){if("INPUT"!==u(this).prop("tagName").toUpperCase()||"file"!==u(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var r=0;r<this.files.length;r++)i.push({file:this.files[r],inputElem:this,instanceConfig:u.extend({},e)})}),r(),this;function r(){if(0!==i.length){var e,n,r,a=i[0];if(S(t.before)){var s=t.before(a.file,a.inputElem);if("object"==typeof s){if("abort"===s.action)return e=a.file,n=a.inputElem,r=s.reason,void(S(t.error)&&t.error({name:"AbortError"},e,n,r));if("skip"===s.action)return void o();"object"==typeof s.config&&(a.instanceConfig=u.extend(a.instanceConfig,s.config))}else if("skip"===s)return void o()}var l=a.instanceConfig.complete;a.instanceConfig.complete=function(t){S(l)&&l(t,a.file,a.inputElem),o()},p.parse(a.file,a.instanceConfig)}else S(t.complete)&&t.complete()}function o(){i.splice(0,1),r()}}}function l(t){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(t){var e=x(t);e.chunkSize=parseInt(e.chunkSize),t.step||t.chunk||(e.chunkSize=null),this._handle=new m(e),(this._handle.streamer=this)._config=e}.call(this,t),this.parseChunk=function(t,e){if(this.isFirstChunk&&S(this._config.beforeFirstChunk)){var i=this._config.beforeFirstChunk(t);void 0!==i&&(t=i)}this.isFirstChunk=!1;var o=this._partialLine+t;this._partialLine="";var a=this._handle.parse(o,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=a.meta.cursor;this._finished||(this._partialLine=o.substring(s-this._baseIndex),this._baseIndex=s),a&&a.data&&(this._rowCount+=a.data.length);var u=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(r)n.postMessage({results:a,workerId:p.WORKER_ID,finished:u});else if(S(this._config.chunk)&&!e){if(this._config.chunk(a,this._handle),this._handle.paused()||this._handle.aborted())return;a=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(a.data),this._completeResults.errors=this._completeResults.errors.concat(a.errors),this._completeResults.meta=a.meta),this._completed||!u||!S(this._config.complete)||a&&a.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),u||a&&a.meta.paused||this._nextChunk(),a}},this._sendError=function(t){S(this._config.error)?this._config.error(t):r&&this._config.error&&n.postMessage({workerId:p.WORKER_ID,error:t,finished:!1})}}function c(t){var e;(t=t||{}).chunkSize||(t.chunkSize=p.RemoteChunkSize),l.call(this,t),this._nextChunk=i?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(t){this._input=t,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(e=new XMLHttpRequest,this._config.withCredentials&&(e.withCredentials=this._config.withCredentials),i||(e.onload=k(this._chunkLoaded,this),e.onerror=k(this._chunkError,this)),e.open("GET",this._input,!i),this._config.downloadRequestHeaders){var t=this._config.downloadRequestHeaders;for(var n in t)e.setRequestHeader(n,t[n])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;e.setRequestHeader("Range","bytes="+this._start+"-"+r),e.setRequestHeader("If-None-Match","webkit-no-cache")}try{e.send()}catch(t){this._chunkError(t.message)}i&&0===e.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var t;4===e.readyState&&(e.status<200||400<=e.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(t=e.getResponseHeader("Content-Range"))?-1:parseInt(t.substr(t.lastIndexOf("/")+1))),this.parseChunk(e.responseText)))},this._chunkError=function(t){var n=e.statusText||t;this._sendError(new Error(n))}}function d(t){var e,n;(t=t||{}).chunkSize||(t.chunkSize=p.LocalChunkSize),l.call(this,t);var i="undefined"!=typeof FileReader;this.stream=function(t){this._input=t,n=t.slice||t.webkitSlice||t.mozSlice,i?((e=new FileReader).onload=k(this._chunkLoaded,this),e.onerror=k(this._chunkError,this)):e=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var t=this._input;if(this._config.chunkSize){var r=Math.min(this._start+this._config.chunkSize,this._input.size);t=n.call(t,this._start,r)}var o=e.readAsText(t,this._config.encoding);i||this._chunkLoaded({target:{result:o}})},this._chunkLoaded=function(t){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(t.target.result)},this._chunkError=function(){this._sendError(e.error)}}function f(t){var e;l.call(this,t=t||{}),this.stream=function(t){return e=t,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var t=this._config.chunkSize,n=t?e.substr(0,t):e;return e=t?e.substr(t):"",this._finished=!e,this.parseChunk(n)}}}function h(t){l.call(this,t=t||{});var e=[],n=!0,i=!1;this.pause=function(){l.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){l.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(t){this._input=t,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){i&&1===e.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),e.length?this.parseChunk(e.shift()):n=!0},this._streamData=k(function(t){try{e.push("string"==typeof t?t:t.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(e.shift()))}catch(t){this._streamError(t)}},this),this._streamError=k(function(t){this._streamCleanUp(),this._sendError(t)},this),this._streamEnd=k(function(){this._streamCleanUp(),i=!0,this._streamData("")},this),this._streamCleanUp=k(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function m(t){var e,n,i,r=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,o=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,a=this,s=0,u=0,l=!1,c=!1,d=[],f={data:[],errors:[],meta:{}};if(S(t.step)){var h=t.step;t.step=function(e){if(f=e,g())b();else{if(b(),0===f.data.length)return;s+=e.data.length,t.preview&&s>t.preview?n.abort():h(f,a)}}}function m(e){return"greedy"===t.skipEmptyLines?""===e.join("").trim():1===e.length&&0===e[0].length}function b(){if(f&&i&&(k("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+p.DefaultDelimiter+"'"),i=!1),t.skipEmptyLines)for(var e=0;e<f.data.length;e++)m(f.data[e])&&f.data.splice(e--,1);return g()&&function(){if(f){for(var e=0;g()&&e<f.data.length;e++)for(var n=0;n<f.data[e].length;n++){var i=f.data[e][n];t.trimHeaders&&(i=i.trim()),d.push(i)}f.data.splice(0,1)}}(),function(){if(!f||!t.header&&!t.dynamicTyping&&!t.transform)return f;for(var e=0;e<f.data.length;e++){var n,i=t.header?{}:[];for(n=0;n<f.data[e].length;n++){var r=n,o=f.data[e][n];t.header&&(r=n>=d.length?"__parsed_extra":d[n]),t.transform&&(o=t.transform(o,r)),o=w(r,o),"__parsed_extra"===r?(i[r]=i[r]||[],i[r].push(o)):i[r]=o}f.data[e]=i,t.header&&(n>d.length?k("FieldMismatch","TooManyFields","Too many fields: expected "+d.length+" fields but parsed "+n,u+e):n<d.length&&k("FieldMismatch","TooFewFields","Too few fields: expected "+d.length+" fields but parsed "+n,u+e))}return t.header&&f.meta&&(f.meta.fields=d),u+=f.data.length,f}()}function g(){return t.header&&0===d.length}function w(e,n){return i=e,t.dynamicTypingFunction&&void 0===t.dynamicTyping[i]&&(t.dynamicTyping[i]=t.dynamicTypingFunction(i)),!0===(t.dynamicTyping[i]||t.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(r.test(n)?parseFloat(n):o.test(n)?new Date(n):""===n?null:n):n;var i}function k(t,e,n,i){f.errors.push({type:t,code:e,message:n,row:i})}this.parse=function(r,o,a){var s=t.quoteChar||'"';if(t.newline||(t.newline=function(t,e){t=t.substr(0,1048576);var n=new RegExp(v(e)+"([^]*?)"+v(e),"gm"),i=(t=t.replace(n,"")).split("\r"),r=t.split("\n"),o=1<r.length&&r[0].length<i[0].length;if(1===i.length||o)return"\n";for(var a=0,s=0;s<i.length;s++)"\n"===i[s][0]&&a++;return a>=i.length/2?"\r\n":"\r"}(r,s)),i=!1,t.delimiter)S(t.delimiter)&&(t.delimiter=t.delimiter(r),f.meta.delimiter=t.delimiter);else{var u=function(e,n,i,r){for(var o,a,s,u=[",","\t","|",";",p.RECORD_SEP,p.UNIT_SEP],l=0;l<u.length;l++){var c=u[l],d=0,f=0,h=0;s=void 0;for(var v=new y({comments:r,delimiter:c,newline:n,preview:10}).parse(e),b=0;b<v.data.length;b++)if(i&&m(v.data[b]))h++;else{var g=v.data[b].length;f+=g,void 0!==s?1<g&&(d+=Math.abs(g-s),s=g):s=0}0<v.data.length&&(f/=v.data.length-h),(void 0===a||a<d)&&1.99<f&&(a=d,o=c)}return{successful:!!(t.delimiter=o),bestDelimiter:o}}(r,t.newline,t.skipEmptyLines,t.comments);u.successful?t.delimiter=u.bestDelimiter:(i=!0,t.delimiter=p.DefaultDelimiter),f.meta.delimiter=t.delimiter}var c=x(t);return t.preview&&t.header&&c.preview++,e=r,n=new y(c),f=n.parse(e,o,a),b(),l?{meta:{paused:!0}}:f||{meta:{paused:!1}}},this.paused=function(){return l},this.pause=function(){l=!0,n.abort(),e=e.substr(n.getCharIndex())},this.resume=function(){l=!1,a.streamer.parseChunk(e,!0)},this.aborted=function(){return c},this.abort=function(){c=!0,n.abort(),f.meta.aborted=!0,S(t.complete)&&t.complete(f),e=""}}function v(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function y(t){var e,n=(t=t||{}).delimiter,i=t.newline,r=t.comments,o=t.step,a=t.preview,s=t.fastMode,u=e=void 0===t.quoteChar?'"':t.quoteChar;if(void 0!==t.escapeChar&&(u=t.escapeChar),("string"!=typeof n||-1<p.BAD_DELIMITERS.indexOf(n))&&(n=","),r===n)throw"Comment character same as delimiter";!0===r?r="#":("string"!=typeof r||-1<p.BAD_DELIMITERS.indexOf(r))&&(r=!1),"\n"!==i&&"\r"!==i&&"\r\n"!==i&&(i="\n");var l=0,c=!1;this.parse=function(t,p,d){if("string"!=typeof t)throw"Input must be a string";var f=t.length,h=n.length,m=i.length,y=r.length,b=S(o),g=[],w=[],x=[],k=l=0;if(!t)return R();if(s||!1!==s&&-1===t.indexOf(e)){for(var E=t.split(i),_=0;_<E.length;_++){if(x=E[_],l+=x.length,_!==E.length-1)l+=i.length;else if(d)return R();if(!r||x.substr(0,y)!==r){if(b){if(g=[],D(x.split(n)),j(),c)return R()}else D(x.split(n));if(a&&a<=_)return g=g.slice(0,a),R(!0)}}return R()}for(var O,C=t.indexOf(n,l),P=t.indexOf(i,l),A=new RegExp(v(u)+v(e),"g");;)if(t[l]!==e)if(r&&0===x.length&&t.substr(l,y)===r){if(-1===P)return R();l=P+m,P=t.indexOf(i,l),C=t.indexOf(n,l)}else if(-1!==C&&(C<P||-1===P))x.push(t.substring(l,C)),l=C+h,C=t.indexOf(n,l);else{if(-1===P)break;if(x.push(t.substring(l,P)),I(P+m),b&&(j(),c))return R();if(a&&g.length>=a)return R(!0)}else for(O=l,l++;;){if(-1===(O=t.indexOf(e,O+1)))return d||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:g.length,index:l}),B();if(O===f-1)return B(t.substring(l,O).replace(A,e));if(e!==u||t[O+1]!==u){if(e===u||0===O||t[O-1]!==u){var L=M(-1===P?C:Math.min(C,P));if(t[O+1+L]===n){x.push(t.substring(l,O).replace(A,e)),l=O+1+L+h,C=t.indexOf(n,l),P=t.indexOf(i,l);break}var T=M(P);if(t.substr(O+1+T,m)===i){if(x.push(t.substring(l,O).replace(A,e)),I(O+1+T+m),C=t.indexOf(n,l),b&&(j(),c))return R();if(a&&g.length>=a)return R(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:g.length,index:l}),O++}}else O++}return B();function D(t){g.push(t),k=l}function M(e){var n=0;if(-1!==e){var i=t.substring(O+1,e);i&&""===i.trim()&&(n=i.length)}return n}function B(e){return d||(void 0===e&&(e=t.substr(l)),x.push(e),l=f,D(x),b&&j()),R()}function I(e){l=e,D(x),x=[],P=t.indexOf(i,l)}function R(t){return{data:g,errors:w,meta:{delimiter:n,linebreak:i,aborted:c,truncated:!!t,cursor:k+(p||0)}}}function j(){o(R()),g=[],w=[]}},this.abort=function(){c=!0},this.getCharIndex=function(){return l}}function b(t){var e=t.data,n=a[e.workerId],i=!1;if(e.error)n.userError(e.error,e.file);else if(e.results&&e.results.data){var r={abort:function(){i=!0,g(e.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(S(n.userStep)){for(var o=0;o<e.results.data.length&&(n.userStep({data:[e.results.data[o]],errors:e.results.errors,meta:e.results.meta},r),!i);o++);delete e.results}else S(n.userChunk)&&(n.userChunk(e.results,r,e.file),delete e.results)}e.finished&&!i&&g(e.workerId,e.results)}function g(t,e){var n=a[t];S(n.userComplete)&&n.userComplete(e),n.terminate(),delete a[t]}function w(){throw"Not implemented."}function x(t){if("object"!=typeof t||null===t)return t;var e=Array.isArray(t)?[]:{};for(var n in t)e[n]=x(t[n]);return e}function k(t,e){return function(){t.apply(e,arguments)}}function S(t){return"function"==typeof t}return r?n.onmessage=function(t){var e=t.data;if(void 0===p.WORKER_ID&&e&&(p.WORKER_ID=e.workerId),"string"==typeof e.input)n.postMessage({workerId:p.WORKER_ID,results:p.parse(e.input,e.config),finished:!0});else if(n.File&&e.input instanceof File||e.input instanceof Object){var i=p.parse(e.input,e.config);i&&n.postMessage({workerId:p.WORKER_ID,results:i,finished:!0})}}:p.WORKERS_SUPPORTED&&(e=document.getElementsByTagName("script"),t=e.length?e[e.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){o=!0},!0):o=!0),(c.prototype=Object.create(l.prototype)).constructor=c,(d.prototype=Object.create(l.prototype)).constructor=d,(f.prototype=Object.create(f.prototype)).constructor=f,(h.prototype=Object.create(l.prototype)).constructor=h,p})?i.apply(e,r):i)||(t.exports=o)},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){t.exports=n.p+"data/abx-data.csv?v=6ce6c0"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=u(n(10)),o=u(n(11)),a=n(1),s=u(n(12)),p=u(n(14));function u(t){return t&&t.__esModule?t:{default:t}}n(16);var l=[["Phase 1","P1"],["Phase 2","P2"],["Phase 3","P3"],["Application","NDA"],["Approved","&#10004"]],c=1200,d=!0,f=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,r.default),i(e,[{key:"prerender",value:function(){var t=this;this.minUnitDimension=30,this.headerHeight=45,this.unitPadding=2,this.headers=l,this.phaseMembers=[0,1].map(function(){return[0].concat(l).map(function(e){return{active:0===e?t.model.unnestedData.map(function(t){return t.id}):[],discontinued:[]}})}),this.heightNeeded=(this.model.maxActive+this.model.maxDiscontinued+1)*(this.minUnitDimension+this.unitPadding)+this.headerHeight+this.unitPadding+51+90+61+40;var n=function t(e,n,i){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,n);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,i)}if("value"in r)return r.value;var a=r.get;return void 0!==a?a.call(i):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.prerendered&&!this.rerender)return n;function i(t){for(var e=0;e<5;e++){var n=document.createElement("div");n.classList.add(o.default.column);for(var i=t.name===o.default.activeContainer?this.model.maxActive:this.model.maxDiscontinued,r=0;r<i;r++){var a=document.createElement("div");a.classList.add(o.default.drug,o.default.drugEmpty),n.appendChild(a)}t.appendChild(n)}}var r=document.createElement("div");r.classList.add(o.default.controlContainer);var a=document.createElement("button");a.classList.add(o.default.playButton),a.type="button",a.title="Play",r.appendChild(a),this.model.years.forEach(function(t,e){var n=document.createElement("button");n.classList.add(o.default.yearButton,""+(0===e?o.default.yearButtonActive:"nope")),n.type="button",n.value=t,n.textContent=t,r.appendChild(n)});var s=document.createElement("div"),p=document.createElement("input");p.classList.add("js-animate-checkbox"),p.setAttribute("type","checkbox"),p.setAttribute("checked","checked"),p.id="toggle-animate-on-off";var u=document.createElement("label");u.classList.add(o.default.inputLabel),u.setAttribute("for","toggle-animate-on-off"),u.textContent="Animate change",s.appendChild(p),s.appendChild(u),r.appendChild(s),n.appendChild(r);var c=document.createElement("div");c.classList.add(o.default.container),n.appendChild(c);var d=document.createElement("div");d.classList.add(o.default.activeContainer),d.name=o.default.activeContainer,c.appendChild(d);var f=document.createElement("div");f.classList.add(o.default.headerContainer),f.name=o.default.headerContainer,l.forEach(function(t){var e=document.createElement("div");e.classList.add(o.default.headerDiv),e.innerHTML='<span class="'+o.default.phaseFull+'">'+t[0].toUpperCase()+'</span><span class="'+o.default.phaseAbbr+'">'+t[1]+"</span>",f.appendChild(e)}),c.appendChild(f);var h=document.createElement("div");return h.classList.add(o.default.discontinuedContainer),h.name=o.default.discontinuedContainer,c.appendChild(h),i.call(this,d),i.call(this,h),n}},{key:"populatePlaceholders",value:function(t,e){var n=this;console.log(this.previousStatuses);var i=document.querySelector("."+o.default.activeContainer),r=document.querySelector("."+o.default.discontinuedContainer);this.phaseMembers[0]=JSON.parse(JSON.stringify(this.phaseMembers[1])),console.log(this.phaseMembers,this.previousStatuses),[i,r].forEach(function(i,r){var a=0!==r;n.model.data[t].observations[e].forEach(function(s,p){function u(t){return this.phaseMembers[1][p+1][a?"discontinued":"active"].indexOf(t)}var l=s.values.filter(function(i){return 0===r?!i[n.model.years[t]][e].isDiscontinued:i[n.model.years[t]][e].isDiscontinued}).sort(function(t,e){return void 0===n.previousStatuses?t.id-e.id:n.previousStatuses[t.id]||n.previousStatuses[e.id]?n.previousStatuses[t.id]?n.previousStatuses[e.id]?n.previousStatuses[t.id].column===p+1&&n.previousStatuses[t.id].isDiscontinued===a?n.previousStatuses[e.id].column===p+1&&n.previousStatuses[e.id].isDiscontinued===a?u.call(n,t.id)<u.call(n,e.id)?-1:1:-1:n.previousStatuses[e.id].column===p+1&&n.previousStatuses[e.id].isDiscontinued===a?1:n.previousStatuses[t.id].column===p+1?n.previousStatuses[e.id].column===p+1&&n.previousStatuses[e.id].isDiscontinued!==a?t.id-e.id:n.previousStatuses[e.id].column===p+1?1:-1:n.previousStatuses[e.id].column===p+1?1:n.previousStatuses[t.id].column>n.previousStatuses[e.id].column?-1:n.previousStatuses[t.id].column<n.previousStatuses[e.id].column?1:n.previousStatuses[t.id].isDiscontinued===a&&n.previousStatuses[e.id].isDiscontinued!==a?-1:n.previousStatuses[e.id].isDiscontinued===a&&n.previousStatuses[t.id].isDiscontinued!==a?1:t.id-e.id:-1:1:t.id-e.id}),c=i.querySelectorAll("."+o.default.column)[p];n.phaseMembers[1][p+1][0===r?"active":"discontinued"].length=0,l.forEach(function(t,e){!function(t,e,n){t.id=e.id,t.classList.remove(o.default.drugEmpty),t.classList.add(""+(e.gramNegative?o.default.gramNegative:"nope"),""+(e.novel?o.default.novel:"nope"),""+(e.urgent?o.default.urgent:"nope")),1===n&&t.classList.add(o.default.isDiscontinued),t.setAttribute("data-tippy-content","<strong>"+e.name+"</strong><br />"+e.company)}(c.querySelectorAll("."+o.default.drug)[e],t,r),n.phaseMembers[1][p+1][0===r?"active":"discontinued"].push(t.id)}),n.phaseMembers[1][0].active=n.model.unnestedData.filter(function(t){return 0===t[+n.currentYear][n.currentObservation].column}).map(function(t){return t.id})})})}},{key:"setYearState",value:function(t,e){var n=a.stateModule.getState("year");n&&!e&&this.recordStatuses(n[0],n[2]),a.stateModule.setState("year",t),this.currentYear=t[0],this.currentObservation=t[2]}},{key:"init",value:function(){s.default.setSubs([["resize",this.checkHeight.bind(this)],["year",this.update.bind(this)]]),this.setYearState([this.model.years[0],null,0]),this.nonEmptyDrugs=document.querySelectorAll("."+o.default.drug+":not(."+o.default.drugEmpty+")"),this.checkHeight(),this.initializeYearButtons(),this.initializeAnimateOnOff(),this.initializePlayButton()}},{key:"initializeAnimateOnOff",value:function(){this.animateYears=!0;var t=document.querySelector(".js-animate-checkbox"),e=function(t){t.checked?this.animateYears=!0:this.animateYears=!1,console.log(this)}.bind(this);t.addEventListener("change",function(){e(this)})}},{key:"initializePlayButton",value:function(){this.playYearsBind=this.playYears.bind(this),document.querySelector("."+o.default.playButton).addEventListener("click",this.playYearsBind)}},{key:"pausePlay",value:function(){document.querySelector("."+o.default.yearButtonPrevious).classList.remove(o.default.yearButtonPrevious),this.playBtn.blur(),this.playBtn.removeEventListener("click",this.pausePlayBind),a.stateModule.setState("isPaused",!0),this.playBtn.classList.add(o.default.willPause)}},{key:"disableYearButtons",value:function(){this.yearButtons=this.yearButtons||document.querySelectorAll("."+o.default.yearButton),this.yearButtons.forEach(function(t){t.setAttribute("disabled","disabled")})}},{key:"disablePlayButton",value:function(){this.playBtn=this.playBtn||document.querySelector("."+o.default.playButton),this.playBtn.setAttribute("disabled","disabled")}},{key:"enablePlayButton",value:function(){this.playBtn=this.playBtn||document.querySelector("."+o.default.playButton),this.playBtn.removeAttribute("disabled")}},{key:"enableYearButtons",value:function(){this.yearButtons=this.yearButtons||document.querySelectorAll("."+o.default.yearButton),this.yearButtons.forEach(function(t){t.removeAttribute("disabled")})}},{key:"playYears",value:function(t){var e=this;a.stateModule.setState("isPaused",!1),a.stateModule.setState("isBackward",!1),this.disableYearButtons(),this.playBtn=this.playBtn||document.querySelector("."+o.default.playButton),this.playBtn.blur(),"reciprocal"!==t&&this.showPauseOption();var n=a.stateModule.getState("year")[0];this.model.years.indexOf(+n)===this.model.years.length-1?(this.removeReplayOption(),d=!0,this.clearAttributesAndDetails(),this.setYearState([this.model.years[0],null,0],!0),setTimeout(function(){e.playYears("reciprocal")},2*c)):new Promise(function(t){a.stateModule.getState("isPaused")?(e.enableYearButtons(),t(!1)):t(!0)}).then(function(t){a.stateModule.getState("isPaused")||!0!==t||function t(){var e=this;if(a.stateModule.getState("isPaused"))return this.enableYearButtons(),void this.removePauseOption();++n<=this.model.years[this.model.years.length-1]?new Promise(function(t){e.setYearState([n,t,0])}).then(function(){t.call(e)}):(this.showReplayOption.call(this),this.enableYearButtons())}.call(e)})}},{key:"showReplayOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.replayBtn.removeEventListener("click",this.pausePlayBind),this.replayBtn.addEventListener("click",this.playYearsBind),this.replayBtn.classList.add(o.default.replay),this.replayBtn.classList.remove(o.default.pause),this.replayBtn.classList.remove(o.default.willPause),this.replayBtn.title="Replay"}},{key:"showPauseOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.pausePlayBind=this.pausePlay.bind(this),this.removeReplayOption(),this.replayBtn.removeEventListener("click",this.playYearsBind),this.replayBtn.addEventListener("click",this.pausePlayBind),this.replayBtn.classList.add(o.default.pause),this.replayBtn.classList.remove(o.default.replay),this.replayBtn.title="Pause"}},{key:"removePauseOption",value:function(){console.log("removing pause option"),this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.replayBtn.removeEventListener("click",this.pausePlayBind),this.replayBtn.addEventListener("click",this.playYearsBind),this.replayBtn.classList.remove(o.default.pause),this.replayBtn.classList.remove(o.default.willPause),this.replayBtn.title="Play"}},{key:"removeReplayOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.replayBtn.classList.remove(o.default.replay)}},{key:"checkHeight",value:function(){window.innerHeight<this.heightNeeded?document.body.classList.add(o.default.squat):document.body.classList.remove(o.default.squat),document.querySelector("#section-comparison .js-inner-content").offsetHeight>window.innerHeight-100?document.body.classList.add(o.default.superSquat):document.body.classList.remove(o.default.superSquat),function(){var t=document.documentElement,e=Math.floor((this.heightNeeded-this.unitPadding-this.headerHeight)*(this.maxActive/(this.maxActive+this.maxDiscontinued)));t.style.setProperty("--unit-dimension",this.minUnitDimension+"px"),t.style.setProperty("--header-height",this.headerHeight+"px"),t.style.setProperty("--max-container-height",this.heightNeeded+"px"),t.style.setProperty("--active-max-height",e+"px"),t.style.setProperty("--discontinued-max-height",Math.floor(this.heightNeeded-e-this.headerHeight)+"px")}.call(this)}},{key:"initializeYearButtons",value:function(){var t=this;document.querySelectorAll("."+o.default.yearButton).forEach(function(e){var n=t;e.addEventListener("click",function(){var t=this,e=a.stateModule.getState("year")[0];console.log(e,this.value),e!=this.value&&(a.stateModule.setState("isPaused",!1),this.blur(),n.disablePlayButton(),n.removeReplayOption(),+this.value>+e?(a.stateModule.setState("isBackward",!1),new Promise(function(){n.setYearState([t.value,null,0])})):(a.stateModule.setState("isBackward",!0),new Promise(function(){n.setYearState([t.value,null,0])})))})})}},{key:"update",value:function(t,e){document.querySelector("."+o.default.yearButtonActive).classList.remove(o.default.yearButtonActive,o.default.observation,o.default.observation0,o.default.observation1),document.querySelector('button[value="'+e[0]+'"]').classList.add(o.default.yearButtonActive),this.FLIP(parseInt(e[0]),e[1],e[2]),this.updateText()}},{key:"updateText",value:function(){var t=this.phaseMembers[1][this.phaseMembers[1].length-1].active.length,e=this.phaseMembers[1].reduce(function(t,e){return t+e.discontinued.length},0),n=document.querySelector("#total-approved"),i=document.querySelector("#total-discontinued"),r=a.stateModule.getState("year")[0],o=document.querySelector("#abx-totals");document.querySelector("#big-year").fadeInContent(r),+r>this.model.years[0]?o.classList.add("is-subsequent"):o.classList.remove("is-subsequent"),n.innerHTML!=t&&document.querySelector("#total-approved").fadeInContent(t),i.innerHTML!=e&&document.querySelector("#total-discontinued").fadeInContent(e)}},{key:"FLIP",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;this.recordFirstPositions(),this.clearAttributesAndDetails(),this.populatePlaceholders(this.model.years.indexOf(t),n),this.nonEmptyDrugs=document.querySelectorAll("."+o.default.drug+":not(."+o.default.drugEmpty+")"),(0,p.default)(this.nonEmptyDrugs,{arrow:!0,distance:3}),console.log(!1!==this.animateYears),!1!==this.animateYears&&this.invertPositions(),this.playAnimation(e,this.animateYears)}},{key:"recordStatuses",value:function(t,e){this.previousStatuses=this.model.data[this.model.years.indexOf(+t)].observations[e].reduce(function(n,i){return i.values.forEach(function(i){n[i.id]={column:i[t][e].column,isDiscontinued:i[t][e].isDiscontinued}}),n},{})}},{key:"recordFirstPositions",value:function(){this.firstPositions=Array.from(document.querySelectorAll("."+o.default.drug+":not("+o.default.drugEmpty+")")).reduce(function(t,e){return t[e.id]=e.getBoundingClientRect(),t},{})}},{key:"clearAttributesAndDetails",value:function(){this.nonEmptyDrugs.forEach(function(t){t.className=o.default.drug+" "+o.default.drugEmpty,t.id="",t.setAttribute("data-tippy-content",""),t._tippy&&(t.removeAttribute("tabindex"),t._tippy.destroy())})}},{key:"invertPositions",value:function(){var t=this;this.nonEmptyDrugs.forEach(function(e){e.style.transitionDuration="0s";var n=e.getBoundingClientRect(),i=t.firstPositions[e.id]?t.firstPositions[e.id].top-n.top:-3e3,r=t.firstPositions[e.id]?t.firstPositions[e.id].left-n.left:-3e3;e.style.transform="translate("+r+"px, "+i+"px)",0===i&&0===r||e.classList.add(o.default.isTranslated),t.firstPositions[e.id]||e.classList.add(o.default.entering)})}},{key:"playAnimation",value:function(t,e){var n=this;console.log(a.stateModule.getState("isBackward"));var i=a.stateModule.getState("isBackward")?0:l.length,r=a.stateModule.getState("year"),s=r[0],p=r[2];function u(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:c,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=t.style.transform.match(/translate\((.*?)\)/),r=i?i[1].replace(" ","").split(",").map(function(t){return parseInt(t)}):[0,0];console.log(r),0===r[0]||0===r[1]||0!==n&&1!==n&&2!==n||(t.classList.add(o.default.isMoving),t._tippy.show(0)),t.style.transitionDuration=e/1e3+"s",setTimeout(function(){console.log(t._tippy.popper.style);var i=t._tippy.popper.style.transform.match(/translate3d\((.*?)\)/),a=i?i[1].replace(" ","").split(",").map(function(t){return parseInt(t)}):[0,0,0];console.log(a),0!==n&&1!==n&&2!==n||(t._tippy.popper.style.transitionDuration=e/1e3+"s",t._tippy.popper.style.transitionTimingFunction="ease-in-out"),window.requestAnimationFrame(function(){0!==n&&1!==n&&2!==n||(t._tippy.popper.style.transform="translate3d("+(parseInt(a[0])-parseInt(r[0]))+"px, "+(parseInt(a[1])-parseInt(r[1]))+"px, 0px)"),t.style.transform="translate(0px,0px)"}),setTimeout(function(){t.classList.remove(o.default.isMoving),t._tippy.popper.style.transitionDuration="0s",t._tippy.hide()},e)})}function f(t){var n=this;this.disableYearButtons();var r=Object.keys(this.previousStatuses).filter(function(t){return n.previousStatuses[t].column===i}),o=Array.from(this.nonEmptyDrugs).filter(function(t){return r.includes(t.id)}),d=o.filter(function(t){var e=n.model.unnestedData.find(function(e){return e.id===t.id})[s][p],i=t.style.transform.match(/translate\((.*?)\)/)?t.style.transform.match(/translate\((.*?)\)/)[1].replace(" ","").split(","):[0,0];return t.translateXY=i,n.previousStatuses[t.id].column===e.column&&n.previousStatuses[t.id].isDiscontinued===e.isDiscontinued&&("0px"!==i[0]||"0px"!==i[1])}),h=o.filter(function(t){return n.previousStatuses[t.id].isDiscontinued!==n.model.unnestedData.find(function(e){return e.id===t.id})[s][p].isDiscontinued}),m=[o.filter(function(t){return 0!==n.previousStatuses[t.id].column&&n.previousStatuses[t.id].column<n.model.unnestedData.find(function(e){return e.id===t.id})[s][p].column}),o.filter(function(t){return n.previousStatuses[t.id].column>n.model.unnestedData.find(function(e){return e.id===t.id})[s][p].column}),h,d,o.filter(function(t){return 0===n.previousStatuses[t.id].column})],v=m.reduce(function(t,e){return t+e.length},0);console.log(v),function n(r){var o=this;console.log("    subset "+r,m[r]),new Promise(function(t){0===m[r].length?(console.log("      skipping ^"),t(!0)):m[r].forEach(function(n,i,o){var a=3===r?c/12:4===r?c/1.5:c,s=3===r?.5*a*i:4===r?.1*a*i:a*i;e||(a=0,s=0),setTimeout(function(){console.log(a),u(n,a,r)},s),i===o.length-1&&setTimeout(function(){t(!0)},4===r?2*a:a*(i+1))})}).then(function(){++r<m.length?n.call(o,r):(a.stateModule.getState("isBackward")?i<l.length:i>0)?(a.stateModule.getState("isBackward")?i++:i--,f.call(o,t)):setTimeout(function(){o.enableYearButtons(),console.log(a.stateModule.getState("year")[0],o.model.years[o.model.years.length-1],a.stateModule.getState("year")[2]),o.enablePlayButton(),a.stateModule.getState("year")[0]==o.model.years[o.model.years.length-1]&&o.showReplayOption(),a.stateModule.getState("isPaused")?(o.removePauseOption(),o.enableYearButtons()):t(!0)},0===v?0:c)})}.call(this,0)}d?(this.nonEmptyDrugs.forEach(function(t){u(t,0)}),d=!1):(Array.from(this.nonEmptyDrugs).filter(function(t){return!Object.keys(n.previousStatuses).includes(t.id)}).forEach(function(t){n.previousStatuses[t.id]={column:0,isDiscontinued:!1}}),new Promise(function(t){f.call(n,t)}).then(function(){var e;e=0,t&&setTimeout(function(){t(!0)},e)}))}}]),e}();e.default=f},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=n(0);var o=function(){function t(e,n){var i=this;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),"string"!=typeof e)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=e,this.model=n.model,this.parent=n.parent,this.renderToSelector=n.renderToSelector,this.container=r.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.el=this.prerender(arguments),this.isReady=new Promise(function(t,e){i.resolve=t,i.reject=e})}return i(t,[{key:"prerender",value:function(){var t=r.DOMHelpers.q(this.selector);return t&&!this.rerender?(this.prerendered=!0,t):t?(t.innerHTML="",t):r.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),t}();e.default=o},function(t,e,n){t.exports={container:"src-views-viz-view--container",superSquat:"src-views-viz-view--superSquat",activeContainer:"src-views-viz-view--activeContainer",headerContainer:"src-views-viz-view--headerContainer",column:"src-views-viz-view--column",discontinuedContainer:"src-views-viz-view--discontinuedContainer",squat:"src-views-viz-view--squat",drug:"src-views-viz-view--drug",drugEmpty:"src-views-viz-view--drugEmpty",isTranslated:"src-views-viz-view--isTranslated",novel:"src-views-viz-view--novel",urgent:"src-views-viz-view--urgent",gramNegative:"src-views-viz-view--gramNegative",isMoving:"src-views-viz-view--isMoving",headerDiv:"src-views-viz-view--headerDiv",isAnimating:"src-views-viz-view--isAnimating",phaseFull:"src-views-viz-view--phaseFull",phaseAbbr:"src-views-viz-view--phaseAbbr",controlContainer:"src-views-viz-view--controlContainer",playButton:"src-views-viz-view--playButton",yearButton:"src-views-viz-view--yearButton",pause:"src-views-viz-view--pause",replay:"src-views-viz-view--replay",willPause:"src-views-viz-view--willPause",pauseSpinner:"src-views-viz-view--pauseSpinner",yearButtonActive:"src-views-viz-view--yearButtonActive",inputLabel:"src-views-viz-view--inputLabel"}},function(t,e,n){var i=n(13),r=n(2),o={};function a(t,e){var n=i(e.toString());return{token:"sub"+i(t+e),fn:n}}t.exports={logSubs:function(){console.log(o)},setSubs:function(t){t.forEach(function(t){var e=t[0],n=t[1],i=a(e,n);if(void 0===o[i.fn]&&(o[i.fn]={}),void 0!==o[i.fn][e])throw"Subscription token is already in use.";o[i.fn][e]=r.subscribe(e,n)})},cancelSub:function(t,e){var n=a(t,e);if(void 0===o[n.fn]||void 0===o[n.fn][t])throw"Subscription does not exist.";r.unsubscribe(o[n.fn][t]),delete o[n.fn][t],0===Object.keys(o[n.fn]).length&&delete o[n.fn]}}},function(t,e,n){"use strict";t.exports=function(t){for(var e=5381,n=t.length;n;)e=33*e^t.charCodeAt(--n);return e>>>0}},function(t,e,n){"use strict";n.r(e);var i=n(3);
/**!
* tippy.js v4.2.1
* (c) 2017-2019 atomiks
* MIT License
*/function r(){return(r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}var o="undefined"!=typeof window&&"undefined"!=typeof document,a=o?navigator.userAgent:"",s=/MSIE |Trident\//.test(a),p=/UCBrowser\//.test(a),u=o&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,l={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:0,distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",updateDuration:0,wait:null,zIndex:9999},c=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],d=o?Element.prototype:{},f=d.matches||d.matchesSelector||d.webkitMatchesSelector||d.mozMatchesSelector||d.msMatchesSelector;function h(t){return[].slice.call(t)}function m(t,e){return(d.closest||function(t){for(var e=this;e;){if(f.call(e,t))return e;e=e.parentElement}}).call(t,e)}function v(t,e){for(;t;){if(e(t))return t;t=t.parentElement}}var y={passive:!0},b=4,g="x-placement",w="x-out-of-boundaries",x="tippy-iOS",k="tippy-active",S=".tippy-popper",E=".tippy-tooltip",_=".tippy-content",O=".tippy-backdrop",C=".tippy-arrow",P=".tippy-roundarrow",A=Object.keys(l);function L(t,e){return{}.hasOwnProperty.call(t,e)}function T(t,e,n){if(Array.isArray(t)){var i=t[e];return null==i?n:i}return t}function D(t,e){var n;return function(){var i=this,r=arguments;clearTimeout(n),n=setTimeout(function(){return t.apply(i,r)},e)}}function M(t,e){return t&&t.modifiers&&t.modifiers[e]}function B(t,e){return t.indexOf(e)>-1}function I(t){return!(!t||!L(t,"isVirtual"))||t instanceof Element}function R(t,e){return"function"==typeof t?t.apply(null,e):t}function j(t,e){t.filter(function(t){return"flip"===t.name})[0].enabled=e}function Y(){return document.createElement("div")}function z(t,e){t.forEach(function(t){t&&(t.style.transitionDuration="".concat(e,"ms"))})}function H(t,e){t.forEach(function(t){t&&t.setAttribute("data-state",e)})}function F(t,e){var n=r({},e,{content:R(e.content,[t])},e.ignoreAttributes?{}:function(t){return A.reduce(function(e,n){var i=(t.getAttribute("data-tippy-".concat(n))||"").trim();if(!i)return e;if("content"===n)e[n]=i;else try{e[n]=JSON.parse(i)}catch(t){e[n]=i}return e},{})}(t));return(n.arrow||p)&&(n.animateFill=!1),n}function q(t,e){Object.keys(t).forEach(function(t){if(!L(e,t))throw new Error("[tippy]: `".concat(t,"` is not a valid option"))})}function N(t,e){t.innerHTML=e instanceof Element?e.innerHTML:e}function X(t,e){if(e.content instanceof Element)N(t,""),t.appendChild(e.content);else if("function"!=typeof e.content){t[e.allowHTML?"innerHTML":"textContent"]=e.content}}function W(t){return{tooltip:t.querySelector(E),backdrop:t.querySelector(O),content:t.querySelector(_),arrow:t.querySelector(C)||t.querySelector(P)}}function U(t){t.setAttribute("data-inertia","")}function V(t){var e=Y();return"round"===t?(e.className="tippy-roundarrow",N(e,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):e.className="tippy-arrow",e}function K(){var t=Y();return t.className="tippy-backdrop",t.setAttribute("data-state","hidden"),t}function G(t,e){t.setAttribute("tabindex","-1"),e.setAttribute("data-interactive","")}function J(t,e,n){var i=p&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";t[e+"EventListener"](i,n)}function Q(t){var e=t.getAttribute(g);return e?e.split("-")[0]:""}function $(t,e,n){n.split(" ").forEach(function(n){t.classList[e](n+"-theme")})}function Z(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.checkHideOnClick,n=t.exclude,i=t.duration;h(document.querySelectorAll(S)).forEach(function(t){var r=t._tippy;!r||e&&!0!==r.props.hideOnClick||n&&t===n.popper||r.hide(i)})}var tt=!1;function et(){tt||(tt=!0,u&&document.body.classList.add(x),window.performance&&document.addEventListener("mousemove",it))}var nt=0;function it(){var t=performance.now();t-nt<20&&(tt=!1,document.removeEventListener("mousemove",it),u||document.body.classList.remove(x)),nt=t}function rt(t){if(!(t.target instanceof Element))return Z();var e=m(t.target,S);if(!(e&&e._tippy&&e._tippy.props.interactive)){var n=v(t.target,function(t){return t._tippy&&t._tippy.reference===t});if(n){var i=n._tippy;if(i){var r=B(i.props.trigger||"","click");if(tt||r)return Z({exclude:i,checkHideOnClick:!0});if(!0!==i.props.hideOnClick||r)return;i.clearDelayTimeouts()}}Z({checkHideOnClick:!0})}}function ot(){var t=document.activeElement;t&&t.blur&&t._tippy&&t.blur()}var at=1;function st(t,e){var n,o,a,p,u,d=F(t,e);if(!d.multiple&&t._tippy)return null;var x,E,_,O,C=!1,P=!1,A=[],I=d.interactiveDebounce>0?D(ht,d.interactiveDebounce):ht,N=at++,Z=function(t,e){var n=Y();n.className="tippy-popper",n.id="tippy-".concat(t),n.style.zIndex=""+e.zIndex,e.role&&n.setAttribute("role",e.role);var i=Y();i.className="tippy-tooltip",i.style.maxWidth=e.maxWidth+("number"==typeof e.maxWidth?"px":""),i.setAttribute("data-size",e.size),i.setAttribute("data-animation",e.animation),i.setAttribute("data-state","hidden"),$(i,"add",e.theme);var r=Y();return r.className="tippy-content",r.setAttribute("data-state","hidden"),e.interactive&&G(n,i),e.arrow&&i.appendChild(V(e.arrowType)),e.animateFill&&(i.appendChild(K()),i.setAttribute("data-animatefill","")),e.inertia&&U(i),X(r,e),i.appendChild(r),n.appendChild(i),n}(N,d),et={id:N,reference:t,popper:Z,popperChildren:W(Z),popperInstance:null,props:d,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:St,set:Et,setContent:function(t){Et({content:t})},show:_t,hide:Ot,enable:function(){et.state.isEnabled=!0},disable:function(){et.state.isEnabled=!1},destroy:function(t){if(et.state.isDestroyed)return;et.state.isMounted&&Ot(0);ct(),delete et.reference._tippy,et.props.target&&t&&h(et.reference.querySelectorAll(et.props.target)).forEach(function(t){t._tippy&&t._tippy.destroy()});et.popperInstance&&et.popperInstance.destroy();et.state.isDestroyed=!0}};return t._tippy=et,Z._tippy=et,lt(),d.lazy||(wt(),et.popperInstance.disableEventListeners()),d.showOnInit&&xt(),d.a11y&&!d.target&&((O=t)instanceof Element&&(!f.call(O,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")||O.hasAttribute("disabled")))&&t.setAttribute("tabindex","0"),Z.addEventListener("mouseenter",function(t){et.props.interactive&&et.state.isVisible&&"mouseenter"===n&&xt(t)}),Z.addEventListener("mouseleave",function(){et.props.interactive&&"mouseenter"===n&&document.addEventListener("mousemove",I)}),et;function nt(){document.removeEventListener("mousemove",dt)}function it(){document.body.removeEventListener("mouseleave",kt),document.removeEventListener("mousemove",I)}function rt(){return[et.popperChildren.tooltip,et.popperChildren.backdrop,et.popperChildren.content]}function ot(){return et.props.followCursor&&!tt&&"focus"!==n}function pt(t,e){var n=et.popperChildren.tooltip;function i(t){t.target===n&&(J(n,"remove",i),e())}if(0===t)return e();J(n,"remove",_),J(n,"add",i),_=i}function ut(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];et.reference.addEventListener(t,e,n),A.push({eventType:t,handler:e,options:n})}function lt(){et.props.touchHold&&!et.props.target&&(ut("touchstart",ft,y),ut("touchend",mt,y)),et.props.trigger.trim().split(" ").forEach(function(t){if("manual"!==t)if(et.props.target)switch(t){case"mouseenter":ut("mouseover",yt),ut("mouseout",bt);break;case"focus":ut("focusin",yt),ut("focusout",bt);break;case"click":ut(t,yt)}else switch(ut(t,ft),t){case"mouseenter":ut("mouseleave",mt);break;case"focus":ut(s?"focusout":"blur",vt)}})}function ct(){A.forEach(function(t){var e=t.eventType,n=t.handler,i=t.options;et.reference.removeEventListener(e,n,i)}),A=[]}function dt(t){var e=o=t,n=e.clientX,i=e.clientY;if(et.popperInstance){var a=Q(et.popper),s=et.props.arrow?b+("round"===et.props.arrowType?18:16):b,p=B(["top","bottom"],a),u=B(["left","right"],a),l=p?Math.max(s,n):n,c=u?Math.max(s,i):i;p&&l>s&&(l=Math.min(n,window.innerWidth-s)),u&&c>s&&(c=Math.min(i,window.innerHeight-s));var d=et.reference.getBoundingClientRect(),f=et.props.followCursor,h="horizontal"===f,m="vertical"===f;et.popperInstance.reference=r({},et.popperInstance.reference,{getBoundingClientRect:function(){return{width:0,height:0,top:h?d.top:c,bottom:h?d.bottom:c,left:m?d.left:l,right:m?d.right:l}},clientWidth:0,clientHeight:0}),et.popperInstance.scheduleUpdate(),"initial"===f&&et.state.isVisible&&nt()}}function ft(t){et.state.isEnabled&&!gt(t)&&(et.state.isVisible||(n=t.type,t instanceof MouseEvent&&(o=t)),"click"===t.type&&!1!==et.props.hideOnClick&&et.state.isVisible?kt():xt(t))}function ht(t){var e=v(t.target,function(t){return t._tippy}),n=m(t.target,S)===et.popper,i=e===et.reference;n||i||function(t,e,n,i){if(!t)return!0;var r=n.clientX,o=n.clientY,a=i.interactiveBorder,s=i.distance,p=e.top-o>("top"===t?a+s:a),u=o-e.bottom>("bottom"===t?a+s:a),l=e.left-r>("left"===t?a+s:a),c=r-e.right>("right"===t?a+s:a);return p||u||l||c}(Q(et.popper),et.popper.getBoundingClientRect(),t,et.props)&&(it(),kt())}function mt(t){if(!gt(t))return et.props.interactive?(document.body.addEventListener("mouseleave",kt),void document.addEventListener("mousemove",I)):void kt()}function vt(t){t.target===et.reference&&(et.props.interactive&&t.relatedTarget&&et.popper.contains(t.relatedTarget)||kt())}function yt(t){m(t.target,et.props.target)&&xt(t)}function bt(t){m(t.target,et.props.target)&&kt()}function gt(t){var e="ontouchstart"in window,n=B(t.type,"touch"),i=et.props.touchHold;return e&&tt&&i&&!n||tt&&!i&&n}function wt(){var t=et.props.popperOptions,e=et.popperChildren,n=e.tooltip,o=e.arrow,a=M(t,"preventOverflow");function s(t){et.props.flip&&!et.props.flipOnUpdate&&(t.flipped&&(et.popperInstance.options.placement=t.placement),j(et.popperInstance.modifiers,!1)),n.setAttribute(g,t.placement),!1!==t.attributes[w]?n.setAttribute(w,""):n.removeAttribute(w),E&&E!==t.placement&&P&&(n.style.transition="none",requestAnimationFrame(function(){n.style.transition=""})),E=t.placement,P=et.state.isVisible;var e=Q(et.popper),i=n.style;i.top=i.bottom=i.left=i.right="",i[e]=-(et.props.distance-10)+"px";var o=a&&void 0!==a.padding?a.padding:b,s="number"==typeof o,p=r({top:s?o:o.top,bottom:s?o:o.bottom,left:s?o:o.left,right:s?o:o.right},!s&&o);p[e]=s?o+et.props.distance:(o[e]||0)+et.props.distance,et.popperInstance.modifiers.filter(function(t){return"preventOverflow"===t.name})[0].padding=p}var p=r({placement:et.props.placement},t,{modifiers:r({},t?t.modifiers:{},{preventOverflow:r({boundariesElement:et.props.boundary,padding:b},a),arrow:r({element:o,enabled:!!o},M(t,"arrow")),flip:r({enabled:et.props.flip,padding:et.props.distance+b,behavior:et.props.flipBehavior},M(t,"flip")),offset:r({offset:et.props.offset},M(t,"offset"))}),onCreate:function(e){s(e),t&&t.onCreate&&t.onCreate(e)},onUpdate:function(e){s(e),t&&t.onUpdate&&t.onUpdate(e)}});et.popperInstance=new i.a(et.reference,et.popper,p)}function xt(t){if(St(),!et.state.isVisible){if(et.props.target)return function(t){if(t){var n=m(t.target,et.props.target);n&&!n._tippy&&(st(n,r({},et.props,{content:R(e.content,[n]),appendTo:e.appendTo,target:"",showOnInit:!0})),xt(t))}}(t);if(C=!0,et.props.wait)return et.props.wait(et,t);ot()&&!et.state.isMounted&&document.addEventListener("mousemove",dt);var n=T(et.props.delay,0,l.delay);n?a=setTimeout(function(){_t()},n):_t()}}function kt(){if(St(),!et.state.isVisible)return nt();C=!1;var t=T(et.props.delay,1,l.delay);t?p=setTimeout(function(){et.state.isVisible&&Ot()},t):u=requestAnimationFrame(function(){Ot()})}function St(){clearTimeout(a),clearTimeout(p),cancelAnimationFrame(u)}function Et(t){q(t=t||{},l);var e=et.props,n=F(et.reference,r({},et.props,t,{ignoreAttributes:!0}));n.ignoreAttributes=L(t,"ignoreAttributes")?t.ignoreAttributes||!1:e.ignoreAttributes,et.props=n,(L(t,"trigger")||L(t,"touchHold"))&&(ct(),lt()),L(t,"interactiveDebounce")&&(it(),I=D(ht,t.interactiveDebounce||0)),function(t,e,n){var i=W(t),r=i.tooltip,o=i.content,a=i.backdrop,s=i.arrow;t.style.zIndex=""+n.zIndex,r.setAttribute("data-size",n.size),r.setAttribute("data-animation",n.animation),r.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?t.setAttribute("role",n.role):t.removeAttribute("role"),e.content!==n.content&&X(o,n),!e.animateFill&&n.animateFill?(r.appendChild(K()),r.setAttribute("data-animatefill","")):e.animateFill&&!n.animateFill&&(r.removeChild(a),r.removeAttribute("data-animatefill")),!e.arrow&&n.arrow?r.appendChild(V(n.arrowType)):e.arrow&&!n.arrow&&r.removeChild(s),e.arrow&&n.arrow&&e.arrowType!==n.arrowType&&r.replaceChild(V(n.arrowType),s),!e.interactive&&n.interactive?G(t,r):e.interactive&&!n.interactive&&function(t,e){t.removeAttribute("tabindex"),e.removeAttribute("data-interactive")}(t,r),!e.inertia&&n.inertia?U(r):e.inertia&&!n.inertia&&function(t){t.removeAttribute("data-inertia")}(r),e.theme!==n.theme&&($(r,"remove",e.theme),$(r,"add",n.theme))}(et.popper,e,n),et.popperChildren=W(et.popper),et.popperInstance&&(et.popperInstance.update(),c.some(function(n){return L(t,n)&&t[n]!==e[n]})&&(et.popperInstance.destroy(),wt(),et.state.isVisible||et.popperInstance.disableEventListeners(),et.props.followCursor&&o&&dt(o)))}function _t(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:T(et.props.duration,0,l.duration[1]);if(!et.state.isDestroyed&&et.state.isEnabled&&(!tt||et.props.touch)&&!et.reference.hasAttribute("disabled")&&!1!==et.props.onShow(et)){et.popper.style.visibility="visible",et.state.isVisible=!0,et.props.interactive&&et.reference.classList.add(k);var e=rt();z(e.concat(et.popper),0),function(t){var e=!(ot()||"initial"===et.props.followCursor&&tt);et.popperInstance?(ot()||(et.popperInstance.scheduleUpdate(),e&&et.popperInstance.enableEventListeners()),j(et.popperInstance.modifiers,et.props.flip)):(wt(),e||et.popperInstance.disableEventListeners()),et.popperInstance.reference=et.reference;var n=et.popperChildren.arrow;ot()?(n&&(n.style.margin="0"),o&&dt(o)):n&&(n.style.margin=""),tt&&o&&"initial"===et.props.followCursor&&(dt(o),n&&(n.style.margin="0")),function(t,e){var n=t.popper,i=t.options,r=i.onCreate,o=i.onUpdate;i.onCreate=i.onUpdate=function(t){!function(t){t.offsetHeight}(n),e(),o&&o(t),i.onCreate=r,i.onUpdate=o}}(et.popperInstance,t);var i=et.props.appendTo;(x="parent"===i?et.reference.parentNode:R(i,[et.reference])).contains(et.popper)||(x.appendChild(et.popper),et.props.onMount(et),et.state.isMounted=!0)}(function(){et.state.isVisible&&(ot()||et.popperInstance.update(),et.popperChildren.backdrop&&(et.popperChildren.content.style.transitionDelay=Math.round(t/12)+"ms"),et.props.sticky&&(z([et.popper],s?0:et.props.updateDuration),function t(){et.popperInstance&&et.popperInstance.scheduleUpdate(),et.state.isMounted?requestAnimationFrame(t):z([et.popper],0)}()),z([et.popper],d.updateDuration),z(e,t),H(e,"visible"),function(t,e){pt(t,e)}(t,function(){et.props.aria&&et.reference.setAttribute("aria-".concat(et.props.aria),et.popper.id),et.props.onShown(et),et.state.isShown=!0}))})}}function Ot(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:T(et.props.duration,1,l.duration[1]);if(!et.state.isDestroyed&&et.state.isEnabled&&!1!==et.props.onHide(et)){et.popper.style.visibility="hidden",et.state.isVisible=!1,et.state.isShown=!1,P=!1,et.props.interactive&&et.reference.classList.remove(k);var e=rt();z(e,t),H(e,"hidden"),function(t,e){pt(t,function(){!et.state.isVisible&&x&&x.contains(et.popper)&&e()})}(t,function(){C||nt(),et.props.aria&&et.reference.removeAttribute("aria-".concat(et.props.aria)),et.popperInstance.disableEventListeners(),et.popperInstance.options.placement=et.props.placement,x.removeChild(et.popper),et.props.onHidden(et),et.state.isMounted=!1})}}}var pt=!1;function ut(t,e){q(e||{},l),pt||(document.addEventListener("click",rt,!0),document.addEventListener("touchstart",et,y),window.addEventListener("blur",ot),pt=!0);var n,i=r({},l,e);n=t,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(t){var e={isVirtual:!0,attributes:t.attributes||{},setAttribute:function(e,n){t.attributes[e]=n},getAttribute:function(e){return t.attributes[e]},removeAttribute:function(e){delete t.attributes[e]},hasAttribute:function(e){return e in t.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(e){t.classList.classNames[e]=!0},remove:function(e){delete t.classList.classNames[e]},contains:function(e){return e in t.classList.classNames}}};for(var n in e)t[n]=e[n]}(t);var o=function(t){if(I(t))return[t];if(t instanceof NodeList)return h(t);if(Array.isArray(t))return t;try{return h(document.querySelectorAll(t))}catch(t){return[]}}(t).reduce(function(t,e){var n=e&&st(e,i);return n&&t.push(n),t},[]);return I(t)?o[0]:o}ut.version="4.2.1",ut.defaults=l,ut.setDefaults=function(t){Object.keys(t).forEach(function(e){l[e]=t[e]})},ut.hideAll=Z,ut.group=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.delay,i=void 0===n?t[0].props.delay:n,o=e.duration,a=void 0===o?0:o;if(!t.some(function(t){return L(t,"_originalProps")})){var s=!1;t.forEach(function(t){t._originalProps=r({},t.props)}),d()}function p(t){s=t,d()}function u(e){e._originalProps.onShow(e),t.forEach(function(t){t.set({duration:a}),t.hide()}),p(!0)}function l(t){t._originalProps.onHide(t),p(!1)}function c(t){t._originalProps.onShown(t),t.set({duration:t._originalProps.duration})}function d(){t.forEach(function(t){t.set({onShow:u,onShown:c,onHide:l,delay:s?[0,Array.isArray(i)?i[1]:i]:i,duration:s?a:t._originalProps.duration})})}},o&&setTimeout(function(){h(document.querySelectorAll("[data-tippy]")).forEach(function(t){var e=t.getAttribute("data-tippy");e&&ut(t,{content:e})})}),function(t){if(o){var e=document.createElement("style");e.type="text/css",e.textContent=t;var n=document.head,i=n.firstChild;i?n.insertBefore(e,i):n.appendChild(e)}}('.tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}'),e.default=ut},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=n(18),s=(i=a)&&i.__esModule?i:{default:i};var p=function(){function t(e,n){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.container=e,this.el=document.querySelector(e),Object.keys(n).forEach(function(t){i[t]=n[t]})}return o(t,[{key:"init",value:function(t){this.needsRouter&&(this.router=new s.default,this.router.init(t)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var t=!1,e=document.body,n=0;function i(){new Date-n<500||t||(e.classList.add("has-hover"),t=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){t&&(e.classList.remove("has-hover"),t=!1)},!0),document.addEventListener("mousemove",i,!0),i()}},{key:"createComponent",value:function(t,e,n,i){var o=Object.create({children:[],data:null,model:t,parent:null,rerenderOnDataMismatch:!1});if(null!==i&&"object"===(void 0===i?"undefined":r(i)))for(var a in i)i.hasOwnProperty(a)&&(o[a]=i[a]);return new e(n,o)}}]),t}();e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"init",value:function(t){var e=this;if(void 0===t||"object"!==(void 0===t?"undefined":i(t)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof t.encode||"function"!=typeof t.decode||!Array.isArray(t.views)||"object"!==i(t.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=t.encode,this.decodeHash=t.decode,this.viewPromises=t.views.map(function(t){return t.isReady}),this.PS=t.PS,Promise.all(this.viewPromises).then(function(){e.decodeHash()}),this.PS.setSubs(t.subscriptions.map(function(t){return[t,function(t,n){e.hashChange.call(e,t,n)}]}))}},{key:"hashChange",value:function(t,e){this.setStateObj(t,e),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(t,e){this.stateObj[t]=e}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),t}();e.default=o},function(t,e){t.exports='<section id="intro">\n    <div class="js-inner-content">\n    </div>\n</section>\n<section id="section-comparison">\n    <div class="js-inner-content">\n        <h2>Antibiotics in Development Since 2014</h2>\n        <div class="abx-legend">\n            <div class="abx-legend--wrapper">\n                <p class="abx-legend--item abx-legend--item--abx">Antibiotic</p>\n                <p class="abx-legend--item abx-legend--item--urgent">Potential to treat CDC urgent pathogen</p>\n            </div>\n            <div class="abx-legend--wrapper">\n                <p class="abx-legend--item abx-legend--item--novel">Novel antibiotics</p>\n                <p class="abx-legend--item abx-legend--item--gram">Potential to treat Gram-negative bacteria</p>\n            </div>\n        </div>\n        <div id="abx-visualization">\n        </div>\n        <div id="abx-totals">\n            <p><span id="big-year">2014</span></p>\n            <p>Total <strong>approved</strong> antibiotics <span class="since-2014">since 2014</span>: <span id="total-approved" class="total-span"></span></p>\n            <p>Total <strong>discontinued</strong> antibiotics <span class="since-2014">since 2014</span>: <span id="total-discontinued" class="total-span"></span></p>\n        </div>\n    </div>\n</section>\n<div id="abx-notes"></div>\n<footer class="download-resources">\n    <div>\n        <p><strong>Download resources:</strong>\n            <a class="pct-download" href="">Methodology</a>\n            <a class="pct-download" href="">Report</a>\n        </p>\n    </div>\n</footer>'},function(t,e){t.exports='<h2 id="antibiotic-innovation">Antibiotic Innovation</h2>\n<p>The Pew Charitable Trusts has tracked the pipeline of antibiotics in clinical development since 2014 and has aggregated the\nupdates into an interactive tool that illustrates trends in the pipeline. This longitudinal data visualization underscores the longstanding concerns of scientists, doctors, public health officials, and other stakeholders regarding the dangerously low number of antibiotics in development to address current and future patient needs, particularly for treating the most urgent bacterial threats, such as Gram-negative pathogens.</p>\n<p>Click the play button to see the evolution of the antibiotic pipeline since 2014, or click on an individual year to see the status of the pipeline at a particular point in time. To see additional information about each drug, hover over any of the rectangles.</p>\n'},function(t,e){t.exports="<p><strong>Notes:</strong> Clinical candidates included in this data visualization are consistent with Pew’s methodology for tracking antibiotics in clinical development. More information about the methods and the full underlying data can be found in the latest analysis of the pipeline. Pew’s updates are conducted semiannually, except for 2014, when they were published quarterly, and 2018, when a timeline adjustment resulted in just one update for the year.</p>\n"},function(t,e,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,