!function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=16)}([function(e,t,i){e.exports={container:"src-views-viz-view--container",superSquat:"src-views-viz-view--superSquat",activeContainer:"src-views-viz-view--activeContainer",headerContainer:"src-views-viz-view--headerContainer",column:"src-views-viz-view--column",discontinuedContainer:"src-views-viz-view--discontinuedContainer",squat:"src-views-viz-view--squat",drug:"src-views-viz-view--drug",drugEmpty:"src-views-viz-view--drugEmpty",isTranslated:"src-views-viz-view--isTranslated",novel:"src-views-viz-view--novel",urgent:"src-views-viz-view--urgent",gramNegative:"src-views-viz-view--gramNegative",detailDrawer:"src-views-viz-view--detailDrawer",headerDiv:"src-views-viz-view--headerDiv",phaseFull:"src-views-viz-view--phaseFull",phaseAbbr:"src-views-viz-view--phaseAbbr",controlContainer:"src-views-viz-view--controlContainer",playButton:"src-views-viz-view--playButton",yearButton:"src-views-viz-view--yearButton",isPaused:"src-views-viz-view--isPaused",yearButtonActive:"src-views-viz-view--yearButtonActive",observation:"src-views-viz-view--observation",observation0:"src-views-viz-view--observation0",observation1:"src-views-viz-view--observation1"}},function(e,t,i){const n=i(3),r={};function s(){console.log(r)}Array.prototype.compare=Array.prototype.compare||function(e){if(this.length!=e.length)return!1;if(0===this.length&&0===e.length)return!0;console.log("in compare"),console.log(this);for(var t=0;t<e.length;t++)if(this[t]!==e[t])return!1;return!0},t.stateModule={logState:s,getState:function(e){return void 0!==r[e]?r[e][0]:void 0},getPreviousState:function(e){return void 0!==r[e]&&void 0!==r[e][1]?r[e][1]:void 0},setState:function(e,t){void 0===r[e]?(r[e]=[t],n.publish(e,t),s()):("string"==typeof t||"number"==typeof t?r[e][0]!==t:!Array.isArray(t)||!Array.isArray(r[e][0])||!t.compare(r[e][0]))&&(r[e].unshift(t),n.publish(e,t),s(),r[e].length>2&&(r[e].length=2))}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GTMPush=function(e){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:e})},t.publishWindowResize=function(e){var t;window.addEventListener("resize",function(){t||(t=setTimeout(function(){e.setState("resize",[document.documentElement.clientWidth,document.documentElement.clientHeight]),t=null},350))},!1)};t.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(e,t){var i=this,n=t||0;return t&&(this.style.transition="opacity "+t+"s ease-in-out"),new Promise(function(t){var r=window.getComputedStyle(i).getPropertyValue("transition-duration")||n,s=1e3*parseFloat(r);i.fadeOutContent(),setTimeout(function(){i.innerHTML=e,i.classList.remove("no-opacity"),t(!0)},s)})})),t.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(e,t){if(this.length<=e)return this;var i=this.substr(0,e-1);return(t?i.substr(0,i.lastIndexOf(" ")):i)+"..."},void(String.prototype.hashCode=function(){var e,t=0;if(0===this.length)return t;for(e=0;e<this.length;e++)t=(t<<5)-t+this.charCodeAt(e),t|=0;return t})),t.DOMHelpers={c:function(e){if(-1!==e.indexOf(".")||-1!==e.indexOf("#")){var t=e.match(/\.([^#.]*)/g)||[],i=e.match(/#([^.]*)/),n=e.match(/^([^.#]+)/),r=document.createElement(n[0]);return t.forEach(function(e){r.classList.add(e.replace(".",""))}),null!==i&&r.setAttribute("id",i[1]),r}return document.createElement(e)},q:function(e){return document.querySelector(e)},qa:function(e){return document.querySelectorAll(e)}}},function(e,t,i){(function(e){!function(i,n){"use strict";var r={};i.PubSub=r;var s=i.define;!function(e){var t={},i=-1;function n(e){var t;for(t in e)if(e.hasOwnProperty(t))return!0;return!1}function r(e,t,i){try{e(t,i)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function s(e,t,i){e(t,i)}function a(e,i,n,a){var o,u=t[i],c=a?s:r;if(t.hasOwnProperty(i))for(o in u)u.hasOwnProperty(o)&&c(u[o],e,n)}function o(e,i,r,s){var o=function(e,t,i){return function(){var n=String(e),r=n.lastIndexOf(".");for(a(e,e,t,i);-1!==r;)n=n.substr(0,r),r=n.lastIndexOf("."),a(e,n,t,i)}}(e="symbol"==typeof e?e.toString():e,i,s),u=function(e){var i=String(e),r=Boolean(t.hasOwnProperty(i)&&n(t[i])),s=i.lastIndexOf(".");for(;!r&&-1!==s;)i=i.substr(0,s),s=i.lastIndexOf("."),r=Boolean(t.hasOwnProperty(i)&&n(t[i]));return r}(e);return!!u&&(!0===r?o():setTimeout(o,0),!0)}e.publish=function(t,i){return o(t,i,!1,e.immediateExceptions)},e.publishSync=function(t,i){return o(t,i,!0,e.immediateExceptions)},e.subscribe=function(e,n){if("function"!=typeof n)return!1;e="symbol"==typeof e?e.toString():e,t.hasOwnProperty(e)||(t[e]={});var r="uid_"+String(++i);return t[e][r]=n,r},e.subscribeOnce=function(t,i){var n=e.subscribe(t,function(){e.unsubscribe(n),i.apply(this,arguments)});return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var i;for(i in t)t.hasOwnProperty(i)&&0===i.indexOf(e)&&delete t[i]},e.unsubscribe=function(i){var n,r,s,a="string"==typeof i&&(t.hasOwnProperty(i)||function(e){var i;for(i in t)if(t.hasOwnProperty(i)&&0===i.indexOf(e))return!0;return!1}(i)),o=!a&&"string"==typeof i,u="function"==typeof i,c=!1;if(!a){for(n in t)if(t.hasOwnProperty(n)){if(r=t[n],o&&r[i]){delete r[i],c=i;break}if(u)for(s in r)r.hasOwnProperty(s)&&r[s]===i&&(delete r[s],c=!0)}return c}e.clearSubscriptions(i)}}(r),"function"==typeof s&&s.amd?s(function(){return r}):(void 0!==e&&e.exports&&(t=e.exports=r),t.PubSub=r,e.exports=t=r)}("object"==typeof window&&window||this)}).call(this,i(12)(e))},function(e,t,i){var n,r,s;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),r=[],void 0===(s="function"==typeof(n=function(){"use strict";var e,t,i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==i?i:{},n=!i.document&&!!i.postMessage,r=n&&/(\?|&)papaworker(=|&|$)/.test(i.location.search),s=!1,a={},o=0,u={parse:function(t,n){var r=(n=n||{}).dynamicTyping||!1;if(E(r)&&(n.dynamicTypingFunction=r,r={}),n.dynamicTyping=r,n.transform=!!E(n.transform)&&n.transform,n.worker&&u.WORKERS_SUPPORTED){var c=function(){if(!u.WORKERS_SUPPORTED)return!1;if(!s&&null===u.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var t=u.SCRIPT_PATH||e;t+=(-1!==t.indexOf("?")?"&":"?")+"papaworker";var n=new i.Worker(t);return n.onmessage=y,n.id=o++,a[n.id]=n}();return c.userStep=n.step,c.userChunk=n.chunk,c.userComplete=n.complete,c.userError=n.error,n.step=E(n.step),n.chunk=E(n.chunk),n.complete=E(n.complete),n.error=E(n.error),delete n.worker,void c.postMessage({input:t,config:n,workerId:c.id})}var d=null;return u.NODE_STREAM_INPUT,"string"==typeof t?d=n.download?new l(n):new f(n):!0===t.readable&&E(t.read)&&E(t.on)?d=new p(n):(i.File&&t instanceof File||t instanceof Object)&&(d=new h(n)),d.stream(t)},unparse:function(e,t){var i=!1,n=!0,r=",",s="\r\n",a='"',o=!1;"object"==typeof t&&("string"!=typeof t.delimiter||u.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(r=t.delimiter),("boolean"==typeof t.quotes||Array.isArray(t.quotes))&&(i=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(o=t.skipEmptyLines),"string"==typeof t.newline&&(s=t.newline),"string"==typeof t.quoteChar&&(a=t.quoteChar),"boolean"==typeof t.header&&(n=t.header));var c=new RegExp(v(a),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return l(null,e,o);if("object"==typeof e[0])return l(d(e[0]),e,o)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:d(e.data[0])),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),l(e.fields||[],e.data||[],o);throw"exception: Unable to serialize unrecognized input";function d(e){if("object"!=typeof e)return[];var t=[];for(var i in e)t.push(i);return t}function l(e,t,i){var a="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var o=Array.isArray(e)&&0<e.length,u=!Array.isArray(t[0]);if(o&&n){for(var c=0;c<e.length;c++)0<c&&(a+=r),a+=h(e[c],c);0<t.length&&(a+=s)}for(var d=0;d<t.length;d++){var l=o?e.length:t[d].length,f=!1,p=o?0===Object.keys(t[d]).length:0===t[d].length;if(i&&!o&&(f="greedy"===i?""===t[d].join("").trim():1===t[d].length&&0===t[d][0].length),"greedy"===i&&o){for(var m=[],v=0;v<l;v++){var g=u?e[v]:v;m.push(t[d][g])}f=""===m.join("").trim()}if(!f){for(var y=0;y<l;y++){0<y&&!p&&(a+=r);var b=o&&u?e[y]:y;a+=h(t[d][b],y)}d<t.length-1&&(!i||0<l&&!p)&&(a+=s)}}return a}function h(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);e=e.toString().replace(c,a+a);var n="boolean"==typeof i&&i||Array.isArray(i)&&i[t]||function(e,t){for(var i=0;i<t.length;i++)if(-1<e.indexOf(t[i]))return!0;return!1}(e,u.BAD_DELIMITERS)||-1<e.indexOf(r)||" "===e.charAt(0)||" "===e.charAt(e.length-1);return n?a+e+a:e}}};if(u.RECORD_SEP=String.fromCharCode(30),u.UNIT_SEP=String.fromCharCode(31),u.BYTE_ORDER_MARK="\ufeff",u.BAD_DELIMITERS=["\r","\n",'"',u.BYTE_ORDER_MARK],u.WORKERS_SUPPORTED=!n&&!!i.Worker,u.SCRIPT_PATH=null,u.NODE_STREAM_INPUT=1,u.LocalChunkSize=10485760,u.RemoteChunkSize=5242880,u.DefaultDelimiter=",",u.Parser=g,u.ParserHandle=m,u.NetworkStreamer=l,u.FileStreamer=h,u.StringStreamer=f,u.ReadableStreamStreamer=p,i.jQuery){var c=i.jQuery;c.fn.parse=function(e){var t=e.config||{},n=[];return this.each(function(e){if("INPUT"!==c(this).prop("tagName").toUpperCase()||"file"!==c(this).attr("type").toLowerCase()||!i.FileReader||!this.files||0===this.files.length)return!0;for(var r=0;r<this.files.length;r++)n.push({file:this.files[r],inputElem:this,instanceConfig:c.extend({},t)})}),r(),this;function r(){if(0!==n.length){var t,i,r,a=n[0];if(E(e.before)){var o=e.before(a.file,a.inputElem);if("object"==typeof o){if("abort"===o.action)return t=a.file,i=a.inputElem,r=o.reason,void(E(e.error)&&e.error({name:"AbortError"},t,i,r));if("skip"===o.action)return void s();"object"==typeof o.config&&(a.instanceConfig=c.extend(a.instanceConfig,o.config))}else if("skip"===o)return void s()}var d=a.instanceConfig.complete;a.instanceConfig.complete=function(e){E(d)&&d(e,a.file,a.inputElem),s()},u.parse(a.file,a.instanceConfig)}else E(e.complete)&&e.complete()}function s(){n.splice(0,1),r()}}}function d(e){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=_(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new m(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&E(this._config.beforeFirstChunk)){var n=this._config.beforeFirstChunk(e);void 0!==n&&(e=n)}this.isFirstChunk=!1;var s=this._partialLine+e;this._partialLine="";var a=this._handle.parse(s,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var o=a.meta.cursor;this._finished||(this._partialLine=s.substring(o-this._baseIndex),this._baseIndex=o),a&&a.data&&(this._rowCount+=a.data.length);var c=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(r)i.postMessage({results:a,workerId:u.WORKER_ID,finished:c});else if(E(this._config.chunk)&&!t){if(this._config.chunk(a,this._handle),this._handle.paused()||this._handle.aborted())return;a=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(a.data),this._completeResults.errors=this._completeResults.errors.concat(a.errors),this._completeResults.meta=a.meta),this._completed||!c||!E(this._config.complete)||a&&a.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),c||a&&a.meta.paused||this._nextChunk(),a}},this._sendError=function(e){E(this._config.error)?this._config.error(e):r&&this._config.error&&i.postMessage({workerId:u.WORKER_ID,error:e,finished:!1})}}function l(e){var t;(e=e||{}).chunkSize||(e.chunkSize=u.RemoteChunkSize),d.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),n||(t.onload=S(this._chunkLoaded,this),t.onerror=S(this._chunkError,this)),t.open("GET",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var i in e)t.setRequestHeader(i,e[i])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+r),t.setRequestHeader("If-None-Match","webkit-no-cache")}try{t.send()}catch(e){this._chunkError(e.message)}n&&0===t.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var e;4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(e=t.getResponseHeader("Content-Range"))?-1:parseInt(e.substr(e.lastIndexOf("/")+1))),this.parseChunk(t.responseText)))},this._chunkError=function(e){var i=t.statusText||e;this._sendError(new Error(i))}}function h(e){var t,i;(e=e||{}).chunkSize||(e.chunkSize=u.LocalChunkSize),d.call(this,e);var n="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,i=e.slice||e.webkitSlice||e.mozSlice,n?((t=new FileReader).onload=S(this._chunkLoaded,this),t.onerror=S(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var r=Math.min(this._start+this._config.chunkSize,this._input.size);e=i.call(e,this._start,r)}var s=t.readAsText(e,this._config.encoding);n||this._chunkLoaded({target:{result:s}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function f(e){var t;d.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,i=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(i)}}}function p(e){d.call(this,e=e||{});var t=[],i=!0,n=!1;this.pause=function(){d.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){d.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){n&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):i=!0},this._streamData=S(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),i&&(i=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=S(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=S(function(){this._streamCleanUp(),n=!0,this._streamData("")},this),this._streamCleanUp=S(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function m(e){var t,i,n,r=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,s=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,a=this,o=0,c=0,d=!1,l=!1,h=[],f={data:[],errors:[],meta:{}};if(E(e.step)){var p=e.step;e.step=function(t){if(f=t,b())y();else{if(y(),0===f.data.length)return;o+=t.data.length,e.preview&&o>e.preview?i.abort():p(f,a)}}}function m(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function y(){if(f&&n&&(S("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+u.DefaultDelimiter+"'"),n=!1),e.skipEmptyLines)for(var t=0;t<f.data.length;t++)m(f.data[t])&&f.data.splice(t--,1);return b()&&function(){if(f){for(var t=0;b()&&t<f.data.length;t++)for(var i=0;i<f.data[t].length;i++){var n=f.data[t][i];e.trimHeaders&&(n=n.trim()),h.push(n)}f.data.splice(0,1)}}(),function(){if(!f||!e.header&&!e.dynamicTyping&&!e.transform)return f;for(var t=0;t<f.data.length;t++){var i,n=e.header?{}:[];for(i=0;i<f.data[t].length;i++){var r=i,s=f.data[t][i];e.header&&(r=i>=h.length?"__parsed_extra":h[i]),e.transform&&(s=e.transform(s,r)),s=w(r,s),"__parsed_extra"===r?(n[r]=n[r]||[],n[r].push(s)):n[r]=s}f.data[t]=n,e.header&&(i>h.length?S("FieldMismatch","TooManyFields","Too many fields: expected "+h.length+" fields but parsed "+i,c+t):i<h.length&&S("FieldMismatch","TooFewFields","Too few fields: expected "+h.length+" fields but parsed "+i,c+t))}return e.header&&f.meta&&(f.meta.fields=h),c+=f.data.length,f}()}function b(){return e.header&&0===h.length}function w(t,i){return n=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[n]&&(e.dynamicTyping[n]=e.dynamicTypingFunction(n)),!0===(e.dynamicTyping[n]||e.dynamicTyping)?"true"===i||"TRUE"===i||"false"!==i&&"FALSE"!==i&&(r.test(i)?parseFloat(i):s.test(i)?new Date(i):""===i?null:i):i;var n}function S(e,t,i,n){f.errors.push({type:e,code:t,message:i,row:n})}this.parse=function(r,s,a){var o=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substr(0,1048576);var i=new RegExp(v(t)+"([^]*?)"+v(t),"gm"),n=(e=e.replace(i,"")).split("\r"),r=e.split("\n"),s=1<r.length&&r[0].length<n[0].length;if(1===n.length||s)return"\n";for(var a=0,o=0;o<n.length;o++)"\n"===n[o][0]&&a++;return a>=n.length/2?"\r\n":"\r"}(r,o)),n=!1,e.delimiter)E(e.delimiter)&&(e.delimiter=e.delimiter(r),f.meta.delimiter=e.delimiter);else{var c=function(t,i,n,r){for(var s,a,o,c=[",","\t","|",";",u.RECORD_SEP,u.UNIT_SEP],d=0;d<c.length;d++){var l=c[d],h=0,f=0,p=0;o=void 0;for(var v=new g({comments:r,delimiter:l,newline:i,preview:10}).parse(t),y=0;y<v.data.length;y++)if(n&&m(v.data[y]))p++;else{var b=v.data[y].length;f+=b,void 0!==o?1<b&&(h+=Math.abs(b-o),o=b):o=0}0<v.data.length&&(f/=v.data.length-p),(void 0===a||a<h)&&1.99<f&&(a=h,s=l)}return{successful:!!(e.delimiter=s),bestDelimiter:s}}(r,e.newline,e.skipEmptyLines,e.comments);c.successful?e.delimiter=c.bestDelimiter:(n=!0,e.delimiter=u.DefaultDelimiter),f.meta.delimiter=e.delimiter}var l=_(e);return e.preview&&e.header&&l.preview++,t=r,i=new g(l),f=i.parse(t,s,a),y(),d?{meta:{paused:!0}}:f||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,i.abort(),t=t.substr(i.getCharIndex())},this.resume=function(){d=!1,a.streamer.parseChunk(t,!0)},this.aborted=function(){return l},this.abort=function(){l=!0,i.abort(),f.meta.aborted=!0,E(e.complete)&&e.complete(f),t=""}}function v(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function g(e){var t,i=(e=e||{}).delimiter,n=e.newline,r=e.comments,s=e.step,a=e.preview,o=e.fastMode,c=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(c=e.escapeChar),("string"!=typeof i||-1<u.BAD_DELIMITERS.indexOf(i))&&(i=","),r===i)throw"Comment character same as delimiter";!0===r?r="#":("string"!=typeof r||-1<u.BAD_DELIMITERS.indexOf(r))&&(r=!1),"\n"!==n&&"\r"!==n&&"\r\n"!==n&&(n="\n");var d=0,l=!1;this.parse=function(e,u,h){if("string"!=typeof e)throw"Input must be a string";var f=e.length,p=i.length,m=n.length,g=r.length,y=E(s),b=[],w=[],_=[],S=d=0;if(!e)return j();if(o||!1!==o&&-1===e.indexOf(t)){for(var C=e.split(n),k=0;k<C.length;k++){if(_=C[k],d+=_.length,k!==C.length-1)d+=n.length;else if(h)return j();if(!r||_.substr(0,g)!==r){if(y){if(b=[],L(_.split(i)),z(),l)return j()}else L(_.split(i));if(a&&a<=k)return b=b.slice(0,a),j(!0)}}return j()}for(var x,O=e.indexOf(i,d),P=e.indexOf(n,d),D=new RegExp(v(c)+v(t),"g");;)if(e[d]!==t)if(r&&0===_.length&&e.substr(d,g)===r){if(-1===P)return j();d=P+m,P=e.indexOf(n,d),O=e.indexOf(i,d)}else if(-1!==O&&(O<P||-1===P))_.push(e.substring(d,O)),d=O+p,O=e.indexOf(i,d);else{if(-1===P)break;if(_.push(e.substring(d,P)),I(P+m),y&&(z(),l))return j();if(a&&b.length>=a)return j(!0)}else for(x=d,d++;;){if(-1===(x=e.indexOf(t,x+1)))return h||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:b.length,index:d}),M();if(x===f-1)return M(e.substring(d,x).replace(D,t));if(t!==c||e[x+1]!==c){if(t===c||0===x||e[x-1]!==c){var A=R(-1===P?O:Math.min(O,P));if(e[x+1+A]===i){_.push(e.substring(d,x).replace(D,t)),d=x+1+A+p,O=e.indexOf(i,d),P=e.indexOf(n,d);break}var T=R(P);if(e.substr(x+1+T,m)===n){if(_.push(e.substring(d,x).replace(D,t)),I(x+1+T+m),O=e.indexOf(i,d),y&&(z(),l))return j();if(a&&b.length>=a)return j(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:b.length,index:d}),x++}}else x++}return M();function L(e){b.push(e),S=d}function R(t){var i=0;if(-1!==t){var n=e.substring(x+1,t);n&&""===n.trim()&&(i=n.length)}return i}function M(t){return h||(void 0===t&&(t=e.substr(d)),_.push(t),d=f,L(_),y&&z()),j()}function I(t){d=t,L(_),_=[],P=e.indexOf(n,d)}function j(e){return{data:b,errors:w,meta:{delimiter:i,linebreak:n,aborted:l,truncated:!!e,cursor:S+(u||0)}}}function z(){s(j()),b=[],w=[]}},this.abort=function(){l=!0},this.getCharIndex=function(){return d}}function y(e){var t=e.data,i=a[t.workerId],n=!1;if(t.error)i.userError(t.error,t.file);else if(t.results&&t.results.data){var r={abort:function(){n=!0,b(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(E(i.userStep)){for(var s=0;s<t.results.data.length&&(i.userStep({data:[t.results.data[s]],errors:t.results.errors,meta:t.results.meta},r),!n);s++);delete t.results}else E(i.userChunk)&&(i.userChunk(t.results,r,t.file),delete t.results)}t.finished&&!n&&b(t.workerId,t.results)}function b(e,t){var i=a[e];E(i.userComplete)&&i.userComplete(t),i.terminate(),delete a[e]}function w(){throw"Not implemented."}function _(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var i in e)t[i]=_(e[i]);return t}function S(e,t){return function(){e.apply(t,arguments)}}function E(e){return"function"==typeof e}return r?i.onmessage=function(e){var t=e.data;if(void 0===u.WORKER_ID&&t&&(u.WORKER_ID=t.workerId),"string"==typeof t.input)i.postMessage({workerId:u.WORKER_ID,results:u.parse(t.input,t.config),finished:!0});else if(i.File&&t.input instanceof File||t.input instanceof Object){var n=u.parse(t.input,t.config);n&&i.postMessage({workerId:u.WORKER_ID,results:n,finished:!0})}}:u.WORKERS_SUPPORTED&&(t=document.getElementsByTagName("script"),e=t.length?t[t.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){s=!0},!0):s=!0),(l.prototype=Object.create(d.prototype)).constructor=l,(h.prototype=Object.create(d.prototype)).constructor=h,(f.prototype=Object.create(f.prototype)).constructor=f,(p.prototype=Object.create(d.prototype)).constructor=p,u})?n.apply(t,r):n)||(e.exports=s)},function(e,t,i){e.exports=i.p+"data/abx-data.csv?v=3d4592"},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),r=i(2);var s=function(){function e(t,i){var n=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"!=typeof t)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=t,this.model=i.model,this.parent=i.parent,this.renderToSelector=i.renderToSelector,this.container=r.DOMHelpers.q(this.renderToSelector),this.children=i.children,this.rerender=i.rerenderOnDataMismatch&&i.model.isMismatched,this.data=i.data,this.el=this.prerender(arguments),this.isReady=new Promise(function(e,t){n.resolve=e,n.reject=t})}return n(e,[{key:"prerender",value:function(){var e=r.DOMHelpers.q(this.selector);return e&&!this.rerender?(this.prerendered=!0,e):e?(e.innerHTML="",e):r.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),e}();t.default=s},function(e,t,i){var n=i(13),r=i(3),s={};function a(e,t){var i=n(t.toString());return{token:"sub"+n(e+t),fn:i}}e.exports={logSubs:function(){console.log(s)},setSubs:function(e){e.forEach(function(e){var t=e[0],i=e[1],n=a(t,i);if(void 0===s[n.fn]&&(s[n.fn]={}),void 0!==s[n.fn][t])throw"Subscription token is already in use.";s[n.fn][t]=r.subscribe(t,i)})},cancelSub:function(e,t){var i=a(e,t);if(void 0===s[i.fn]||void 0===s[i.fn][e])throw"Subscription does not exist.";r.unsubscribe(s[i.fn][e]),delete s[i.fn][e],0===Object.keys(s[i.fn]).length&&delete s[i.fn]}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),a=i(14),o=(n=a)&&n.__esModule?n:{default:n};var u=function(){function e(t,i){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.el=document.querySelector(t),Object.keys(i).forEach(function(e){n[e]=i[e]})}return s(e,[{key:"init",value:function(e){this.needsRouter&&(this.router=new o.default,this.router.init(e)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var e=!1,t=document.body,i=0;function n(){new Date-i<500||e||(t.classList.add("has-hover"),e=!0)}document.addEventListener("touchstart",function(){i=new Date},!0),document.addEventListener("touchstart",function(){e&&(t.classList.remove("has-hover"),e=!1)},!0),document.addEventListener("mousemove",n,!0),n()}},{key:"createComponent",value:function(e,t,i,n){var s=Object.create({children:[],data:null,model:e,parent:null,rerenderOnDataMismatch:!1});if(null!==n&&"object"===(void 0===n?"undefined":r(n)))for(var a in n)n.hasOwnProperty(a)&&(s[a]=n[a]);return new t(i,s)}}]),e}();t.default=u},function(e,t){e.exports='<section id="intro">\n    <div class="js-inner-content">\n    </div>\n</section>\n<section id="section-comparison">\n    <div class="js-inner-content">\n        <h2>Antibiotics in Development Since 2014</h2>\n        <div class="abx-legend">\n            <div class="abx-legend--wrapper">\n                <p class="abx-legend--item abx-legend--item--abx">Antibiotic</p>\n                <p class="abx-legend--item abx-legend--item--urgent">Potential to treat CDC urgent pathogen</p>\n            </div>\n            <div class="abx-legend--wrapper">\n                <p class="abx-legend--item abx-legend--item--novel">Novel antibiotics</p>\n                <p class="abx-legend--item abx-legend--item--gram">Potential to treat Gram-negative bacteria</p>\n            </div>\n        </div>\n        <div id="abx-visualization">\n        </div>\n        <div id="abx-totals">\n            <p>Total approved antibiotics since 2014 / <span id="total-approved" class="total-span"></span></p>\n            <p>Total discontinued antibiotics since 2014 / <span id="total-discontinued" class="total-span"></span></p>\n        </div>\n    </div>\n</section>\n<div id="abx-notes"></div>\n<footer class="download-resources">\n    <div>\n        <p><strong>Download resources:</strong>\n            <a class="pct-download" href="">Methodology</a>\n            <a class="pct-download" href="">Report</a>\n        </p>\n    </div>\n</footer>'},function(e,t){e.exports='<h2 id="antibiotic-innovation">Antibiotic Innovation</h2>\n<p>The Pew Charitable Trusts has tracked the pipeline of antibiotics in clinical development since 2014 and has aggregated the\nupdates into an interactive tool that illustrates trends in the pipeline. This longitudinal data visualization underscores the longstanding concerns of scientists, doctors, public health officials, and other stakeholders regarding the dangerously low number of antibiotics in development to address current and future patient needs, particularly for treating the most urgent bacterial threats, such as Gram-negative pathogens.</p>\n<p>Click the play button to see the evolution of the antibiotic pipeline since 2014, or click on an individual year to see the status of the pipeline at a particular point in time. To see additional information about each drug, hover over any of the [rectangles].</p>\n'},function(e,t){e.exports="<p><strong>Notes:</strong> Clinical candidates included in this data visualization are consistent with Pew’s methodology for tracking antibiotics in clinical development. More information about the methods and the full underlying data can be found in the latest analysis of the pipeline. Pew’s updates are conducted semiannually, except for 2014, when they were published quarterly, and 2018, when a timeline adjustment resulted in just one update for the year.</p>\n"},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,i){"use strict";e.exports=function(e){for(var t=5381,i=e.length;i;)t=33*t^e.charCodeAt(--i);return t>>>0}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"init",value:function(e){var t=this;if(void 0===e||"object"!==(void 0===e?"undefined":n(e)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof e.encode||"function"!=typeof e.decode||!Array.isArray(e.views)||"object"!==n(e.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=e.encode,this.decodeHash=e.decode,this.viewPromises=e.views.map(function(e){return e.isReady}),this.PS=e.PS,Promise.all(this.viewPromises).then(function(){t.decodeHash()}),this.PS.setSubs(e.subscriptions.map(function(e){return[e,function(e,i){t.hashChange.call(t,e,i)}]}))}},{key:"hashChange",value:function(e,t){this.setStateObj(e,t),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(e,t){this.stateObj[e]=t}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),e}();t.default=s},function(e,t,i){},function(e,t,i){"use strict";i.r(t);var n=i(2),r=i(4),s=i.n(r),a=i(1),o=i(5),u=i.n(o),c=i(6),d=i.n(c),l=i(0),h=i.n(l),f=i(7),p=i.n(f);const m=30,v=1.5*m,g=2,y=[["Phase 1","P1"],["Phase 2","P2"],["Phase 3","P3"],["Application","NDA"],["Approved","&#10004"]],b=500;var w=!0;class _ extends d.a{prerender(){this.minUnitDimension=m,this.headerHeight=v,this.unitPadding=g,this.headers=y,this.phaseMembers=[0,1].map(()=>[0,...y].map(e=>({active:0===e?this.model.unnestedData.map(e=>e.id):[],discontinued:[]}))),this.heightNeeded=(this.model.maxActive+this.model.maxDiscontinued+1)*(this.minUnitDimension+this.unitPadding)+this.headerHeight+this.unitPadding+51+90+61+40;var e=super.prerender();if(this.prerendered&&!this.rerender)return e;function t(e){for(let t=0;t<5;t++){let t=document.createElement("div");t.classList.add(h.a.column);let i=e.name===h.a.activeContainer?this.model.maxActive:this.model.maxDiscontinued;for(let e=0;e<i;e++){let e=document.createElement("div");e.classList.add(h.a.drug,h.a.drugEmpty),t.appendChild(e)}e.appendChild(t)}}var i=document.createElement("div");i.classList.add(h.a.controlContainer);var n=document.createElement("button");n.classList.add(h.a.playButton),n.type="button",i.appendChild(n),this.model.years.forEach((e,t)=>{var n=document.createElement("button");n.classList.add(h.a.yearButton,`${0===t?h.a.yearButtonActive:"nope"}`),n.type="button",n.value=e,n.textContent=e,i.appendChild(n)}),e.appendChild(i);var r=document.createElement("div");r.classList.add(h.a.container),e.appendChild(r);var s=document.createElement("div");s.classList.add(h.a.activeContainer),s.name=h.a.activeContainer,r.appendChild(s);var a=document.createElement("div");a.classList.add(h.a.headerContainer),a.name=h.a.headerContainer,y.forEach(e=>{var t=document.createElement("div");t.classList.add(h.a.headerDiv),t.innerHTML=`<span class="${h.a.phaseFull}">${e[0].toUpperCase()}</span><span class="${h.a.phaseAbbr}">${e[1]}</span>`,a.appendChild(t)}),r.appendChild(a);var o=document.createElement("div");return o.classList.add(h.a.discontinuedContainer),o.name=h.a.discontinuedContainer,r.appendChild(o),t.call(this,s),t.call(this,o),e}populatePlaceholders(e,t){var i=document.querySelector("."+h.a.activeContainer),n=document.querySelector("."+h.a.discontinuedContainer);this.phaseMembers[0]=JSON.parse(JSON.stringify(this.phaseMembers[1])),console.log(this.phaseMembers),[i,n].forEach((i,n)=>{this.model.data[e].observations[t].forEach((r,s)=>{function a(e){return this.phaseMembers[1][s+1][0===n?"active":"discontinued"].indexOf(e)}var o=r.values.filter(i=>0===n?!i[this.model.years[e]][t].isDiscontinued:i[this.model.years[e]][t].isDiscontinued).sort((e,t)=>{var i=a.call(this,e.id),n=a.call(this,t.id);return this.phaseMembers[0][0].active.includes(e.id)?(console.log("a is entering",e.id),this.phaseMembers[0][0].active.includes(t.id)?e.id-t.id:1):this.phaseMembers[0][0].active.includes(t.id)?-1:n<0&&i>=0?-1:i<0&&n>=0?1:a.call(this,e.id)<a.call(this,t.id)?-1:a.call(this,e.id)>a.call(this,t.id)?1:(console.log("returning 0",e.id,t.id),e.id-t.id)}),u=i.querySelectorAll("."+h.a.column)[s];this.phaseMembers[1][s+1][0===n?"active":"discontinued"].length=0,o.forEach((e,t)=>{!function(e,t,i){var n;console.log(t),e.id=t.id,e.classList.remove(h.a.drugEmpty),e.classList.add(`${t.gramNegative?h.a.gramNegative:"nope"}`,`${t.novel?h.a.novel:"nope"}`,`${t.urgent?h.a.urgent:"nope"}`),1===i&&e.classList.add(h.a.isDiscontinued),(n=document.createElement("div")).classList.add(h.a.detailDrawer),n.innerHTML=`<strong>${t.name}</strong><br />\n                                    ${t.company} ${t.id}`,e.appendChild(n)}(u.querySelectorAll("."+h.a.drug)[t],e,n),this.phaseMembers[1][s+1][0===n?"active":"discontinued"].push(e.id)}),this.phaseMembers[1][0].active=this.model.unnestedData.filter(e=>0===e[+this.currentYear][this.currentObservation].column).map(e=>e.id),console.log(this.phaseMembers)})})}setYearState(e){var t=a.stateModule.getState("year");t&&this.recordStatuses(t[0],t[2]),a.stateModule.setState("year",e),this.currentYear=e[0],this.currentObservation=e[2]}init(){p.a.setSubs([["resize",this.checkHeight.bind(this)],["year",this.update.bind(this)]]),this.setYearState([this.model.years[0],null,1]),this.nonEmptyDrugs=document.querySelectorAll("."+h.a.drug+":not(."+h.a.drugEmpty+")"),this.checkHeight(),this.initializeYearButtons(),this.initializePlayButton()}initializePlayButton(){document.querySelector("."+h.a.playButton).addEventListener("click",this.playYears.bind(this))}playYears(){var e=a.stateModule.getState("year")[0];function t(){++e<=this.model.years[this.model.years.length-1]&&new Promise(t=>{new Promise(t=>{this.setYearState([e,t,0])}).then(()=>{this.setYearState([e,t,1])})}).then(()=>{t.call(this)})}0===(document.querySelector("."+h.a.yearButtonActive).classList.contains(h.a.observation0)?0:1)?new Promise(t=>{this.setYearState([e,t,1])}).then(()=>{t.call(this)}):t.call(this)}checkHeight(){window.innerHeight<this.heightNeeded?document.body.classList.add(h.a.squat):document.body.classList.remove(h.a.squat),document.querySelector("#section-comparison .js-inner-content").offsetHeight>window.innerHeight-100?document.body.classList.add(h.a.superSquat):document.body.classList.remove(h.a.superSquat),function(){var e=document.documentElement,t=Math.floor((this.heightNeeded-this.unitPadding-this.headerHeight)*(this.maxActive/(this.maxActive+this.maxDiscontinued)));e.style.setProperty("--unit-dimension",this.minUnitDimension+"px"),e.style.setProperty("--header-height",this.headerHeight+"px"),e.style.setProperty("--max-container-height",this.heightNeeded+"px"),e.style.setProperty("--active-max-height",t+"px"),e.style.setProperty("--discontinued-max-height",Math.floor(this.heightNeeded-t-this.headerHeight)+"px")}.call(this)}initializeYearButtons(){document.querySelectorAll("."+h.a.yearButton).forEach(e=>{var t=this;e.addEventListener("click",function(){var e=a.stateModule.getState("year")[0];if(this.blur(),e!==this.value){let i=this.value>e?[0,1]:[1,0];new Promise(e=>{t.setYearState([this.value,e,i[0]])}).then(()=>{t.setYearState([this.value,null,i[1]])})}else{let e=this.classList.contains(h.a.observation0)?1:0;t.setYearState([this.value,null,e])}})})}update(e,t){document.querySelector("."+h.a.yearButtonActive).classList.remove(h.a.yearButtonActive,h.a.observation,h.a.observation0,h.a.observation1);var i=document.querySelector('button[value="'+t[0]+'"]');i.classList.add(h.a.yearButtonActive),0===t[2]?i.classList.remove(h.a.observation1):i.classList.remove(h.a.observation0),i.classList.add(h.a.observation,h.a["observation"+t[2]]),this.FLIP(parseInt(t[0]),t[1],t[2]),this.updateText()}updateText(){var e=this.phaseMembers[1][this.phaseMembers[1].length-1].active.length,t=this.phaseMembers[1].reduce((e,t)=>e+t.discontinued.length,0),i=document.querySelector("#total-approved"),n=document.querySelector("#total-discontinued");i.innerHTML!=e&&document.querySelector("#total-approved").fadeInContent(e),n.innerHTML!=t&&document.querySelector("#total-discontinued").fadeInContent(t)}FLIP(e,t,i=1){this.recordFirstPositions(),this.clearAttributesAndDetails(),this.populatePlaceholders(this.model.years.indexOf(e),i),this.nonEmptyDrugs=document.querySelectorAll("."+h.a.drug+":not(."+h.a.drugEmpty+")"),this.invertPositions(),this.playAnimation(t)}recordStatuses(e,t){this.previousStatuses=this.model.data[this.model.years.indexOf(+e)].observations[t].reduce((i,n)=>(n.values.forEach(n=>{i[n.id]={column:n[e][t].column,isDiscontinued:n[e][t].isDiscontinued}}),i),{})}recordFirstPositions(){this.firstPositions=Array.from(document.querySelectorAll("."+h.a.drug+":not("+h.a.drugEmpty+")")).reduce((e,t)=>(e[t.id]=t.getBoundingClientRect(),e),{})}clearAttributesAndDetails(){this.nonEmptyDrugs.forEach(e=>{var t=e.querySelector("."+h.a.detailDrawer);e.className=`${h.a.drug} ${h.a.drugEmpty}`,e.id="",e.removeChild(t)})}invertPositions(){this.nonEmptyDrugs.forEach(e=>{e.style.transitionDuration="0s";var t=e.getBoundingClientRect(),i=this.firstPositions[e.id]?this.firstPositions[e.id].top-t.top:-1e3,n=this.firstPositions[e.id]?this.firstPositions[e.id].left-t.left:-1e3;e.style.transform=`translate(${n}px, ${i}px)`,0===i&&0===n||e.classList.add(h.a.isTranslated),this.firstPositions[e.id]||e.classList.add(h.a.entering)})}playAnimation(e){var t=y.length,i=a.stateModule.getState("year"),n=i[0],r=i[2];function s(e){e.style.transitionDuration=b/1e3+"s",e.style.transform="translate(0px,0px)",setTimeout(function(){e.classList.remove(h.a.isTranslated)},b)}if(console.log(n,r),w)this.nonEmptyDrugs.forEach((e,t)=>{setTimeout(function(){s(e)},10*t)}),w=!1;else{Array.from(this.nonEmptyDrugs).filter(e=>!Object.keys(this.previousStatuses).includes(e.id)).forEach(e=>{this.previousStatuses[e.id]={column:0,isDiscontinued:!1}}),new Promise(e=>{(function e(i){console.log("  column "+t);var a=Object.keys(this.previousStatuses).filter(e=>this.previousStatuses[e].column===t),o=Array.from(this.nonEmptyDrugs).filter(e=>a.includes(e.id)),u=o.filter(e=>{var t=this.model.unnestedData.find(t=>t.id===e.id)[n][r],i=e.style.transform.match(/translate\((.*?)\)/)[1].replace(" ","").split(",");return e.translateXY=i,this.previousStatuses[e.id].column===t.column&&this.previousStatuses[e.id].isDiscontinued===t.isDiscontinued&&("0px"!==i[0]||"0px"!==i[1])}),c=o.filter(e=>this.previousStatuses[e.id].isDiscontinued!==this.model.unnestedData.find(t=>t.id===e.id)[n][r].isDiscontinued),d=[o.filter(e=>this.previousStatuses[e.id].column<this.model.unnestedData.find(t=>t.id===e.id)[n][r].column),o.filter(e=>this.previousStatuses[e.id].column>this.model.unnestedData.find(t=>t.id===e.id)[n][r].column),c,u,o.filter(e=>0===this.previousStatuses[e.id].column)],l=d.reduce(function(e,t){return e+t.length},0);console.log(l),function n(r){console.log("    subset "+r),new Promise(e=>{0===d[r].length?(console.log("      skipping ^"),e(!0)):d[r].forEach((t,i,n)=>{s(t),i===n.length-1&&setTimeout(()=>{e(!0)},b)})}).then(()=>{++r<d.length?n.call(this,r):t>0?(t--,e.call(this,i)):setTimeout(function(){i(!0)},0===l?b:0)})}.call(this,0)}).call(this,e)}).then(function(){var t;t=0,e&&setTimeout(function(){e(!0)},t)})}}}var S=i(8),E=i.n(S),C=i(9),k=i.n(C),x=i(10),O=i.n(x),P=i(11),D=i.n(P);Object(n.publishWindowResize)(a.stateModule);const A={},T=[],L=2014;function R(){return new Promise((e,t)=>{var i=this.el;s.a.parse(""+u.a,{download:!0,dynamicTyping:!0,header:!0,fastMode:!1,skipEmptyLines:!0,beforeFirstChunk(e){var t=e.hashCode();window.IS_PRERENDERING?i.setAttribute("data-data-hash",t):t.toString()!==i.getAttribute("data-data-hash")&&(i.setAttribute("data-data-mismatch",!0),console.log("data mismatch"),A.isMismatched=!0)},complete:t=>{T.length=0,A.years=[];for(var i=!0,n=0;i;)t.data[0].hasOwnProperty(L+n)?A.years.push(L+n):i=!1,n++;A.unnestedData=t.data.map(e=>(e.id="drug-"+e.id,A.years.forEach(t=>{e[t]=[0,1].map(i=>({column:parseInt(e[t].split("-")[i]),isDiscontinued:-1!==e[t].split("-")[i].toString().indexOf("d")}))}),e)),A.data=A.years.map(e=>({year:e,observations:[0,1].map(t=>[1,2,3,4,5].map(i=>({phase:i,values:A.unnestedData.filter(n=>n[e][t].column===i)})))})),console.log(A);const r=[],s=[];A.data.forEach(e=>{e.observations.forEach((t,i)=>{t.forEach(t=>{r.push(t.values.filter(t=>!0!==t[e.year][i].isDiscontinued).length),s.push(t.values.filter(t=>!0===t[e.year][i].isDiscontinued).length)})})}),A.maxActive=Math.max(...r),A.maxDiscontinued=Math.max(...s),console.log(A),T.push(this.createComponent(A,_,"div#viz-view",{renderToSelector:"#abx-visualization",rerenderOnDataMismatch:!0,parent:this})),e(!0)},error:function(e){t(e)}})})}i(15);const M=new class extends E.a{prerender(){this.el.insertAdjacentHTML("beforeend",k.a),document.querySelector("#intro").insertAdjacentHTML("afterbegin",O.a),document.querySelector("#abx-notes").insertAdjacentHTML("afterbegin",D.a),R.call(this).then(()=>{T.forEach(e=>{console.log(e),e.container.appendChild(e.el)})})}init(){super.init(),R.call(this).then(()=>{T.forEach(e=>{e.init(this)})})}}("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&M.prerender(),M.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3Zpei12aWV3L3N0eWxlcy5zY3NzPzI4YzQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0YXRlZnVsLWRlYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VVElMUy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVic3ViLWpzL3NyYy9wdWJzdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcGFwYXJzZS9wYXBhcGFyc2UubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9kYXRhL2FieC1kYXRhLmNzdiIsIndlYnBhY2s6Ly8vLi9zdWJtb2R1bGVzL1VJLWpzL2VsZW1lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YnN1Yi1zZXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9QQ1RBcHAtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpYWxzL3NlY3Rpb25zLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpYWxzL2ludHJvLm1kIiwid2VicGFjazovLy8uL3NyYy9wYXJ0aWFscy9ub3Rlcy5tZCIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmctaGFzaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zdWJtb2R1bGVzL1JPVVRSL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy92aXotdmlldy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWJ4LmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNvbnRhaW5lciIsInN1cGVyU3F1YXQiLCJhY3RpdmVDb250YWluZXIiLCJoZWFkZXJDb250YWluZXIiLCJjb2x1bW4iLCJkaXNjb250aW51ZWRDb250YWluZXIiLCJzcXVhdCIsImRydWciLCJkcnVnRW1wdHkiLCJpc1RyYW5zbGF0ZWQiLCJub3ZlbCIsInVyZ2VudCIsImdyYW1OZWdhdGl2ZSIsImRldGFpbERyYXdlciIsImhlYWRlckRpdiIsInBoYXNlRnVsbCIsInBoYXNlQWJiciIsImNvbnRyb2xDb250YWluZXIiLCJwbGF5QnV0dG9uIiwieWVhckJ1dHRvbiIsImlzUGF1c2VkIiwieWVhckJ1dHRvbkFjdGl2ZSIsIm9ic2VydmF0aW9uIiwib2JzZXJ2YXRpb24wIiwib2JzZXJ2YXRpb24xIiwiUHViU3ViIiwic3RhdGUiLCJfbG9nU3RhdGUiLCJjb25zb2xlIiwibG9nIiwiQXJyYXkiLCJjb21wYXJlIiwidGVzdEFyciIsInRoaXMiLCJsZW5ndGgiLCJzdGF0ZU1vZHVsZSIsImxvZ1N0YXRlIiwiZ2V0U3RhdGUiLCJ1bmRlZmluZWQiLCJnZXRQcmV2aW91c1N0YXRlIiwic2V0U3RhdGUiLCJwdWJsaXNoIiwiaXNBcnJheSIsInVuc2hpZnQiLCJHVE1QdXNoIiwiZXZlbnRMYWJlbCIsImRhdGFMYXllciIsInB1c2giLCJldmVudCIsImV2ZW50RGF0YSIsInB1Ymxpc2hXaW5kb3dSZXNpemUiLCJTIiwicmVzaXplVGltZW91dCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRUaW1lb3V0IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIkZhZGVJblRleHQiLCJIVE1MRWxlbWVudCIsImZhZGVPdXRDb250ZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiZmFkZUluQ29udGVudCIsImNvbnRlbnQiLCJfdGhpcyIsImR1cmF0aW9uUyIsInN0eWxlIiwidHJhbnNpdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiZHVyYXRpb25TdHIiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImR1cmF0aW9uIiwicGFyc2VGbG9hdCIsImlubmVySFRNTCIsInJlbW92ZSIsIlN0cmluZ0hlbHBlcnMiLCJTdHJpbmciLCJjbGVhblN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsInJlbW92ZVVuZGVyc2NvcmVzIiwidW5kb0NhbWVsQ2FzZSIsInRydW5jIiwidXNlV29yZEJvdW5kYXJ5Iiwic3ViU3RyaW5nIiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJoYXNoQ29kZSIsImhhc2giLCJjaGFyQ29kZUF0IiwiRE9NSGVscGVycyIsImluZGV4T2YiLCJjbGFzc1N0cmluZ3MiLCJtYXRjaCIsImlkU3RyaW5nIiwiZWxTdHJpbmciLCJlbCIsImNyZWF0ZUVsZW1lbnQiLCJmb3JFYWNoIiwia2xhc3MiLCJzZXRBdHRyaWJ1dGUiLCJxIiwicXVlcnlTZWxlY3RvciIsInFhIiwicXVlcnlTZWxlY3RvckFsbCIsInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwibWVzc2FnZXMiLCJsYXN0VWlkIiwiaGFzS2V5cyIsIm9iaiIsImNhbGxTdWJzY3JpYmVyV2l0aERlbGF5ZWRFeGNlcHRpb25zIiwic3Vic2NyaWJlciIsIm1lc3NhZ2UiLCJkYXRhIiwiZXgiLCJ0aHJvd0V4Y2VwdGlvbiIsImNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMiLCJkZWxpdmVyTWVzc2FnZSIsIm9yaWdpbmFsTWVzc2FnZSIsIm1hdGNoZWRNZXNzYWdlIiwiaW1tZWRpYXRlRXhjZXB0aW9ucyIsInN1YnNjcmliZXJzIiwiY2FsbFN1YnNjcmliZXIiLCJzeW5jIiwiZGVsaXZlciIsInRvcGljIiwicG9zaXRpb24iLCJjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uIiwidG9TdHJpbmciLCJoYXNTdWJzY3JpYmVycyIsImZvdW5kIiwiQm9vbGVhbiIsIm1lc3NhZ2VIYXNTdWJzY3JpYmVycyIsInB1Ymxpc2hTeW5jIiwic3Vic2NyaWJlIiwiZnVuYyIsInRva2VuIiwic3Vic2NyaWJlT25jZSIsInVuc3Vic2NyaWJlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjbGVhckFsbFN1YnNjcmlwdGlvbnMiLCJjbGVhclN1YnNjcmlwdGlvbnMiLCJpc1RvcGljIiwiZGVzY2VuZGFudFRvcGljRXhpc3RzIiwiaXNUb2tlbiIsImlzRnVuY3Rpb24iLCJyZXN1bHQiLCJhbWQiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJlIiwiZiIsInNlbGYiLCJwb3N0TWVzc2FnZSIsInRlc3QiLCJsb2NhdGlvbiIsInNlYXJjaCIsImEiLCJoIiwidSIsImsiLCJwYXJzZSIsImR5bmFtaWNUeXBpbmciLCJ6IiwiZHluYW1pY1R5cGluZ0Z1bmN0aW9uIiwidHJhbnNmb3JtIiwid29ya2VyIiwiV09SS0VSU19TVVBQT1JURUQiLCJTQ1JJUFRfUEFUSCIsIkVycm9yIiwiV29ya2VyIiwib25tZXNzYWdlIiwiaWQiLCJ1c2VyU3RlcCIsInN0ZXAiLCJ1c2VyQ2h1bmsiLCJjaHVuayIsInVzZXJDb21wbGV0ZSIsImNvbXBsZXRlIiwidXNlckVycm9yIiwiZXJyb3IiLCJpbnB1dCIsImNvbmZpZyIsIndvcmtlcklkIiwiTk9ERV9TVFJFQU1fSU5QVVQiLCJkb3dubG9hZCIsIl8iLCJyZWFkYWJsZSIsInJlYWQiLCJvbiIsImciLCJGaWxlIiwic3RyZWFtIiwidW5wYXJzZSIsInkiLCJkZWxpbWl0ZXIiLCJCQURfREVMSU1JVEVSUyIsImZpbHRlciIsInF1b3RlcyIsInNraXBFbXB0eUxpbmVzIiwibmV3bGluZSIsInF1b3RlQ2hhciIsImhlYWRlciIsIlJlZ0V4cCIsIk0iLCJKU09OIiwiZmllbGRzIiwibWV0YSIsInYiLCJrZXlzIiwiam9pbiIsInRyaW0iLCJjb25zdHJ1Y3RvciIsIkRhdGUiLCJzdHJpbmdpZnkiLCJzbGljZSIsImNoYXJBdCIsIlJFQ09SRF9TRVAiLCJmcm9tQ2hhckNvZGUiLCJVTklUX1NFUCIsIkJZVEVfT1JERVJfTUFSSyIsIkxvY2FsQ2h1bmtTaXplIiwiUmVtb3RlQ2h1bmtTaXplIiwiRGVmYXVsdERlbGltaXRlciIsIlBhcnNlciIsIlBhcnNlckhhbmRsZSIsIk5ldHdvcmtTdHJlYW1lciIsIkZpbGVTdHJlYW1lciIsIlN0cmluZ1N0cmVhbWVyIiwiUmVhZGFibGVTdHJlYW1TdHJlYW1lciIsImpRdWVyeSIsImZuIiwiZWFjaCIsInByb3AiLCJ0b1VwcGVyQ2FzZSIsImF0dHIiLCJGaWxlUmVhZGVyIiwiZmlsZXMiLCJmaWxlIiwiaW5wdXRFbGVtIiwiaW5zdGFuY2VDb25maWciLCJleHRlbmQiLCJiZWZvcmUiLCJhY3Rpb24iLCJyZWFzb24iLCJzcGxpY2UiLCJfaGFuZGxlIiwiX2ZpbmlzaGVkIiwiX2NvbXBsZXRlZCIsIl9pbnB1dCIsIl9iYXNlSW5kZXgiLCJfcGFydGlhbExpbmUiLCJfcm93Q291bnQiLCJfc3RhcnQiLCJfbmV4dENodW5rIiwiaXNGaXJzdENodW5rIiwiX2NvbXBsZXRlUmVzdWx0cyIsImVycm9ycyIsIkUiLCJjaHVua1NpemUiLCJwYXJzZUludCIsInN0cmVhbWVyIiwiX2NvbmZpZyIsInBhcnNlQ2h1bmsiLCJiZWZvcmVGaXJzdENodW5rIiwicGF1c2VkIiwiYWJvcnRlZCIsImN1cnNvciIsInN1YnN0cmluZyIsInByZXZpZXciLCJyZXN1bHRzIiwiV09SS0VSX0lEIiwiZmluaXNoZWQiLCJjb25jYXQiLCJfc2VuZEVycm9yIiwiX3JlYWRDaHVuayIsIl9jaHVua0xvYWRlZCIsIlhNTEh0dHBSZXF1ZXN0Iiwid2l0aENyZWRlbnRpYWxzIiwib25sb2FkIiwidyIsIm9uZXJyb3IiLCJfY2h1bmtFcnJvciIsIm9wZW4iLCJkb3dubG9hZFJlcXVlc3RIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJzdGF0dXMiLCJyZWFkeVN0YXRlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwid2Via2l0U2xpY2UiLCJtb3pTbGljZSIsIkZpbGVSZWFkZXJTeW5jIiwiTWF0aCIsIm1pbiIsInNpemUiLCJyZWFkQXNUZXh0IiwiZW5jb2RpbmciLCJ0YXJnZXQiLCJwYXVzZSIsInJlc3VtZSIsIl9zdHJlYW1EYXRhIiwiX3N0cmVhbUVuZCIsIl9zdHJlYW1FcnJvciIsIl9jaGVja0lzRmluaXNoZWQiLCJzaGlmdCIsIl9zdHJlYW1DbGVhblVwIiwicmVtb3ZlTGlzdGVuZXIiLCJhYm9ydCIsInRyaW1IZWFkZXJzIiwidHlwZSIsImNvZGUiLCJyb3ciLCJzcGxpdCIsImNvbW1lbnRzIiwiYWJzIiwic3VjY2Vzc2Z1bCIsImJlc3REZWxpbWl0ZXIiLCJnZXRDaGFySW5kZXgiLCJPIiwieCIsIlQiLCJJIiwiQSIsIkQiLCJmYXN0TW9kZSIsIkwiLCJlc2NhcGVDaGFyIiwiUCIsIkYiLCJDIiwiUiIsImluZGV4IiwiYiIsImxpbmVicmVhayIsInRydW5jYXRlZCIsInRlcm1pbmF0ZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3JjIiwiYm9keSIsIl9VdGlscyIsIkVsZW1lbnQiLCJzZWxlY3RvciIsIm9wdGlvbnMiLCJfY2xhc3NDYWxsQ2hlY2siLCJtb2RlbCIsInBhcmVudCIsInJlbmRlclRvU2VsZWN0b3IiLCIkZCIsImNoaWxkcmVuIiwicmVyZW5kZXIiLCJyZXJlbmRlck9uRGF0YU1pc21hdGNoIiwiaXNNaXNtYXRjaGVkIiwicHJlcmVuZGVyIiwiaXNSZWFkeSIsInJlamVjdCIsImV4aXN0aW5nIiwicHJlcmVuZGVyZWQiLCJzdWJzY3JpcHRpb25zIiwiY3JlYXRlVG9rZW4iLCJmblJlZiIsImZ1bmN0aW9uSGFzaCIsImxvZ1N1YnMiLCJzZXRTdWJzIiwic3Vic0FycmF5IiwicGFpciIsInRva2VuT2JqIiwiY2FuY2VsU3ViIiwiX1JvdXRlciIsIlBDVEFwcCIsIm9wdGlvbiIsInJvdXRlck9wdGlvbnMiLCJuZWVkc1JvdXRlciIsInJvdXRlciIsIlJvdXRlciIsImluaXQiLCJkaXNhYmxlSG92ZXJPblRvdWNoIiwiaGFzSG92ZXJDbGFzcyIsImxhc3RUb3VjaFRpbWUiLCJlbmFibGVIb3ZlciIsImNvbXBvbmVudCIsIl9vcHRpb25zIiwiX3R5cGVvZiIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwic3RyIiwiZW5jb2RlIiwiZGVjb2RlIiwidmlld3MiLCJQUyIsInN0YXRlT2JqIiwiaGFzaFN0YXRlIiwiZGVjb2RlSGFzaCIsInZpZXdQcm9taXNlcyIsIm1hcCIsImFsbCIsInRoZW4iLCJtc2ciLCJoYXNoQ2hhbmdlIiwic2V0U3RhdGVPYmoiLCJyZXBsYWNlU3RhdGUiLCJoaXN0b3J5IiwiaGFzaFN0cmluZyIsIm1pblVuaXREaW1lbnNpb24iLCJoZWFkZXJIZWlnaHQiLCJ1bml0UGFkZGluZyIsImhlYWRlcnMiLCJpc0ZpcnN0TG9hZCIsIlZpelZpZXciLCJwaGFzZU1lbWJlcnMiLCJhY3RpdmUiLCJ1bm5lc3RlZERhdGEiLCJkaXNjb250aW51ZWQiLCJoZWlnaHROZWVkZWQiLCJtYXhBY3RpdmUiLCJtYXhEaXNjb250aW51ZWQiLCJ2aWV3Iiwic3VwZXIiLCJyZW5kZXJDb2x1bW5zIiwiY29udCIsInBsYWNlaG9sZGVyTnVtYmVyIiwiaiIsInBsYWNlaG9sZGVyIiwiYXBwZW5kQ2hpbGQiLCJ5ZWFycyIsInllYXIiLCJ0ZXh0Q29udGVudCIsInBoYXNlIiwicG9wdWxhdGVQbGFjZWhvbGRlcnMiLCJ5ZWFySW5kZXgiLCJvYnNlcnZhdGlvbnMiLCJnZXRQaGFzZU1lbWJlcnNJbmRleCIsImZpbHRlcmVkIiwidmFsdWVzIiwiaXNEaXNjb250aW51ZWQiLCJzb3J0IiwiZXhpc3RpbmdJbmRleEEiLCJleGlzdGluZ0luZGV4QiIsImluY2x1ZGVzIiwiY29udGFpbmVySW5kZXgiLCJkcmF3ZXIiLCJjb21wYW55IiwiYWRkSWRzQW5kQ2xhc3NlcyIsImN1cnJlbnRZZWFyIiwiY3VycmVudE9ic2VydmF0aW9uIiwic2V0WWVhclN0YXRlIiwic3RhdGVCZWZvcmVDaGFuZ2UiLCJyZWNvcmRTdGF0dXNlcyIsImNoZWNrSGVpZ2h0IiwidXBkYXRlIiwibm9uRW1wdHlEcnVncyIsImluaXRpYWxpemVZZWFyQnV0dG9ucyIsImluaXRpYWxpemVQbGF5QnV0dG9uIiwicGxheVllYXJzIiwibmV4dFByb21pc2UiLCJ3cmFwcGVyUmVzb2x2ZSIsImNvbnRhaW5zIiwiaW5uZXJIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJhY3RpdmVNYXgiLCJmbG9vciIsInNldFByb3BlcnR5IiwiYnV0dG9uIiwiYmx1ciIsImJ0biIsIkZMSVAiLCJ1cGRhdGVUZXh0IiwidG90YWxBY3RpdmUiLCJ0b3RhbERpc2NvbnRpbnVlZCIsInJlZHVjZSIsImFjYyIsImN1ciIsImFwcHJvdmVkU3BhbiIsImRpc2NvbnRpbnVlZFNwYW4iLCJyZWNvcmRGaXJzdFBvc2l0aW9ucyIsImNsZWFyQXR0cmlidXRlc0FuZERldGFpbHMiLCJpbnZlcnRQb3NpdGlvbnMiLCJwbGF5QW5pbWF0aW9uIiwicHJldmlvdXNTdGF0dXNlcyIsImZpcnN0UG9zaXRpb25zIiwiZnJvbSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRldGFpbHMiLCJjbGFzc05hbWUiLCJyZW1vdmVDaGlsZCIsInRyYW5zaXRpb25EdXJhdGlvbiIsImxhc3RQb3NpdGlvbiIsImRlbHRhWSIsInRvcCIsImRlbHRhWCIsImxlZnQiLCJlbnRlcmluZyIsImN1cnJlbnRTdGF0ZSIsIkRPTURydWciLCJlbnRlcmluZ0RydWciLCJhbmltYXRlU2luZ2xlQ29sdW1uIiwibWF0Y2hpbmdEcnVnSURzIiwibWF0Y2hpbmdET01EcnVncyIsImVsZW1lbnRzV2lsbFN0YXlCdXRNb3ZlIiwiY3VycmVudERhdHVtIiwiZmluZCIsInRyYW5zbGF0ZVhZIiwiZWxlbWVudHNXaWxsQ2hhbmdlU3RhdHVzIiwic3Vic2V0cyIsImxlbmd0aE9mQWxsU3Vic2V0cyIsImhhbmRsZVN1YnNldCIsImFycmF5Iiwic3RhcnRZZWFyIiwiZ2V0UnVudGltZURhdGEiLCJhcHBDb250YWluZXIiLCJQYXBhIiwiZGF0YUhhc2giLCJJU19QUkVSRU5ERVJJTkciLCJnZXRBdHRyaWJ1dGUiLCJyZXNwb25zZSIsImxvb3BXaGlsZSIsImFjdGl2ZUxlbmd0aHMiLCJkaXNjb250aW51ZWRMZW5ndGhzIiwib2JzIiwibWF4IiwiY3JlYXRlQ29tcG9uZW50IiwiQXBwIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwic2VjdGlvbnMiLCJpbnRybyIsIm5vdGVzIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFp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LEtBQUttTyxPQUFPRixHQUNwQ3JmLFFBQVFDLElBQUl1VSxHQUlaNEMsRUFBTWpXLEtBQ0hkLEtBQUttZixnQkFBZ0JoTCxFQUFPZ0UsRUFBUyxlQUFnQixDQUFDOUQsaUJBQWtCLHFCQUFzQkksd0JBQXdCLEVBQU1MLE9BQVFwVSxRQUl2SXVDLEdBQVEsSUFFWnFILE1BQU8sU0FBU0EsR0FDWmlMLEVBQU9qTCxjQ2xJdkIsTUFDTXdWLEVBQU0sSUR1SUcsY0FBcUJ6SixJQUNoQ2hCLFlBR0kzVSxLQUFLb0UsR0FBR2liLG1CQUFtQixZQUFhQyxLQUN4Qy9kLFNBQVNtRCxjQUFjLFVBQVUyYSxtQkFBbUIsYUFBY0UsS0FDbEVoZSxTQUFTbUQsY0FBYyxjQUFjMmEsbUJBQW1CLGFBQWNHLEtBRXRFakIsRUFBZXJpQixLQUFLOEQsTUFBTXVYLEtBQUssS0FFM0JSLEVBQU16UyxRQUFRcVUsSUFDVmhaLFFBQVFDLElBQUkrWSxHQUNMQSxFQUFLNWEsVUFBVW1iLFlBQVlQLEVBQUt2VSxRQU1uRDZSLE9BQ0kyQyxNQUFNM0MsT0FFTnNJLEVBQWVyaUIsS0FBSzhELE1BQU11WCxLQUFLLEtBQzNCUixFQUFNelMsUUFBUXFVLElBQ1hBLEVBQUsxQyxLQUFLalcsWUMvSlAsV0FDZ0IsQ0FDakM4VixhQUFhLElBRWlDMVUsT0FBT3VkLGlCQUNyRFMsRUFBSXpLLFlBRUx5SyxFQUFJbkoiLCJmaWxlIjoianMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTYpO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImNvbnRhaW5lclwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1jb250YWluZXJcIixcInN1cGVyU3F1YXRcIjpcInNyYy12aWV3cy12aXotdmlldy0tc3VwZXJTcXVhdFwiLFwiYWN0aXZlQ29udGFpbmVyXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWFjdGl2ZUNvbnRhaW5lclwiLFwiaGVhZGVyQ29udGFpbmVyXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWhlYWRlckNvbnRhaW5lclwiLFwiY29sdW1uXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWNvbHVtblwiLFwiZGlzY29udGludWVkQ29udGFpbmVyXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWRpc2NvbnRpbnVlZENvbnRhaW5lclwiLFwic3F1YXRcIjpcInNyYy12aWV3cy12aXotdmlldy0tc3F1YXRcIixcImRydWdcIjpcInNyYy12aWV3cy12aXotdmlldy0tZHJ1Z1wiLFwiZHJ1Z0VtcHR5XCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWRydWdFbXB0eVwiLFwiaXNUcmFuc2xhdGVkXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWlzVHJhbnNsYXRlZFwiLFwibm92ZWxcIjpcInNyYy12aWV3cy12aXotdmlldy0tbm92ZWxcIixcInVyZ2VudFwiOlwic3JjLXZpZXdzLXZpei12aWV3LS11cmdlbnRcIixcImdyYW1OZWdhdGl2ZVwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1ncmFtTmVnYXRpdmVcIixcImRldGFpbERyYXdlclwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1kZXRhaWxEcmF3ZXJcIixcImhlYWRlckRpdlwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1oZWFkZXJEaXZcIixcInBoYXNlRnVsbFwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1waGFzZUZ1bGxcIixcInBoYXNlQWJiclwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1waGFzZUFiYnJcIixcImNvbnRyb2xDb250YWluZXJcIjpcInNyYy12aWV3cy12aXotdmlldy0tY29udHJvbENvbnRhaW5lclwiLFwicGxheUJ1dHRvblwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1wbGF5QnV0dG9uXCIsXCJ5ZWFyQnV0dG9uXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLXllYXJCdXR0b25cIixcImlzUGF1c2VkXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWlzUGF1c2VkXCIsXCJ5ZWFyQnV0dG9uQWN0aXZlXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLXllYXJCdXR0b25BY3RpdmVcIixcIm9ic2VydmF0aW9uXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLW9ic2VydmF0aW9uXCIsXCJvYnNlcnZhdGlvbjBcIjpcInNyYy12aWV3cy12aXotdmlldy0tb2JzZXJ2YXRpb24wXCIsXCJvYnNlcnZhdGlvbjFcIjpcInNyYy12aWV3cy12aXotdmlldy0tb2JzZXJ2YXRpb24xXCJ9OyIsImNvbnN0IFB1YlN1YiA9IHJlcXVpcmUoJ3B1YnN1Yi1qcycpO1xuY29uc3Qgc3RhdGUgPSB7fTtcblxuLy9hcnJheS5jb21wYXJlKG90aGVyQXJyYXkpIC8vSFQgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjIyOTE5Ny9ob3ctdG8ta25vdy1pZi10d28tYXJyYXlzLWhhdmUtdGhlLXNhbWUtdmFsdWVzXG5BcnJheS5wcm90b3R5cGUuY29tcGFyZSA9IEFycmF5LnByb3RvdHlwZS5jb21wYXJlIHx8IGZ1bmN0aW9uKHRlc3RBcnIpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggIT0gdGVzdEFyci5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDAgJiYgdGVzdEFyci5sZW5ndGggPT09IDApIHJldHVybiB0cnVlO1xuICAgIGNvbnNvbGUubG9nKFwiaW4gY29tcGFyZVwiKTtcbiAgICBjb25zb2xlLmxvZyh0aGlzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRlc3RBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXNbaV0gIT09IHRlc3RBcnJbaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9sb2dTdGF0ZSgpe1xuICAgIGNvbnNvbGUubG9nKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gX2dldFN0YXRlKHByb3BlcnR5KXtcbiAgICByZXR1cm4gKCBzdGF0ZVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCApID8gc3RhdGVbcHJvcGVydHldWzBdIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJldmlvdXNTdGF0ZShwcm9wZXJ0eSl7XG4gICAgcmV0dXJuICggc3RhdGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQgJiYgc3RhdGVbcHJvcGVydHldWzFdICE9PSB1bmRlZmluZWQgKSA/IHN0YXRlW3Byb3BlcnR5XVsxXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3NldFN0YXRlKGtleSx2YWx1ZSkgeyBcblxuICAgIGlmICggc3RhdGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7IC8vIGllIGZpcnN0IHRpbWUgc3RhdGUgcHJvcGVydHkgaXMgYmVpbmcgZGVmaW5lZFxuICAgICAgICBzdGF0ZVtrZXldID0gW3ZhbHVlXTtcbiAgICAgICAgUHViU3ViLnB1Ymxpc2goa2V5LCB2YWx1ZSk7XG4gICAgICAgIF9sb2dTdGF0ZSgpO1xuICAgIH0gZWxzZSB7IC8vIG5vdCB0aGUgZmlyc3QgdGltZSB0aGUgcHJvcGVydHkgaXMgYmVpbmcgZGVmaW5lZFxuICAgIC8vSWYgaXQncyBhIHN0cmluZyBvciBhcnJheSBhbmQgdmFsdWVzIGFyZSB0aGUgc2FtZSwgc3RhdGVDaGFuZ2VkPUZhbHNlK1xuICAgICAgICB2YXIgc3RhdGVDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgc3RhdGVDaGFuZ2VkID0gKHN0YXRlW2tleV1bMF0gIT09IHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiBBcnJheS5pc0FycmF5KHN0YXRlW2tleV1bMF0pKSB7XG4gICAgICAgICAgICBzdGF0ZUNoYW5nZWQgPSAhdmFsdWUuY29tcGFyZShzdGF0ZVtrZXldWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlQ2hhbmdlZCA9IHRydWU7IC8vYXNzdW1lIGl0J3MgY2hhbmdlZCBpZiB3ZSBjYW4ndCB2ZXJpZnlcbiAgICAgICAgfSAgICAgICAgICAgICAgXG4gICAgICAgIC8vT25seSBwdWJsaXNoIGlmIHdlJ3ZlIGNoYW5nZWQgc3RhdGVcbiAgICAgICAgaWYgKCBzdGF0ZUNoYW5nZWQgKSB7IFxuICAgICAgICAgICAgc3RhdGVba2V5XS51bnNoaWZ0KHZhbHVlKTtcbiAgICAgICAgICAgIFB1YlN1Yi5wdWJsaXNoKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgX2xvZ1N0YXRlKCk7XG4gICAgICAgICAgICBpZiAoIHN0YXRlW2tleV0ubGVuZ3RoID4gMiApIHtcbiAgICAgICAgICAgICAgICBzdGF0ZVtrZXldLmxlbmd0aCA9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydHMuc3RhdGVNb2R1bGUgPSB7XG4gICAgbG9nU3RhdGU6IF9sb2dTdGF0ZSxcbiAgICBnZXRTdGF0ZTogX2dldFN0YXRlLFxuICAgIGdldFByZXZpb3VzU3RhdGU6IF9nZXRQcmV2aW91c1N0YXRlLFxuICAgIHNldFN0YXRlOiBfc2V0U3RhdGVcbn07IiwiLyogZ2xvYmFsIGRhdGFMYXllciAqL1xuZXhwb3J0IGZ1bmN0aW9uIEdUTVB1c2goZXZlbnRMYWJlbCkge1xuICAgIGlmIChkYXRhTGF5ZXIpIHtcbiAgICAgICAgZGF0YUxheWVyLnB1c2goeyAnZXZlbnQnOiAnSW50ZXJhY3RpdmUgQ2xpY2snLCAnZXZlbnREYXRhJzogZXZlbnRMYWJlbCB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaFdpbmRvd1Jlc2l6ZShTKSB7IC8vIG5lZWQgdG8gcGFzcyBpbiB0aGUgU3RhdGVNb2R1bGVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemVUaHJvdHRsZXIsIGZhbHNlKTtcblxuICAgIHZhciByZXNpemVUaW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gcmVzaXplVGhyb3R0bGVyKCkgeyAvLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3Jlc2l6ZSNzZXRUaW1lb3V0XG4gICAgICAgIC8vIGlnbm9yZSByZXNpemUgZXZlbnRzIGFzIGxvbmcgYXMgYW4gYWN0dWFsUmVzaXplSGFuZGxlciBleGVjdXRpb24gaXMgaW4gdGhlIHF1ZXVlXG4gICAgICAgIGlmICghcmVzaXplVGltZW91dCkge1xuICAgICAgICAgICAgcmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYWN0dWFsUmVzaXplSGFuZGxlcigpO1xuICAgICAgICAgICAgICAgIHJlc2l6ZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgfSwgMzUwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFjdHVhbFJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAgIFxuICAgICAgICBTLnNldFN0YXRlKCdyZXNpemUnLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XSk7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEZhZGVJblRleHQgPSAoZnVuY3Rpb24oKXtcbiAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUuZmFkZU91dENvbnRlbnQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCduby1vcGFjaXR5Jyk7XG4gICAgfTtcbiAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUuZmFkZUluQ29udGVudCA9IGZ1bmN0aW9uKGNvbnRlbnQsIHMpe1xuICAgICAgICB2YXIgZHVyYXRpb25TID0gcyB8fCAwO1xuICAgICAgICBpZiAoIHMgKXtcbiAgICAgICAgICAgIHRoaXMuc3R5bGUudHJhbnNpdGlvbiA9ICdvcGFjaXR5ICcgKyBzICsgJ3MgZWFzZS1pbi1vdXQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uU3RyID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcykuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNpdGlvbi1kdXJhdGlvbicpIHx8IGR1cmF0aW9uUyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHBhcnNlRmxvYXQoZHVyYXRpb25TdHIpICogMTAwMDtcbiAgICAgICAgICAgIHRoaXMuZmFkZU91dENvbnRlbnQoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ25vLW9wYWNpdHknKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICB9KTtcbiAgICB9O1xufSkoKTtcbmV4cG9ydCBjb25zdCBTdHJpbmdIZWxwZXJzID0gKGZ1bmN0aW9uKCl7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5jbGVhblN0cmluZyA9IGZ1bmN0aW9uKCkgeyAvLyBsb3dlcmNhc2UgYW5kIHJlbW92ZSBwdW5jdHVhdGlvbiBhbmQgcmVwbGFjZSBzcGFjZXMgd2l0aCBoeXBoZW5zOyBkZWxldGUgcHVuY3R1YXRpb25cbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvWyAvXS9nLCctJykucmVwbGFjZSgvWydcIuKAneKAmeKAnOKAmCwuIT87KCkmOl0vZywnJykudG9Mb3dlckNhc2UoKTtcbiAgICB9O1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVVbmRlcnNjb3JlcyA9IGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvXy9nLCcgJyk7XG4gICAgfTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUudW5kb0NhbWVsQ2FzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oW0EtWl0pL2csICcgJDEnKS50b0xvd2VyQ2FzZSgpO1xuICAgIH07XG5cbiAgICBTdHJpbmcucHJvdG90eXBlLnRydW5jID0gU3RyaW5nLnByb3RvdHlwZS50cnVuYyB8fCAvLyBodCBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTE5OTQyMFxuICAgICAgICAgZnVuY3Rpb24oIG4sIHVzZVdvcmRCb3VuZGFyeSApe1xuICAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA8PSBuKSB7IHJldHVybiB0aGlzOyB9XG4gICAgICAgICAgICAgdmFyIHN1YlN0cmluZyA9IHRoaXMuc3Vic3RyKDAsIG4tMSk7XG4gICAgICAgICAgICAgcmV0dXJuICh1c2VXb3JkQm91bmRhcnkgXG4gICAgICAgICAgICAgICAgPyBzdWJTdHJpbmcuc3Vic3RyKDAsIHN1YlN0cmluZy5sYXN0SW5kZXhPZignICcpKSBcbiAgICAgICAgICAgICAgICA6IHN1YlN0cmluZykgKyBcIi4uLlwiO1xuICAgICAgICAgIH07XG5cbiAgICBTdHJpbmcucHJvdG90eXBlLmhhc2hDb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaGFzaCA9IDAsIGksIGNocjtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaHIgICA9IHRoaXMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNocjtcbiAgICAgICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNoO1xuICAgIH07XG59KSgpXG5cbmV4cG9ydCBjb25zdCBET01IZWxwZXJzID0ge1xuIGM6ICAocykgPT4ge1xuICAgICBcbiAgICAgaWYgKCBzLmluZGV4T2YoJy4nKSAhPT0gLTEgfHwgcy5pbmRleE9mKCcjJykgIT09IC0xICl7XG4gICAgICAgICBsZXQgY2xhc3NTdHJpbmdzID0gcy5tYXRjaCgvXFwuKFteIy5dKikvZykgfHwgW107XG4gICAgICAgICBsZXQgaWRTdHJpbmcgPSBzLm1hdGNoKC8jKFteLl0qKS8pO1xuICAgICAgICAgbGV0IGVsU3RyaW5nID0gcy5tYXRjaCgvXihbXi4jXSspLyk7XG4gICAgICAgICBcbiAgICAgICAgIFxuICAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbFN0cmluZ1swXSk7XG4gICAgICAgICBjbGFzc1N0cmluZ3MuZm9yRWFjaChrbGFzcyA9PiB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGtsYXNzLnJlcGxhY2UoJy4nLCcnKSk7XG4gICAgICAgICB9KTtcbiAgICAgICAgIGlmICggaWRTdHJpbmcgIT09IG51bGwgKXtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZFN0cmluZ1sxXSk7XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gZWw7XG4gICAgIH1cbiAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQocyk7XG4gfSxcbiBxOiAgKHMpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocyksXG4gcWE6IChzKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHMpXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMCwyMDExLDIwMTIsMjAxMywyMDE0IE1vcmdhbiBSb2RlcmljayBodHRwOi8vcm9kZXJpY2suZGtcbiAqIExpY2Vuc2U6IE1JVCAtIGh0dHA6Ly9tcmducmRyY2subWl0LWxpY2Vuc2Uub3JnXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL21yb2Rlcmljay9QdWJTdWJKU1xuICovXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIFB1YlN1YiA9IHt9O1xuICAgIHJvb3QuUHViU3ViID0gUHViU3ViO1xuXG4gICAgdmFyIGRlZmluZSA9IHJvb3QuZGVmaW5lO1xuXG4gICAgZmFjdG9yeShQdWJTdWIpO1xuXG4gICAgLy8gQU1EIHN1cHBvcnRcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKXtcbiAgICAgICAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gUHViU3ViOyB9KTtcblxuICAgICAgICAvLyBDb21tb25KUyBhbmQgTm9kZS5qcyBtb2R1bGUgc3VwcG9ydFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKXtcbiAgICAgICAgaWYgKG1vZHVsZSAhPT0gdW5kZWZpbmVkICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBQdWJTdWI7IC8vIE5vZGUuanMgc3BlY2lmaWMgYG1vZHVsZS5leHBvcnRzYFxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydHMuUHViU3ViID0gUHViU3ViOyAvLyBDb21tb25KUyBtb2R1bGUgMS4xLjEgc3BlY1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBQdWJTdWI7IC8vIENvbW1vbkpTXG4gICAgfVxuXG59KCggdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93ICkgfHwgdGhpcywgZnVuY3Rpb24gKFB1YlN1Yil7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIG1lc3NhZ2VzID0ge30sXG4gICAgICAgIGxhc3RVaWQgPSAtMTtcblxuICAgIGZ1bmN0aW9uIGhhc0tleXMob2JqKXtcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICBmb3IgKGtleSBpbiBvYmope1xuICAgICAgICAgICAgaWYgKCBvYmouaGFzT3duUHJvcGVydHkoa2V5KSApe1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB0aHJvd3MgdGhlIHBhc3NlZCBleGNlcHRpb24sIGZvciB1c2UgYXMgYXJndW1lbnQgZm9yIHNldFRpbWVvdXRcbiAgICAgKiBAYWxpYXMgdGhyb3dFeGNlcHRpb25cbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyBPYmplY3QgfSBleCBBbiBFcnJvciBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvd0V4Y2VwdGlvbiggZXggKXtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlVGhyb3dFeGNlcHRpb24oKXtcbiAgICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxTdWJzY3JpYmVyV2l0aERlbGF5ZWRFeGNlcHRpb25zKCBzdWJzY3JpYmVyLCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyKCBtZXNzYWdlLCBkYXRhICk7XG4gICAgICAgIH0gY2F0Y2goIGV4ICl7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCB0aHJvd0V4Y2VwdGlvbiggZXggKSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsU3Vic2NyaWJlcldpdGhJbW1lZGlhdGVFeGNlcHRpb25zKCBzdWJzY3JpYmVyLCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHN1YnNjcmliZXIoIG1lc3NhZ2UsIGRhdGEgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWxpdmVyTWVzc2FnZSggb3JpZ2luYWxNZXNzYWdlLCBtYXRjaGVkTWVzc2FnZSwgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApe1xuICAgICAgICB2YXIgc3Vic2NyaWJlcnMgPSBtZXNzYWdlc1ttYXRjaGVkTWVzc2FnZV0sXG4gICAgICAgICAgICBjYWxsU3Vic2NyaWJlciA9IGltbWVkaWF0ZUV4Y2VwdGlvbnMgPyBjYWxsU3Vic2NyaWJlcldpdGhJbW1lZGlhdGVFeGNlcHRpb25zIDogY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMsXG4gICAgICAgICAgICBzO1xuXG4gICAgICAgIGlmICggIW1lc3NhZ2VzLmhhc093blByb3BlcnR5KCBtYXRjaGVkTWVzc2FnZSApICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChzIGluIHN1YnNjcmliZXJzKXtcbiAgICAgICAgICAgIGlmICggc3Vic2NyaWJlcnMuaGFzT3duUHJvcGVydHkocykpe1xuICAgICAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyKCBzdWJzY3JpYmVyc1tzXSwgb3JpZ2luYWxNZXNzYWdlLCBkYXRhICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZWxpdmVyTmFtZXNwYWNlZCgpe1xuICAgICAgICAgICAgdmFyIHRvcGljID0gU3RyaW5nKCBtZXNzYWdlICksXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG5cbiAgICAgICAgICAgIC8vIGRlbGl2ZXIgdGhlIG1lc3NhZ2UgYXMgaXQgaXMgbm93XG4gICAgICAgICAgICBkZWxpdmVyTWVzc2FnZShtZXNzYWdlLCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gdHJpbSB0aGUgaGllcmFyY2h5IGFuZCBkZWxpdmVyIG1lc3NhZ2UgdG8gZWFjaCBsZXZlbFxuICAgICAgICAgICAgd2hpbGUoIHBvc2l0aW9uICE9PSAtMSApe1xuICAgICAgICAgICAgICAgIHRvcGljID0gdG9waWMuc3Vic3RyKCAwLCBwb3NpdGlvbiApO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgICAgICAgICAgICBkZWxpdmVyTWVzc2FnZSggbWVzc2FnZSwgdG9waWMsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXNzYWdlSGFzU3Vic2NyaWJlcnMoIG1lc3NhZ2UgKXtcbiAgICAgICAgdmFyIHRvcGljID0gU3RyaW5nKCBtZXNzYWdlICksXG4gICAgICAgICAgICBmb3VuZCA9IEJvb2xlYW4obWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIHRvcGljICkgJiYgaGFzS2V5cyhtZXNzYWdlc1t0b3BpY10pKSxcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoICcuJyApO1xuXG4gICAgICAgIHdoaWxlICggIWZvdW5kICYmIHBvc2l0aW9uICE9PSAtMSApe1xuICAgICAgICAgICAgdG9waWMgPSB0b3BpYy5zdWJzdHIoIDAsIHBvc2l0aW9uICk7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcbiAgICAgICAgICAgIGZvdW5kID0gQm9vbGVhbihtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggdG9waWMgKSAmJiBoYXNLZXlzKG1lc3NhZ2VzW3RvcGljXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIHN5bmMsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgbWVzc2FnZSA9ICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N5bWJvbCcpID8gbWVzc2FnZS50b1N0cmluZygpIDogbWVzc2FnZTtcblxuICAgICAgICB2YXIgZGVsaXZlciA9IGNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKSxcbiAgICAgICAgICAgIGhhc1N1YnNjcmliZXJzID0gbWVzc2FnZUhhc1N1YnNjcmliZXJzKCBtZXNzYWdlICk7XG5cbiAgICAgICAgaWYgKCAhaGFzU3Vic2NyaWJlcnMgKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggc3luYyA9PT0gdHJ1ZSApe1xuICAgICAgICAgICAgZGVsaXZlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dCggZGVsaXZlciwgMCApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2hlcyB0aGUgbWVzc2FnZSwgcGFzc2luZyB0aGUgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHB1Ymxpc2hcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHB1Ymxpc2hcbiAgICAgKiBAcGFyYW0ge30gZGF0YSBUaGUgZGF0YSB0byBwYXNzIHRvIHN1YnNjcmliZXJzXG4gICAgICogQHJldHVybiB7IEJvb2xlYW4gfVxuICAgICAqL1xuICAgIFB1YlN1Yi5wdWJsaXNoID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIGZhbHNlLCBQdWJTdWIuaW1tZWRpYXRlRXhjZXB0aW9ucyApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoZXMgdGhlIHRoZSBtZXNzYWdlIHN5bmNocm9ub3VzbHksIHBhc3NpbmcgdGhlIGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBwdWJsaXNoU3luY1xuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gcHVibGlzaFxuICAgICAqIEBwYXJhbSB7fSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgdG8gc3Vic2NyaWJlcnNcbiAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9XG4gICAgICovXG4gICAgUHViU3ViLnB1Ymxpc2hTeW5jID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIHRydWUsIFB1YlN1Yi5pbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2UuIEV2ZXJ5IHJldHVybmVkIHRva2VuIGlzIHVuaXF1ZSBhbmQgc2hvdWxkIGJlIHN0b3JlZCBpZiB5b3UgbmVlZCB0byB1bnN1YnNjcmliZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHN1YnNjcmliZSB0b1xuICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgbmV3IG1lc3NhZ2UgaXMgcHVibGlzaGVkXG4gICAgICogQHJldHVybiB7IFN0cmluZyB9XG4gICAgICovXG4gICAgUHViU3ViLnN1YnNjcmliZSA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBmdW5jICl7XG4gICAgICAgIGlmICggdHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVzc2FnZSA9ICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N5bWJvbCcpID8gbWVzc2FnZS50b1N0cmluZygpIDogbWVzc2FnZTtcblxuICAgICAgICAvLyBtZXNzYWdlIGlzIG5vdCByZWdpc3RlcmVkIHlldFxuICAgICAgICBpZiAoICFtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggbWVzc2FnZSApICl7XG4gICAgICAgICAgICBtZXNzYWdlc1ttZXNzYWdlXSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZm9yY2luZyB0b2tlbiBhcyBTdHJpbmcsIHRvIGFsbG93IGZvciBmdXR1cmUgZXhwYW5zaW9ucyB3aXRob3V0IGJyZWFraW5nIHVzYWdlXG4gICAgICAgIC8vIGFuZCBhbGxvdyBmb3IgZWFzeSB1c2UgYXMga2V5IG5hbWVzIGZvciB0aGUgJ21lc3NhZ2VzJyBvYmplY3RcbiAgICAgICAgdmFyIHRva2VuID0gJ3VpZF8nICsgU3RyaW5nKCsrbGFzdFVpZCk7XG4gICAgICAgIG1lc3NhZ2VzW21lc3NhZ2VdW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIFxuICAgICAgICAvLyByZXR1cm4gdG9rZW4gZm9yIHVuc3Vic2NyaWJpbmdcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVzIHRoZSBwYXNzZWQgZnVuY3Rpb24gdG8gdGhlIHBhc3NlZCBtZXNzYWdlIG9uY2VcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAYWxpYXMgc3Vic2NyaWJlT25jZVxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gc3Vic2NyaWJlIHRvXG4gICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gYSBuZXcgbWVzc2FnZSBpcyBwdWJsaXNoZWRcbiAgICAgKiBAcmV0dXJuIHsgUHViU3ViIH1cbiAgICAgKi9cbiAgICBQdWJTdWIuc3Vic2NyaWJlT25jZSA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBmdW5jICl7XG4gICAgICAgIHZhciB0b2tlbiA9IFB1YlN1Yi5zdWJzY3JpYmUoIG1lc3NhZ2UsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyBiZWZvcmUgZnVuYyBhcHBseSwgdW5zdWJzY3JpYmUgbWVzc2FnZVxuICAgICAgICAgICAgUHViU3ViLnVuc3Vic2NyaWJlKCB0b2tlbiApO1xuICAgICAgICAgICAgZnVuYy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUHViU3ViO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIHN1YnNjcmlwdGlvbnNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIGNsZWFyQWxsU3Vic2NyaXB0aW9uc1xuICAgICAqL1xuICAgIFB1YlN1Yi5jbGVhckFsbFN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiBjbGVhckFsbFN1YnNjcmlwdGlvbnMoKXtcbiAgICAgICAgbWVzc2FnZXMgPSB7fTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgc3Vic2NyaXB0aW9ucyBieSB0aGUgdG9waWNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIGNsZWFyQWxsU3Vic2NyaXB0aW9uc1xuICAgICAqL1xuICAgIFB1YlN1Yi5jbGVhclN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiBjbGVhclN1YnNjcmlwdGlvbnModG9waWMpe1xuICAgICAgICB2YXIgbTtcbiAgICAgICAgZm9yIChtIGluIG1lc3NhZ2VzKXtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShtKSAmJiBtLmluZGV4T2YodG9waWMpID09PSAwKXtcbiAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZXNbbV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBzdWJzY3JpcHRpb25zXG4gICAgICpcbiAgICAgKiAtIFdoZW4gcGFzc2VkIGEgdG9rZW4sIHJlbW92ZXMgYSBzcGVjaWZpYyBzdWJzY3JpcHRpb24uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIGZ1bmN0aW9uLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IGZ1bmN0aW9uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIHRvcGljLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IHRvcGljIChoaWVyYXJjaHkpXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIHwgRnVuY3Rpb24gfSB2YWx1ZSBBIHRva2VuLCBmdW5jdGlvbiBvciB0b3BpYyB0byB1bnN1YnNjcmliZSBmcm9tXG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyB3aXRoIGEgdG9rZW5cbiAgICAgKiB2YXIgdG9rZW4gPSBQdWJTdWIuc3Vic2NyaWJlKCdteXRvcGljJywgbXlGdW5jKTtcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUodG9rZW4pO1xuICAgICAqIEBleGFtcGxlIC8vIFVuc3Vic2NyaWJpbmcgd2l0aCBhIGZ1bmN0aW9uXG4gICAgICogUHViU3ViLnVuc3Vic2NyaWJlKG15RnVuYyk7XG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyBmcm9tIGEgdG9waWNcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUoJ215dG9waWMnKTtcbiAgICAgKi9cbiAgICBQdWJTdWIudW5zdWJzY3JpYmUgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIHZhciBkZXNjZW5kYW50VG9waWNFeGlzdHMgPSBmdW5jdGlvbih0b3BpYykge1xuICAgICAgICAgICAgICAgIHZhciBtO1xuICAgICAgICAgICAgICAgIGZvciAoIG0gaW4gbWVzc2FnZXMgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShtKSAmJiBtLmluZGV4T2YodG9waWMpID09PSAwICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhIGRlc2NlbmRhbnQgb2YgdGhlIHRvcGljIGV4aXN0czpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzVG9waWMgICAgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICggbWVzc2FnZXMuaGFzT3duUHJvcGVydHkodmFsdWUpIHx8IGRlc2NlbmRhbnRUb3BpY0V4aXN0cyh2YWx1ZSkgKSxcbiAgICAgICAgICAgIGlzVG9rZW4gICAgPSAhaXNUb3BpYyAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnLFxuICAgICAgICAgICAgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlLFxuICAgICAgICAgICAgbSwgbWVzc2FnZSwgdDtcblxuICAgICAgICBpZiAoaXNUb3BpYyl7XG4gICAgICAgICAgICBQdWJTdWIuY2xlYXJTdWJzY3JpcHRpb25zKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoIG0gaW4gbWVzc2FnZXMgKXtcbiAgICAgICAgICAgIGlmICggbWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIG0gKSApe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc1ttXTtcblxuICAgICAgICAgICAgICAgIGlmICggaXNUb2tlbiAmJiBtZXNzYWdlW3ZhbHVlXSApe1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZVt2YWx1ZV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvLyB0b2tlbnMgYXJlIHVuaXF1ZSwgc28gd2UgY2FuIGp1c3Qgc3RvcCBoZXJlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHQgaW4gbWVzc2FnZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaGFzT3duUHJvcGVydHkodCkgJiYgbWVzc2FnZVt0XSA9PT0gdmFsdWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlW3RdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59KSk7XG4iLCIvKiBAbGljZW5zZVxuUGFwYSBQYXJzZVxudjQuNi4zXG5odHRwczovL2dpdGh1Yi5jb20vbWhvbHQvUGFwYVBhcnNlXG5MaWNlbnNlOiBNSVRcbiovXG5BcnJheS5pc0FycmF5fHwoQXJyYXkuaXNBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9KSxmdW5jdGlvbihlLHQpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9dCgpOmUuUGFwYT10KCl9KHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgcyxlLGY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp2b2lkIDAhPT1mP2Y6e30sbj0hZi5kb2N1bWVudCYmISFmLnBvc3RNZXNzYWdlLG89biYmLyhcXD98JilwYXBhd29ya2VyKD18JnwkKS8udGVzdChmLmxvY2F0aW9uLnNlYXJjaCksYT0hMSxoPXt9LHU9MCxrPXtwYXJzZTpmdW5jdGlvbihlLHQpe3ZhciByPSh0PXR8fHt9KS5keW5hbWljVHlwaW5nfHwhMTt6KHIpJiYodC5keW5hbWljVHlwaW5nRnVuY3Rpb249cixyPXt9KTtpZih0LmR5bmFtaWNUeXBpbmc9cix0LnRyYW5zZm9ybT0hIXoodC50cmFuc2Zvcm0pJiZ0LnRyYW5zZm9ybSx0LndvcmtlciYmay5XT1JLRVJTX1NVUFBPUlRFRCl7dmFyIGk9ZnVuY3Rpb24oKXtpZighay5XT1JLRVJTX1NVUFBPUlRFRClyZXR1cm4hMTtpZighYSYmbnVsbD09PWsuU0NSSVBUX1BBVEgpdGhyb3cgbmV3IEVycm9yKFwiU2NyaXB0IHBhdGggY2Fubm90IGJlIGRldGVybWluZWQgYXV0b21hdGljYWxseSB3aGVuIFBhcGEgUGFyc2UgaXMgbG9hZGVkIGFzeW5jaHJvbm91c2x5LiBZb3UgbmVlZCB0byBzZXQgUGFwYS5TQ1JJUFRfUEFUSCBtYW51YWxseS5cIik7dmFyIGU9ay5TQ1JJUFRfUEFUSHx8cztlKz0oLTEhPT1lLmluZGV4T2YoXCI/XCIpP1wiJlwiOlwiP1wiKStcInBhcGF3b3JrZXJcIjt2YXIgdD1uZXcgZi5Xb3JrZXIoZSk7cmV0dXJuIHQub25tZXNzYWdlPW0sdC5pZD11KyssaFt0LmlkXT10fSgpO3JldHVybiBpLnVzZXJTdGVwPXQuc3RlcCxpLnVzZXJDaHVuaz10LmNodW5rLGkudXNlckNvbXBsZXRlPXQuY29tcGxldGUsaS51c2VyRXJyb3I9dC5lcnJvcix0LnN0ZXA9eih0LnN0ZXApLHQuY2h1bms9eih0LmNodW5rKSx0LmNvbXBsZXRlPXoodC5jb21wbGV0ZSksdC5lcnJvcj16KHQuZXJyb3IpLGRlbGV0ZSB0Lndvcmtlcix2b2lkIGkucG9zdE1lc3NhZ2Uoe2lucHV0OmUsY29uZmlnOnQsd29ya2VySWQ6aS5pZH0pfXZhciBuPW51bGw7ay5OT0RFX1NUUkVBTV9JTlBVVCxcInN0cmluZ1wiPT10eXBlb2YgZT9uPXQuZG93bmxvYWQ/bmV3IGModCk6bmV3IF8odCk6ITA9PT1lLnJlYWRhYmxlJiZ6KGUucmVhZCkmJnooZS5vbik/bj1uZXcgZyh0KTooZi5GaWxlJiZlIGluc3RhbmNlb2YgRmlsZXx8ZSBpbnN0YW5jZW9mIE9iamVjdCkmJihuPW5ldyBwKHQpKTtyZXR1cm4gbi5zdHJlYW0oZSl9LHVucGFyc2U6ZnVuY3Rpb24oZSx0KXt2YXIgaT0hMSxnPSEwLG09XCIsXCIseT1cIlxcclxcblwiLG49J1wiJyxyPSExOyFmdW5jdGlvbigpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiB0KXJldHVybjtcInN0cmluZ1wiIT10eXBlb2YgdC5kZWxpbWl0ZXJ8fGsuQkFEX0RFTElNSVRFUlMuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybi0xIT09dC5kZWxpbWl0ZXIuaW5kZXhPZihlKX0pLmxlbmd0aHx8KG09dC5kZWxpbWl0ZXIpOyhcImJvb2xlYW5cIj09dHlwZW9mIHQucXVvdGVzfHxBcnJheS5pc0FycmF5KHQucXVvdGVzKSkmJihpPXQucXVvdGVzKTtcImJvb2xlYW5cIiE9dHlwZW9mIHQuc2tpcEVtcHR5TGluZXMmJlwic3RyaW5nXCIhPXR5cGVvZiB0LnNraXBFbXB0eUxpbmVzfHwocj10LnNraXBFbXB0eUxpbmVzKTtcInN0cmluZ1wiPT10eXBlb2YgdC5uZXdsaW5lJiYoeT10Lm5ld2xpbmUpO1wic3RyaW5nXCI9PXR5cGVvZiB0LnF1b3RlQ2hhciYmKG49dC5xdW90ZUNoYXIpO1wiYm9vbGVhblwiPT10eXBlb2YgdC5oZWFkZXImJihnPXQuaGVhZGVyKX0oKTt2YXIgcz1uZXcgUmVnRXhwKE0obiksXCJnXCIpO1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1KU09OLnBhcnNlKGUpKTtpZihBcnJheS5pc0FycmF5KGUpKXtpZighZS5sZW5ndGh8fEFycmF5LmlzQXJyYXkoZVswXSkpcmV0dXJuIG8obnVsbCxlLHIpO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBlWzBdKXJldHVybiBvKGEoZVswXSksZSxyKX1lbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKXJldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlLmRhdGEmJihlLmRhdGE9SlNPTi5wYXJzZShlLmRhdGEpKSxBcnJheS5pc0FycmF5KGUuZGF0YSkmJihlLmZpZWxkc3x8KGUuZmllbGRzPWUubWV0YSYmZS5tZXRhLmZpZWxkcyksZS5maWVsZHN8fChlLmZpZWxkcz1BcnJheS5pc0FycmF5KGUuZGF0YVswXSk/ZS5maWVsZHM6YShlLmRhdGFbMF0pKSxBcnJheS5pc0FycmF5KGUuZGF0YVswXSl8fFwib2JqZWN0XCI9PXR5cGVvZiBlLmRhdGFbMF18fChlLmRhdGE9W2UuZGF0YV0pKSxvKGUuZmllbGRzfHxbXSxlLmRhdGF8fFtdLHIpO3Rocm93XCJleGNlcHRpb246IFVuYWJsZSB0byBzZXJpYWxpemUgdW5yZWNvZ25pemVkIGlucHV0XCI7ZnVuY3Rpb24gYShlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZSlyZXR1cm5bXTt2YXIgdD1bXTtmb3IodmFyIHIgaW4gZSl0LnB1c2gocik7cmV0dXJuIHR9ZnVuY3Rpb24gbyhlLHQscil7dmFyIGk9XCJcIjtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9SlNPTi5wYXJzZShlKSksXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PUpTT04ucGFyc2UodCkpO3ZhciBuPUFycmF5LmlzQXJyYXkoZSkmJjA8ZS5sZW5ndGgscz0hQXJyYXkuaXNBcnJheSh0WzBdKTtpZihuJiZnKXtmb3IodmFyIGE9MDthPGUubGVuZ3RoO2ErKykwPGEmJihpKz1tKSxpKz12KGVbYV0sYSk7MDx0Lmxlbmd0aCYmKGkrPXkpfWZvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKXt2YXIgaD1uP2UubGVuZ3RoOnRbb10ubGVuZ3RoLHU9ITEsZj1uPzA9PT1PYmplY3Qua2V5cyh0W29dKS5sZW5ndGg6MD09PXRbb10ubGVuZ3RoO2lmKHImJiFuJiYodT1cImdyZWVkeVwiPT09cj9cIlwiPT09dFtvXS5qb2luKFwiXCIpLnRyaW0oKToxPT09dFtvXS5sZW5ndGgmJjA9PT10W29dWzBdLmxlbmd0aCksXCJncmVlZHlcIj09PXImJm4pe2Zvcih2YXIgZD1bXSxsPTA7bDxoO2wrKyl7dmFyIGM9cz9lW2xdOmw7ZC5wdXNoKHRbb11bY10pfXU9XCJcIj09PWQuam9pbihcIlwiKS50cmltKCl9aWYoIXUpe2Zvcih2YXIgcD0wO3A8aDtwKyspezA8cCYmIWYmJihpKz1tKTt2YXIgXz1uJiZzP2VbcF06cDtpKz12KHRbb11bX10scCl9bzx0Lmxlbmd0aC0xJiYoIXJ8fDA8aCYmIWYpJiYoaSs9eSl9fXJldHVybiBpfWZ1bmN0aW9uIHYoZSx0KXtpZihudWxsPT1lKXJldHVyblwiXCI7aWYoZS5jb25zdHJ1Y3Rvcj09PURhdGUpcmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpLnNsaWNlKDEsMjUpO2U9ZS50b1N0cmluZygpLnJlcGxhY2UocyxuK24pO3ZhciByPVwiYm9vbGVhblwiPT10eXBlb2YgaSYmaXx8QXJyYXkuaXNBcnJheShpKSYmaVt0XXx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKylpZigtMTxlLmluZGV4T2YodFtyXSkpcmV0dXJuITA7cmV0dXJuITF9KGUsay5CQURfREVMSU1JVEVSUyl8fC0xPGUuaW5kZXhPZihtKXx8XCIgXCI9PT1lLmNoYXJBdCgwKXx8XCIgXCI9PT1lLmNoYXJBdChlLmxlbmd0aC0xKTtyZXR1cm4gcj9uK2UrbjplfX19O2lmKGsuUkVDT1JEX1NFUD1TdHJpbmcuZnJvbUNoYXJDb2RlKDMwKSxrLlVOSVRfU0VQPVN0cmluZy5mcm9tQ2hhckNvZGUoMzEpLGsuQllURV9PUkRFUl9NQVJLPVwiXFx1ZmVmZlwiLGsuQkFEX0RFTElNSVRFUlM9W1wiXFxyXCIsXCJcXG5cIiwnXCInLGsuQllURV9PUkRFUl9NQVJLXSxrLldPUktFUlNfU1VQUE9SVEVEPSFuJiYhIWYuV29ya2VyLGsuU0NSSVBUX1BBVEg9bnVsbCxrLk5PREVfU1RSRUFNX0lOUFVUPTEsay5Mb2NhbENodW5rU2l6ZT0xMDQ4NTc2MCxrLlJlbW90ZUNodW5rU2l6ZT01MjQyODgwLGsuRGVmYXVsdERlbGltaXRlcj1cIixcIixrLlBhcnNlcj12LGsuUGFyc2VySGFuZGxlPXIsay5OZXR3b3JrU3RyZWFtZXI9YyxrLkZpbGVTdHJlYW1lcj1wLGsuU3RyaW5nU3RyZWFtZXI9XyxrLlJlYWRhYmxlU3RyZWFtU3RyZWFtZXI9ZyxmLmpRdWVyeSl7dmFyIGQ9Zi5qUXVlcnk7ZC5mbi5wYXJzZT1mdW5jdGlvbihvKXt2YXIgcj1vLmNvbmZpZ3x8e30saD1bXTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpe2lmKCEoXCJJTlBVVFwiPT09ZCh0aGlzKS5wcm9wKFwidGFnTmFtZVwiKS50b1VwcGVyQ2FzZSgpJiZcImZpbGVcIj09PWQodGhpcykuYXR0cihcInR5cGVcIikudG9Mb3dlckNhc2UoKSYmZi5GaWxlUmVhZGVyKXx8IXRoaXMuZmlsZXN8fDA9PT10aGlzLmZpbGVzLmxlbmd0aClyZXR1cm4hMDtmb3IodmFyIHQ9MDt0PHRoaXMuZmlsZXMubGVuZ3RoO3QrKyloLnB1c2goe2ZpbGU6dGhpcy5maWxlc1t0XSxpbnB1dEVsZW06dGhpcyxpbnN0YW5jZUNvbmZpZzpkLmV4dGVuZCh7fSxyKX0pfSksZSgpLHRoaXM7ZnVuY3Rpb24gZSgpe2lmKDAhPT1oLmxlbmd0aCl7dmFyIGUsdCxyLGksbj1oWzBdO2lmKHooby5iZWZvcmUpKXt2YXIgcz1vLmJlZm9yZShuLmZpbGUsbi5pbnB1dEVsZW0pO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBzKXtpZihcImFib3J0XCI9PT1zLmFjdGlvbilyZXR1cm4gZT1cIkFib3J0RXJyb3JcIix0PW4uZmlsZSxyPW4uaW5wdXRFbGVtLGk9cy5yZWFzb24sdm9pZCh6KG8uZXJyb3IpJiZvLmVycm9yKHtuYW1lOmV9LHQscixpKSk7aWYoXCJza2lwXCI9PT1zLmFjdGlvbilyZXR1cm4gdm9pZCB1KCk7XCJvYmplY3RcIj09dHlwZW9mIHMuY29uZmlnJiYobi5pbnN0YW5jZUNvbmZpZz1kLmV4dGVuZChuLmluc3RhbmNlQ29uZmlnLHMuY29uZmlnKSl9ZWxzZSBpZihcInNraXBcIj09PXMpcmV0dXJuIHZvaWQgdSgpfXZhciBhPW4uaW5zdGFuY2VDb25maWcuY29tcGxldGU7bi5pbnN0YW5jZUNvbmZpZy5jb21wbGV0ZT1mdW5jdGlvbihlKXt6KGEpJiZhKGUsbi5maWxlLG4uaW5wdXRFbGVtKSx1KCl9LGsucGFyc2Uobi5maWxlLG4uaW5zdGFuY2VDb25maWcpfWVsc2UgeihvLmNvbXBsZXRlKSYmby5jb21wbGV0ZSgpfWZ1bmN0aW9uIHUoKXtoLnNwbGljZSgwLDEpLGUoKX19fWZ1bmN0aW9uIGwoZSl7dGhpcy5faGFuZGxlPW51bGwsdGhpcy5fZmluaXNoZWQ9ITEsdGhpcy5fY29tcGxldGVkPSExLHRoaXMuX2lucHV0PW51bGwsdGhpcy5fYmFzZUluZGV4PTAsdGhpcy5fcGFydGlhbExpbmU9XCJcIix0aGlzLl9yb3dDb3VudD0wLHRoaXMuX3N0YXJ0PTAsdGhpcy5fbmV4dENodW5rPW51bGwsdGhpcy5pc0ZpcnN0Q2h1bms9ITAsdGhpcy5fY29tcGxldGVSZXN1bHRzPXtkYXRhOltdLGVycm9yczpbXSxtZXRhOnt9fSxmdW5jdGlvbihlKXt2YXIgdD1FKGUpO3QuY2h1bmtTaXplPXBhcnNlSW50KHQuY2h1bmtTaXplKSxlLnN0ZXB8fGUuY2h1bmt8fCh0LmNodW5rU2l6ZT1udWxsKTt0aGlzLl9oYW5kbGU9bmV3IHIodCksKHRoaXMuX2hhbmRsZS5zdHJlYW1lcj10aGlzKS5fY29uZmlnPXR9LmNhbGwodGhpcyxlKSx0aGlzLnBhcnNlQ2h1bms9ZnVuY3Rpb24oZSx0KXtpZih0aGlzLmlzRmlyc3RDaHVuayYmeih0aGlzLl9jb25maWcuYmVmb3JlRmlyc3RDaHVuaykpe3ZhciByPXRoaXMuX2NvbmZpZy5iZWZvcmVGaXJzdENodW5rKGUpO3ZvaWQgMCE9PXImJihlPXIpfXRoaXMuaXNGaXJzdENodW5rPSExO3ZhciBpPXRoaXMuX3BhcnRpYWxMaW5lK2U7dGhpcy5fcGFydGlhbExpbmU9XCJcIjt2YXIgbj10aGlzLl9oYW5kbGUucGFyc2UoaSx0aGlzLl9iYXNlSW5kZXgsIXRoaXMuX2ZpbmlzaGVkKTtpZighdGhpcy5faGFuZGxlLnBhdXNlZCgpJiYhdGhpcy5faGFuZGxlLmFib3J0ZWQoKSl7dmFyIHM9bi5tZXRhLmN1cnNvcjt0aGlzLl9maW5pc2hlZHx8KHRoaXMuX3BhcnRpYWxMaW5lPWkuc3Vic3RyaW5nKHMtdGhpcy5fYmFzZUluZGV4KSx0aGlzLl9iYXNlSW5kZXg9cyksbiYmbi5kYXRhJiYodGhpcy5fcm93Q291bnQrPW4uZGF0YS5sZW5ndGgpO3ZhciBhPXRoaXMuX2ZpbmlzaGVkfHx0aGlzLl9jb25maWcucHJldmlldyYmdGhpcy5fcm93Q291bnQ+PXRoaXMuX2NvbmZpZy5wcmV2aWV3O2lmKG8pZi5wb3N0TWVzc2FnZSh7cmVzdWx0czpuLHdvcmtlcklkOmsuV09SS0VSX0lELGZpbmlzaGVkOmF9KTtlbHNlIGlmKHoodGhpcy5fY29uZmlnLmNodW5rKSYmIXQpe2lmKHRoaXMuX2NvbmZpZy5jaHVuayhuLHRoaXMuX2hhbmRsZSksdGhpcy5faGFuZGxlLnBhdXNlZCgpfHx0aGlzLl9oYW5kbGUuYWJvcnRlZCgpKXJldHVybjtuPXZvaWQgMCx0aGlzLl9jb21wbGV0ZVJlc3VsdHM9dm9pZCAwfXJldHVybiB0aGlzLl9jb25maWcuc3RlcHx8dGhpcy5fY29uZmlnLmNodW5rfHwodGhpcy5fY29tcGxldGVSZXN1bHRzLmRhdGE9dGhpcy5fY29tcGxldGVSZXN1bHRzLmRhdGEuY29uY2F0KG4uZGF0YSksdGhpcy5fY29tcGxldGVSZXN1bHRzLmVycm9ycz10aGlzLl9jb21wbGV0ZVJlc3VsdHMuZXJyb3JzLmNvbmNhdChuLmVycm9ycyksdGhpcy5fY29tcGxldGVSZXN1bHRzLm1ldGE9bi5tZXRhKSx0aGlzLl9jb21wbGV0ZWR8fCFhfHwheih0aGlzLl9jb25maWcuY29tcGxldGUpfHxuJiZuLm1ldGEuYWJvcnRlZHx8KHRoaXMuX2NvbmZpZy5jb21wbGV0ZSh0aGlzLl9jb21wbGV0ZVJlc3VsdHMsdGhpcy5faW5wdXQpLHRoaXMuX2NvbXBsZXRlZD0hMCksYXx8biYmbi5tZXRhLnBhdXNlZHx8dGhpcy5fbmV4dENodW5rKCksbn19LHRoaXMuX3NlbmRFcnJvcj1mdW5jdGlvbihlKXt6KHRoaXMuX2NvbmZpZy5lcnJvcik/dGhpcy5fY29uZmlnLmVycm9yKGUpOm8mJnRoaXMuX2NvbmZpZy5lcnJvciYmZi5wb3N0TWVzc2FnZSh7d29ya2VySWQ6ay5XT1JLRVJfSUQsZXJyb3I6ZSxmaW5pc2hlZDohMX0pfX1mdW5jdGlvbiBjKGUpe3ZhciBpOyhlPWV8fHt9KS5jaHVua1NpemV8fChlLmNodW5rU2l6ZT1rLlJlbW90ZUNodW5rU2l6ZSksbC5jYWxsKHRoaXMsZSksdGhpcy5fbmV4dENodW5rPW4/ZnVuY3Rpb24oKXt0aGlzLl9yZWFkQ2h1bmsoKSx0aGlzLl9jaHVua0xvYWRlZCgpfTpmdW5jdGlvbigpe3RoaXMuX3JlYWRDaHVuaygpfSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXt0aGlzLl9pbnB1dD1lLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9yZWFkQ2h1bms9ZnVuY3Rpb24oKXtpZih0aGlzLl9maW5pc2hlZCl0aGlzLl9jaHVua0xvYWRlZCgpO2Vsc2V7aWYoaT1uZXcgWE1MSHR0cFJlcXVlc3QsdGhpcy5fY29uZmlnLndpdGhDcmVkZW50aWFscyYmKGkud2l0aENyZWRlbnRpYWxzPXRoaXMuX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpLG58fChpLm9ubG9hZD13KHRoaXMuX2NodW5rTG9hZGVkLHRoaXMpLGkub25lcnJvcj13KHRoaXMuX2NodW5rRXJyb3IsdGhpcykpLGkub3BlbihcIkdFVFwiLHRoaXMuX2lucHV0LCFuKSx0aGlzLl9jb25maWcuZG93bmxvYWRSZXF1ZXN0SGVhZGVycyl7dmFyIGU9dGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnM7Zm9yKHZhciB0IGluIGUpaS5zZXRSZXF1ZXN0SGVhZGVyKHQsZVt0XSl9aWYodGhpcy5fY29uZmlnLmNodW5rU2l6ZSl7dmFyIHI9dGhpcy5fc3RhcnQrdGhpcy5fY29uZmlnLmNodW5rU2l6ZS0xO2kuc2V0UmVxdWVzdEhlYWRlcihcIlJhbmdlXCIsXCJieXRlcz1cIit0aGlzLl9zdGFydCtcIi1cIityKSxpLnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Ob25lLU1hdGNoXCIsXCJ3ZWJraXQtbm8tY2FjaGVcIil9dHJ5e2kuc2VuZCgpfWNhdGNoKGUpe3RoaXMuX2NodW5rRXJyb3IoZS5tZXNzYWdlKX1uJiYwPT09aS5zdGF0dXM/dGhpcy5fY2h1bmtFcnJvcigpOnRoaXMuX3N0YXJ0Kz10aGlzLl9jb25maWcuY2h1bmtTaXplfX0sdGhpcy5fY2h1bmtMb2FkZWQ9ZnVuY3Rpb24oKXs0PT09aS5yZWFkeVN0YXRlJiYoaS5zdGF0dXM8MjAwfHw0MDA8PWkuc3RhdHVzP3RoaXMuX2NodW5rRXJyb3IoKToodGhpcy5fZmluaXNoZWQ9IXRoaXMuX2NvbmZpZy5jaHVua1NpemV8fHRoaXMuX3N0YXJ0PmZ1bmN0aW9uKGUpe3ZhciB0PWUuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVJhbmdlXCIpO2lmKG51bGw9PT10KXJldHVybi0xO3JldHVybiBwYXJzZUludCh0LnN1YnN0cih0Lmxhc3RJbmRleE9mKFwiL1wiKSsxKSl9KGkpLHRoaXMucGFyc2VDaHVuayhpLnJlc3BvbnNlVGV4dCkpKX0sdGhpcy5fY2h1bmtFcnJvcj1mdW5jdGlvbihlKXt2YXIgdD1pLnN0YXR1c1RleHR8fGU7dGhpcy5fc2VuZEVycm9yKG5ldyBFcnJvcih0KSl9fWZ1bmN0aW9uIHAoZSl7dmFyIGksbjsoZT1lfHx7fSkuY2h1bmtTaXplfHwoZS5jaHVua1NpemU9ay5Mb2NhbENodW5rU2l6ZSksbC5jYWxsKHRoaXMsZSk7dmFyIHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEZpbGVSZWFkZXI7dGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7dGhpcy5faW5wdXQ9ZSxuPWUuc2xpY2V8fGUud2Via2l0U2xpY2V8fGUubW96U2xpY2Uscz8oKGk9bmV3IEZpbGVSZWFkZXIpLm9ubG9hZD13KHRoaXMuX2NodW5rTG9hZGVkLHRoaXMpLGkub25lcnJvcj13KHRoaXMuX2NodW5rRXJyb3IsdGhpcykpOmk9bmV3IEZpbGVSZWFkZXJTeW5jLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9uZXh0Q2h1bms9ZnVuY3Rpb24oKXt0aGlzLl9maW5pc2hlZHx8dGhpcy5fY29uZmlnLnByZXZpZXcmJiEodGhpcy5fcm93Q291bnQ8dGhpcy5fY29uZmlnLnByZXZpZXcpfHx0aGlzLl9yZWFkQ2h1bmsoKX0sdGhpcy5fcmVhZENodW5rPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5faW5wdXQ7aWYodGhpcy5fY29uZmlnLmNodW5rU2l6ZSl7dmFyIHQ9TWF0aC5taW4odGhpcy5fc3RhcnQrdGhpcy5fY29uZmlnLmNodW5rU2l6ZSx0aGlzLl9pbnB1dC5zaXplKTtlPW4uY2FsbChlLHRoaXMuX3N0YXJ0LHQpfXZhciByPWkucmVhZEFzVGV4dChlLHRoaXMuX2NvbmZpZy5lbmNvZGluZyk7c3x8dGhpcy5fY2h1bmtMb2FkZWQoe3RhcmdldDp7cmVzdWx0OnJ9fSl9LHRoaXMuX2NodW5rTG9hZGVkPWZ1bmN0aW9uKGUpe3RoaXMuX3N0YXJ0Kz10aGlzLl9jb25maWcuY2h1bmtTaXplLHRoaXMuX2ZpbmlzaGVkPSF0aGlzLl9jb25maWcuY2h1bmtTaXplfHx0aGlzLl9zdGFydD49dGhpcy5faW5wdXQuc2l6ZSx0aGlzLnBhcnNlQ2h1bmsoZS50YXJnZXQucmVzdWx0KX0sdGhpcy5fY2h1bmtFcnJvcj1mdW5jdGlvbigpe3RoaXMuX3NlbmRFcnJvcihpLmVycm9yKX19ZnVuY3Rpb24gXyhlKXt2YXIgcjtsLmNhbGwodGhpcyxlPWV8fHt9KSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gcj1lLHRoaXMuX25leHRDaHVuaygpfSx0aGlzLl9uZXh0Q2h1bms9ZnVuY3Rpb24oKXtpZighdGhpcy5fZmluaXNoZWQpe3ZhciBlPXRoaXMuX2NvbmZpZy5jaHVua1NpemUsdD1lP3Iuc3Vic3RyKDAsZSk6cjtyZXR1cm4gcj1lP3Iuc3Vic3RyKGUpOlwiXCIsdGhpcy5fZmluaXNoZWQ9IXIsdGhpcy5wYXJzZUNodW5rKHQpfX19ZnVuY3Rpb24gZyhlKXtsLmNhbGwodGhpcyxlPWV8fHt9KTt2YXIgdD1bXSxyPSEwLGk9ITE7dGhpcy5wYXVzZT1mdW5jdGlvbigpe2wucHJvdG90eXBlLnBhdXNlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9pbnB1dC5wYXVzZSgpfSx0aGlzLnJlc3VtZT1mdW5jdGlvbigpe2wucHJvdG90eXBlLnJlc3VtZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5faW5wdXQucmVzdW1lKCl9LHRoaXMuc3RyZWFtPWZ1bmN0aW9uKGUpe3RoaXMuX2lucHV0PWUsdGhpcy5faW5wdXQub24oXCJkYXRhXCIsdGhpcy5fc3RyZWFtRGF0YSksdGhpcy5faW5wdXQub24oXCJlbmRcIix0aGlzLl9zdHJlYW1FbmQpLHRoaXMuX2lucHV0Lm9uKFwiZXJyb3JcIix0aGlzLl9zdHJlYW1FcnJvcil9LHRoaXMuX2NoZWNrSXNGaW5pc2hlZD1mdW5jdGlvbigpe2kmJjE9PT10Lmxlbmd0aCYmKHRoaXMuX2ZpbmlzaGVkPSEwKX0sdGhpcy5fbmV4dENodW5rPWZ1bmN0aW9uKCl7dGhpcy5fY2hlY2tJc0ZpbmlzaGVkKCksdC5sZW5ndGg/dGhpcy5wYXJzZUNodW5rKHQuc2hpZnQoKSk6cj0hMH0sdGhpcy5fc3RyZWFtRGF0YT13KGZ1bmN0aW9uKGUpe3RyeXt0LnB1c2goXCJzdHJpbmdcIj09dHlwZW9mIGU/ZTplLnRvU3RyaW5nKHRoaXMuX2NvbmZpZy5lbmNvZGluZykpLHImJihyPSExLHRoaXMuX2NoZWNrSXNGaW5pc2hlZCgpLHRoaXMucGFyc2VDaHVuayh0LnNoaWZ0KCkpKX1jYXRjaChlKXt0aGlzLl9zdHJlYW1FcnJvcihlKX19LHRoaXMpLHRoaXMuX3N0cmVhbUVycm9yPXcoZnVuY3Rpb24oZSl7dGhpcy5fc3RyZWFtQ2xlYW5VcCgpLHRoaXMuX3NlbmRFcnJvcihlKX0sdGhpcyksdGhpcy5fc3RyZWFtRW5kPXcoZnVuY3Rpb24oKXt0aGlzLl9zdHJlYW1DbGVhblVwKCksaT0hMCx0aGlzLl9zdHJlYW1EYXRhKFwiXCIpfSx0aGlzKSx0aGlzLl9zdHJlYW1DbGVhblVwPXcoZnVuY3Rpb24oKXt0aGlzLl9pbnB1dC5yZW1vdmVMaXN0ZW5lcihcImRhdGFcIix0aGlzLl9zdHJlYW1EYXRhKSx0aGlzLl9pbnB1dC5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLHRoaXMuX3N0cmVhbUVuZCksdGhpcy5faW5wdXQucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLHRoaXMuX3N0cmVhbUVycm9yKX0sdGhpcyl9ZnVuY3Rpb24gcihnKXt2YXIgYSxvLGgsaT0vXlxccyotPyhcXGQqXFwuP1xcZCt8XFxkK1xcLj9cXGQqKShlWy0rXT9cXGQrKT9cXHMqJC9pLG49LyhcXGR7NH0tWzAxXVxcZC1bMC0zXVxcZFRbMC0yXVxcZDpbMC01XVxcZDpbMC01XVxcZFxcLlxcZCsoWystXVswLTJdXFxkOlswLTVdXFxkfFopKXwoXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGQoWystXVswLTJdXFxkOlswLTVdXFxkfFopKXwoXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQoWystXVswLTJdXFxkOlswLTVdXFxkfFopKS8sdD10aGlzLHI9MCxzPTAsdT0hMSxlPSExLGY9W10sZD17ZGF0YTpbXSxlcnJvcnM6W10sbWV0YTp7fX07aWYoeihnLnN0ZXApKXt2YXIgbD1nLnN0ZXA7Zy5zdGVwPWZ1bmN0aW9uKGUpe2lmKGQ9ZSxwKCkpYygpO2Vsc2V7aWYoYygpLDA9PT1kLmRhdGEubGVuZ3RoKXJldHVybjtyKz1lLmRhdGEubGVuZ3RoLGcucHJldmlldyYmcj5nLnByZXZpZXc/by5hYm9ydCgpOmwoZCx0KX19fWZ1bmN0aW9uIG0oZSl7cmV0dXJuXCJncmVlZHlcIj09PWcuc2tpcEVtcHR5TGluZXM/XCJcIj09PWUuam9pbihcIlwiKS50cmltKCk6MT09PWUubGVuZ3RoJiYwPT09ZVswXS5sZW5ndGh9ZnVuY3Rpb24gYygpe2lmKGQmJmgmJih5KFwiRGVsaW1pdGVyXCIsXCJVbmRldGVjdGFibGVEZWxpbWl0ZXJcIixcIlVuYWJsZSB0byBhdXRvLWRldGVjdCBkZWxpbWl0aW5nIGNoYXJhY3RlcjsgZGVmYXVsdGVkIHRvICdcIitrLkRlZmF1bHREZWxpbWl0ZXIrXCInXCIpLGg9ITEpLGcuc2tpcEVtcHR5TGluZXMpZm9yKHZhciBlPTA7ZTxkLmRhdGEubGVuZ3RoO2UrKyltKGQuZGF0YVtlXSkmJmQuZGF0YS5zcGxpY2UoZS0tLDEpO3JldHVybiBwKCkmJmZ1bmN0aW9uKCl7aWYoIWQpcmV0dXJuO2Zvcih2YXIgZT0wO3AoKSYmZTxkLmRhdGEubGVuZ3RoO2UrKylmb3IodmFyIHQ9MDt0PGQuZGF0YVtlXS5sZW5ndGg7dCsrKXt2YXIgcj1kLmRhdGFbZV1bdF07Zy50cmltSGVhZGVycyYmKHI9ci50cmltKCkpLGYucHVzaChyKX1kLmRhdGEuc3BsaWNlKDAsMSl9KCksZnVuY3Rpb24oKXtpZighZHx8IWcuaGVhZGVyJiYhZy5keW5hbWljVHlwaW5nJiYhZy50cmFuc2Zvcm0pcmV0dXJuIGQ7Zm9yKHZhciBlPTA7ZTxkLmRhdGEubGVuZ3RoO2UrKyl7dmFyIHQscj1nLmhlYWRlcj97fTpbXTtmb3IodD0wO3Q8ZC5kYXRhW2VdLmxlbmd0aDt0Kyspe3ZhciBpPXQsbj1kLmRhdGFbZV1bdF07Zy5oZWFkZXImJihpPXQ+PWYubGVuZ3RoP1wiX19wYXJzZWRfZXh0cmFcIjpmW3RdKSxnLnRyYW5zZm9ybSYmKG49Zy50cmFuc2Zvcm0obixpKSksbj1fKGksbiksXCJfX3BhcnNlZF9leHRyYVwiPT09aT8ocltpXT1yW2ldfHxbXSxyW2ldLnB1c2gobikpOnJbaV09bn1kLmRhdGFbZV09cixnLmhlYWRlciYmKHQ+Zi5sZW5ndGg/eShcIkZpZWxkTWlzbWF0Y2hcIixcIlRvb01hbnlGaWVsZHNcIixcIlRvbyBtYW55IGZpZWxkczogZXhwZWN0ZWQgXCIrZi5sZW5ndGgrXCIgZmllbGRzIGJ1dCBwYXJzZWQgXCIrdCxzK2UpOnQ8Zi5sZW5ndGgmJnkoXCJGaWVsZE1pc21hdGNoXCIsXCJUb29GZXdGaWVsZHNcIixcIlRvbyBmZXcgZmllbGRzOiBleHBlY3RlZCBcIitmLmxlbmd0aCtcIiBmaWVsZHMgYnV0IHBhcnNlZCBcIit0LHMrZSkpfWcuaGVhZGVyJiZkLm1ldGEmJihkLm1ldGEuZmllbGRzPWYpO3JldHVybiBzKz1kLmRhdGEubGVuZ3RoLGR9KCl9ZnVuY3Rpb24gcCgpe3JldHVybiBnLmhlYWRlciYmMD09PWYubGVuZ3RofWZ1bmN0aW9uIF8oZSx0KXtyZXR1cm4gcj1lLGcuZHluYW1pY1R5cGluZ0Z1bmN0aW9uJiZ2b2lkIDA9PT1nLmR5bmFtaWNUeXBpbmdbcl0mJihnLmR5bmFtaWNUeXBpbmdbcl09Zy5keW5hbWljVHlwaW5nRnVuY3Rpb24ocikpLCEwPT09KGcuZHluYW1pY1R5cGluZ1tyXXx8Zy5keW5hbWljVHlwaW5nKT9cInRydWVcIj09PXR8fFwiVFJVRVwiPT09dHx8XCJmYWxzZVwiIT09dCYmXCJGQUxTRVwiIT09dCYmKGkudGVzdCh0KT9wYXJzZUZsb2F0KHQpOm4udGVzdCh0KT9uZXcgRGF0ZSh0KTpcIlwiPT09dD9udWxsOnQpOnQ7dmFyIHJ9ZnVuY3Rpb24geShlLHQscixpKXtkLmVycm9ycy5wdXNoKHt0eXBlOmUsY29kZTp0LG1lc3NhZ2U6cixyb3c6aX0pfXRoaXMucGFyc2U9ZnVuY3Rpb24oZSx0LHIpe3ZhciBpPWcucXVvdGVDaGFyfHwnXCInO2lmKGcubmV3bGluZXx8KGcubmV3bGluZT1mdW5jdGlvbihlLHQpe2U9ZS5zdWJzdHIoMCwxMDQ4NTc2KTt2YXIgcj1uZXcgUmVnRXhwKE0odCkrXCIoW15dKj8pXCIrTSh0KSxcImdtXCIpLGk9KGU9ZS5yZXBsYWNlKHIsXCJcIikpLnNwbGl0KFwiXFxyXCIpLG49ZS5zcGxpdChcIlxcblwiKSxzPTE8bi5sZW5ndGgmJm5bMF0ubGVuZ3RoPGlbMF0ubGVuZ3RoO2lmKDE9PT1pLmxlbmd0aHx8cylyZXR1cm5cIlxcblwiO2Zvcih2YXIgYT0wLG89MDtvPGkubGVuZ3RoO28rKylcIlxcblwiPT09aVtvXVswXSYmYSsrO3JldHVybiBhPj1pLmxlbmd0aC8yP1wiXFxyXFxuXCI6XCJcXHJcIn0oZSxpKSksaD0hMSxnLmRlbGltaXRlcil6KGcuZGVsaW1pdGVyKSYmKGcuZGVsaW1pdGVyPWcuZGVsaW1pdGVyKGUpLGQubWV0YS5kZWxpbWl0ZXI9Zy5kZWxpbWl0ZXIpO2Vsc2V7dmFyIG49ZnVuY3Rpb24oZSx0LHIsaSl7Zm9yKHZhciBuLHMsYSxvPVtcIixcIixcIlxcdFwiLFwifFwiLFwiO1wiLGsuUkVDT1JEX1NFUCxrLlVOSVRfU0VQXSxoPTA7aDxvLmxlbmd0aDtoKyspe3ZhciB1PW9baF0sZj0wLGQ9MCxsPTA7YT12b2lkIDA7Zm9yKHZhciBjPW5ldyB2KHtjb21tZW50czppLGRlbGltaXRlcjp1LG5ld2xpbmU6dCxwcmV2aWV3OjEwfSkucGFyc2UoZSkscD0wO3A8Yy5kYXRhLmxlbmd0aDtwKyspaWYociYmbShjLmRhdGFbcF0pKWwrKztlbHNle3ZhciBfPWMuZGF0YVtwXS5sZW5ndGg7ZCs9Xyx2b2lkIDAhPT1hPzE8XyYmKGYrPU1hdGguYWJzKF8tYSksYT1fKTphPTB9MDxjLmRhdGEubGVuZ3RoJiYoZC89Yy5kYXRhLmxlbmd0aC1sKSwodm9pZCAwPT09c3x8czxmKSYmMS45OTxkJiYocz1mLG49dSl9cmV0dXJue3N1Y2Nlc3NmdWw6ISEoZy5kZWxpbWl0ZXI9biksYmVzdERlbGltaXRlcjpufX0oZSxnLm5ld2xpbmUsZy5za2lwRW1wdHlMaW5lcyxnLmNvbW1lbnRzKTtuLnN1Y2Nlc3NmdWw/Zy5kZWxpbWl0ZXI9bi5iZXN0RGVsaW1pdGVyOihoPSEwLGcuZGVsaW1pdGVyPWsuRGVmYXVsdERlbGltaXRlciksZC5tZXRhLmRlbGltaXRlcj1nLmRlbGltaXRlcn12YXIgcz1FKGcpO3JldHVybiBnLnByZXZpZXcmJmcuaGVhZGVyJiZzLnByZXZpZXcrKyxhPWUsbz1uZXcgdihzKSxkPW8ucGFyc2UoYSx0LHIpLGMoKSx1P3ttZXRhOntwYXVzZWQ6ITB9fTpkfHx7bWV0YTp7cGF1c2VkOiExfX19LHRoaXMucGF1c2VkPWZ1bmN0aW9uKCl7cmV0dXJuIHV9LHRoaXMucGF1c2U9ZnVuY3Rpb24oKXt1PSEwLG8uYWJvcnQoKSxhPWEuc3Vic3RyKG8uZ2V0Q2hhckluZGV4KCkpfSx0aGlzLnJlc3VtZT1mdW5jdGlvbigpe3U9ITEsdC5zdHJlYW1lci5wYXJzZUNodW5rKGEsITApfSx0aGlzLmFib3J0ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZX0sdGhpcy5hYm9ydD1mdW5jdGlvbigpe2U9ITAsby5hYm9ydCgpLGQubWV0YS5hYm9ydGVkPSEwLHooZy5jb21wbGV0ZSkmJmcuY29tcGxldGUoZCksYT1cIlwifX1mdW5jdGlvbiBNKGUpe3JldHVybiBlLnJlcGxhY2UoL1suKis/XiR7fSgpfFtcXF1cXFxcXS9nLFwiXFxcXCQmXCIpfWZ1bmN0aW9uIHYoZSl7dmFyIFMsTz0oZT1lfHx7fSkuZGVsaW1pdGVyLHg9ZS5uZXdsaW5lLFQ9ZS5jb21tZW50cyxJPWUuc3RlcCxBPWUucHJldmlldyxEPWUuZmFzdE1vZGUsTD1TPXZvaWQgMD09PWUucXVvdGVDaGFyPydcIic6ZS5xdW90ZUNoYXI7aWYodm9pZCAwIT09ZS5lc2NhcGVDaGFyJiYoTD1lLmVzY2FwZUNoYXIpLChcInN0cmluZ1wiIT10eXBlb2YgT3x8LTE8ay5CQURfREVMSU1JVEVSUy5pbmRleE9mKE8pKSYmKE89XCIsXCIpLFQ9PT1PKXRocm93XCJDb21tZW50IGNoYXJhY3RlciBzYW1lIGFzIGRlbGltaXRlclwiOyEwPT09VD9UPVwiI1wiOihcInN0cmluZ1wiIT10eXBlb2YgVHx8LTE8ay5CQURfREVMSU1JVEVSUy5pbmRleE9mKFQpKSYmKFQ9ITEpLFwiXFxuXCIhPT14JiZcIlxcclwiIT09eCYmXCJcXHJcXG5cIiE9PXgmJih4PVwiXFxuXCIpO3ZhciBQPTAsRj0hMTt0aGlzLnBhcnNlPWZ1bmN0aW9uKGksdCxyKXtpZihcInN0cmluZ1wiIT10eXBlb2YgaSl0aHJvd1wiSW5wdXQgbXVzdCBiZSBhIHN0cmluZ1wiO3ZhciBuPWkubGVuZ3RoLGU9Ty5sZW5ndGgscz14Lmxlbmd0aCxhPVQubGVuZ3RoLG89eihJKSxoPVtdLHU9W10sZj1bXSxkPVA9MDtpZighaSlyZXR1cm4gQygpO2lmKER8fCExIT09RCYmLTE9PT1pLmluZGV4T2YoUykpe2Zvcih2YXIgbD1pLnNwbGl0KHgpLGM9MDtjPGwubGVuZ3RoO2MrKyl7aWYoZj1sW2NdLFArPWYubGVuZ3RoLGMhPT1sLmxlbmd0aC0xKVArPXgubGVuZ3RoO2Vsc2UgaWYocilyZXR1cm4gQygpO2lmKCFUfHxmLnN1YnN0cigwLGEpIT09VCl7aWYobyl7aWYoaD1bXSxrKGYuc3BsaXQoTykpLFIoKSxGKXJldHVybiBDKCl9ZWxzZSBrKGYuc3BsaXQoTykpO2lmKEEmJkE8PWMpcmV0dXJuIGg9aC5zbGljZSgwLEEpLEMoITApfX1yZXR1cm4gQygpfWZvcih2YXIgcCxfPWkuaW5kZXhPZihPLFApLGc9aS5pbmRleE9mKHgsUCksbT1uZXcgUmVnRXhwKE0oTCkrTShTKSxcImdcIik7OylpZihpW1BdIT09UylpZihUJiYwPT09Zi5sZW5ndGgmJmkuc3Vic3RyKFAsYSk9PT1UKXtpZigtMT09PWcpcmV0dXJuIEMoKTtQPWcrcyxnPWkuaW5kZXhPZih4LFApLF89aS5pbmRleE9mKE8sUCl9ZWxzZSBpZigtMSE9PV8mJihfPGd8fC0xPT09ZykpZi5wdXNoKGkuc3Vic3RyaW5nKFAsXykpLFA9XytlLF89aS5pbmRleE9mKE8sUCk7ZWxzZXtpZigtMT09PWcpYnJlYWs7aWYoZi5wdXNoKGkuc3Vic3RyaW5nKFAsZykpLHcoZytzKSxvJiYoUigpLEYpKXJldHVybiBDKCk7aWYoQSYmaC5sZW5ndGg+PUEpcmV0dXJuIEMoITApfWVsc2UgZm9yKHA9UCxQKys7Oyl7aWYoLTE9PT0ocD1pLmluZGV4T2YoUyxwKzEpKSlyZXR1cm4gcnx8dS5wdXNoKHt0eXBlOlwiUXVvdGVzXCIsY29kZTpcIk1pc3NpbmdRdW90ZXNcIixtZXNzYWdlOlwiUXVvdGVkIGZpZWxkIHVudGVybWluYXRlZFwiLHJvdzpoLmxlbmd0aCxpbmRleDpQfSksRSgpO2lmKHA9PT1uLTEpcmV0dXJuIEUoaS5zdWJzdHJpbmcoUCxwKS5yZXBsYWNlKG0sUykpO2lmKFMhPT1MfHxpW3ArMV0hPT1MKXtpZihTPT09THx8MD09PXB8fGlbcC0xXSE9PUwpe3ZhciB5PWIoLTE9PT1nP186TWF0aC5taW4oXyxnKSk7aWYoaVtwKzEreV09PT1PKXtmLnB1c2goaS5zdWJzdHJpbmcoUCxwKS5yZXBsYWNlKG0sUykpLFA9cCsxK3krZSxfPWkuaW5kZXhPZihPLFApLGc9aS5pbmRleE9mKHgsUCk7YnJlYWt9dmFyIHY9YihnKTtpZihpLnN1YnN0cihwKzErdixzKT09PXgpe2lmKGYucHVzaChpLnN1YnN0cmluZyhQLHApLnJlcGxhY2UobSxTKSksdyhwKzErditzKSxfPWkuaW5kZXhPZihPLFApLG8mJihSKCksRikpcmV0dXJuIEMoKTtpZihBJiZoLmxlbmd0aD49QSlyZXR1cm4gQyghMCk7YnJlYWt9dS5wdXNoKHt0eXBlOlwiUXVvdGVzXCIsY29kZTpcIkludmFsaWRRdW90ZXNcIixtZXNzYWdlOlwiVHJhaWxpbmcgcXVvdGUgb24gcXVvdGVkIGZpZWxkIGlzIG1hbGZvcm1lZFwiLHJvdzpoLmxlbmd0aCxpbmRleDpQfSkscCsrfX1lbHNlIHArK31yZXR1cm4gRSgpO2Z1bmN0aW9uIGsoZSl7aC5wdXNoKGUpLGQ9UH1mdW5jdGlvbiBiKGUpe3ZhciB0PTA7aWYoLTEhPT1lKXt2YXIgcj1pLnN1YnN0cmluZyhwKzEsZSk7ciYmXCJcIj09PXIudHJpbSgpJiYodD1yLmxlbmd0aCl9cmV0dXJuIHR9ZnVuY3Rpb24gRShlKXtyZXR1cm4gcnx8KHZvaWQgMD09PWUmJihlPWkuc3Vic3RyKFApKSxmLnB1c2goZSksUD1uLGsoZiksbyYmUigpKSxDKCl9ZnVuY3Rpb24gdyhlKXtQPWUsayhmKSxmPVtdLGc9aS5pbmRleE9mKHgsUCl9ZnVuY3Rpb24gQyhlKXtyZXR1cm57ZGF0YTpoLGVycm9yczp1LG1ldGE6e2RlbGltaXRlcjpPLGxpbmVicmVhazp4LGFib3J0ZWQ6Rix0cnVuY2F0ZWQ6ISFlLGN1cnNvcjpkKyh0fHwwKX19fWZ1bmN0aW9uIFIoKXtJKEMoKSksaD1bXSx1PVtdfX0sdGhpcy5hYm9ydD1mdW5jdGlvbigpe0Y9ITB9LHRoaXMuZ2V0Q2hhckluZGV4PWZ1bmN0aW9uKCl7cmV0dXJuIFB9fWZ1bmN0aW9uIG0oZSl7dmFyIHQ9ZS5kYXRhLHI9aFt0LndvcmtlcklkXSxpPSExO2lmKHQuZXJyb3Ipci51c2VyRXJyb3IodC5lcnJvcix0LmZpbGUpO2Vsc2UgaWYodC5yZXN1bHRzJiZ0LnJlc3VsdHMuZGF0YSl7dmFyIG49e2Fib3J0OmZ1bmN0aW9uKCl7aT0hMCx5KHQud29ya2VySWQse2RhdGE6W10sZXJyb3JzOltdLG1ldGE6e2Fib3J0ZWQ6ITB9fSl9LHBhdXNlOmIscmVzdW1lOmJ9O2lmKHooci51c2VyU3RlcCkpe2Zvcih2YXIgcz0wO3M8dC5yZXN1bHRzLmRhdGEubGVuZ3RoJiYoci51c2VyU3RlcCh7ZGF0YTpbdC5yZXN1bHRzLmRhdGFbc11dLGVycm9yczp0LnJlc3VsdHMuZXJyb3JzLG1ldGE6dC5yZXN1bHRzLm1ldGF9LG4pLCFpKTtzKyspO2RlbGV0ZSB0LnJlc3VsdHN9ZWxzZSB6KHIudXNlckNodW5rKSYmKHIudXNlckNodW5rKHQucmVzdWx0cyxuLHQuZmlsZSksZGVsZXRlIHQucmVzdWx0cyl9dC5maW5pc2hlZCYmIWkmJnkodC53b3JrZXJJZCx0LnJlc3VsdHMpfWZ1bmN0aW9uIHkoZSx0KXt2YXIgcj1oW2VdO3ooci51c2VyQ29tcGxldGUpJiZyLnVzZXJDb21wbGV0ZSh0KSxyLnRlcm1pbmF0ZSgpLGRlbGV0ZSBoW2VdfWZ1bmN0aW9uIGIoKXt0aHJvd1wiTm90IGltcGxlbWVudGVkLlwifWZ1bmN0aW9uIEUoZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXJldHVybiBlO3ZhciB0PUFycmF5LmlzQXJyYXkoZSk/W106e307Zm9yKHZhciByIGluIGUpdFtyXT1FKGVbcl0pO3JldHVybiB0fWZ1bmN0aW9uIHcoZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtlLmFwcGx5KHQsYXJndW1lbnRzKX19ZnVuY3Rpb24geihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfXJldHVybiBvP2Yub25tZXNzYWdlPWZ1bmN0aW9uKGUpe3ZhciB0PWUuZGF0YTt2b2lkIDA9PT1rLldPUktFUl9JRCYmdCYmKGsuV09SS0VSX0lEPXQud29ya2VySWQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0LmlucHV0KWYucG9zdE1lc3NhZ2Uoe3dvcmtlcklkOmsuV09SS0VSX0lELHJlc3VsdHM6ay5wYXJzZSh0LmlucHV0LHQuY29uZmlnKSxmaW5pc2hlZDohMH0pO2Vsc2UgaWYoZi5GaWxlJiZ0LmlucHV0IGluc3RhbmNlb2YgRmlsZXx8dC5pbnB1dCBpbnN0YW5jZW9mIE9iamVjdCl7dmFyIHI9ay5wYXJzZSh0LmlucHV0LHQuY29uZmlnKTtyJiZmLnBvc3RNZXNzYWdlKHt3b3JrZXJJZDprLldPUktFUl9JRCxyZXN1bHRzOnIsZmluaXNoZWQ6ITB9KX19OmsuV09SS0VSU19TVVBQT1JURUQmJihlPWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpLHM9ZS5sZW5ndGg/ZVtlLmxlbmd0aC0xXS5zcmM6XCJcIixkb2N1bWVudC5ib2R5P2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsZnVuY3Rpb24oKXthPSEwfSwhMCk6YT0hMCksKGMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobC5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1jLChwLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSkuY29uc3RydWN0b3I9cCwoXy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShfLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPV8sKGcucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobC5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1nLGt9KTsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJkYXRhL2FieC1kYXRhLmNzdj92PTNkNDU5MlwiOyIsImltcG9ydCB7IERPTUhlbHBlcnMgYXMgJGQgfSBmcm9tICdAVXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIG9wdGlvbnMpe1xuICAgICAgICBpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycgKXtcbiAgICAgICAgICAgIHRocm93IGBGaXJzdCBwYXJhbWV0ZXIgbXVzdCBiZSBhIHN0cmluZyByZWZlcmVuY2luZyB0aGUgQ1NTLWxpa2Ugc2VsZWN0b3Igb2YgdGhlIGVsZW1lbnQgdG8gYmUgY3JlYXRlZCBcbiAgICAgICAgICAgICAgICAgICAgKFwiZGl2I2RpdklELmRpdkNsYXNzXCIpLmA7XG4gICAgICAgIH0gXG4gICAgICAgIHRoaXMuc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgICAgIHRoaXMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7IC8vIHBhcmVudCBpcyBhIEpTIG9iamVjdFxuICAgICAgICB0aGlzLnJlbmRlclRvU2VsZWN0b3IgPSBvcHRpb25zLnJlbmRlclRvU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gJGQucSh0aGlzLnJlbmRlclRvU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gb3B0aW9ucy5jaGlsZHJlbjtcbiAgICAgICAgdGhpcy5yZXJlbmRlciA9ICggb3B0aW9ucy5yZXJlbmRlck9uRGF0YU1pc21hdGNoICYmIG9wdGlvbnMubW9kZWwuaXNNaXNtYXRjaGVkICk7XG4gICAgICAgIHRoaXMuZGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZWwgPSB0aGlzLnByZXJlbmRlcihhcmd1bWVudHMpOyAvLyB3aWxsIGNhbGwgdGhlIGluc3RhbmNlJ3MgcHJlcmVuZGVyXG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgIH1cbiAgICBwcmVyZW5kZXIoKXtcbiAgICAgICAgXG4gICAgICAgIHZhciBleGlzdGluZyA9ICRkLnEodGhpcy5zZWxlY3Rvcik7XG4gICAgICAgIGlmICggZXhpc3RpbmcgJiYgIXRoaXMucmVyZW5kZXIgKSB7XG4gICAgICAgICAgICAgICAgLy8gaWUgaXMgZXhpc3RpbmcgYW5kIG5vIG5lZWQgdG8gcmVyZW5kZXJcbiAgICAgICAgICAgIHRoaXMucHJlcmVuZGVyZWQgPSB0cnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoIGV4aXN0aW5nICkgeyAvLyBpZSBpcyBleGlzdGluZyBidXQgdGhlcmUgaXMgYSBuZWVkIHRvIHJlcmVuZGVyXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4aXN0aW5nLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbCA9ICRkLmModGhpcy5zZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9XG4gICAgaW5pdCgpe1xuICAgICAgICBcbiAgICB9XG59IiwidmFyIGhhc2ggPSByZXF1aXJlKFwic3RyaW5nLWhhc2hcIik7XG52YXIgUHViU3ViID0gcmVxdWlyZShcInB1YnN1Yi1qc1wiKTtcbnZhciBzdWJzY3JpcHRpb25zID0ge307XG5mdW5jdGlvbiBsb2dTdWJzKCkge1xuICAgIGNvbnNvbGUubG9nKHN1YnNjcmlwdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUb2tlbih0b3BpYywgZm5SZWYpe1xuICAgIHZhciBmdW5jdGlvbkhhc2ggPSBoYXNoKGZuUmVmLnRvU3RyaW5nKCkpO1xuICAgIHZhciBzdHIgPSB0b3BpYyArIGZuUmVmO1xuICAgIHZhciB0b2tlbiA9ICdzdWInICsgaGFzaChzdHIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHRva2VuOiB0b2tlbixcbiAgICAgICAgZm46IGZ1bmN0aW9uSGFzaFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHNldFN1YnMoc3Vic0FycmF5KSB7IC8vIHN1YnNBcnJheSBpcyBhcnJheSBvZiB0b3BpYy9mdW5jdGlvbiBwYWlyIGFycmF5c1xuICAgIHN1YnNBcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHBhaXIpe1xuICAgICAgICB2YXIgdG9waWMgPSBwYWlyWzBdLFxuICAgICAgICAgICAgZm5SZWYgPSBwYWlyWzFdLFxuICAgICAgICAgICAgdG9rZW5PYmogPSBjcmVhdGVUb2tlbih0b3BpYyxmblJlZik7XG4gICAgICAgIFxuICAgICAgICBpZiAoIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICggc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl1bdG9waWNdID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXVt0b3BpY10gPSBQdWJTdWIuc3Vic2NyaWJlKHRvcGljLGZuUmVmKTsgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgJ1N1YnNjcmlwdGlvbiB0b2tlbiBpcyBhbHJlYWR5IGluIHVzZS4nO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNhbmNlbFN1Yih0b3BpYyxmblJlZikgeyAvLyBmb3IgY2FuY2VsaW5nIHNpbmdsZSBzdWJzY3JpcHRpb25cbiAgICB2YXIgdG9rZW5PYmogPSBjcmVhdGVUb2tlbih0b3BpYyxmblJlZik7XG4gICAgaWYgKCBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSAhPT0gdW5kZWZpbmVkICYmIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXSAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICBQdWJTdWIudW5zdWJzY3JpYmUoIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXSApO1xuICAgICAgICBkZWxldGUgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl1bdG9waWNdO1xuICAgICAgICBpZiAoIE9iamVjdC5rZXlzKHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dKS5sZW5ndGggPT09IDAgKSB7XG4gICAgICAgICAgICBkZWxldGUgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl07XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyAnU3Vic2NyaXB0aW9uIGRvZXMgbm90IGV4aXN0Lic7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBsb2dTdWJzOmxvZ1N1YnMsXG4gICAgc2V0U3ViczpzZXRTdWJzLFxuICAgIGNhbmNlbFN1YjpjYW5jZWxTdWJcbn07IiwiaW1wb3J0IFJvdXRlciBmcm9tICdAUm91dGVyJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBDVEFwcCB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKXtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgICAgICAgIHRoaXNbb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXQocm91dGVyT3B0aW9ucyl7XG4gICAgICAgIGlmICggdGhpcy5uZWVkc1JvdXRlciApeyAvLyBjb21lcyBmcm9tIG9wdGlvbnMgb2JqZWN0XG4gICAgICAgICAgICB0aGlzLnJvdXRlciA9IG5ldyBSb3V0ZXIoKTtcbiAgICAgICAgICAgIHRoaXMucm91dGVyLmluaXQocm91dGVyT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNhYmxlSG92ZXJPblRvdWNoKCk7XG4gICAgfVxuICAgIGRpc2FibGVIb3Zlck9uVG91Y2goKXtcbiAgICAvLyBIVDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMwMzAzODk4XG4gICAgICAgIHZhciBoYXNIb3ZlckNsYXNzID0gZmFsc2U7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICB2YXIgbGFzdFRvdWNoVGltZSA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gZW5hYmxlSG92ZXIoKSB7XG4gICAgICAgICAgICAvLyBmaWx0ZXIgZW11bGF0ZWQgZXZlbnRzIGNvbWluZyBmcm9tIHRvdWNoIGV2ZW50c1xuICAgICAgICAgICAgaWYgKG5ldyBEYXRlKCkgLSBsYXN0VG91Y2hUaW1lIDwgNTAwKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoaGFzSG92ZXJDbGFzcykgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaGFzLWhvdmVyJyk7XG4gICAgICAgICAgICBoYXNIb3ZlckNsYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRpc2FibGVIb3ZlcigpIHtcbiAgICAgICAgICAgIGlmICghaGFzSG92ZXJDbGFzcykgcmV0dXJuO1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1ob3ZlcicpO1xuICAgICAgICAgICAgaGFzSG92ZXJDbGFzcyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTGFzdFRvdWNoVGltZSgpIHtcbiAgICAgICAgICAgIGxhc3RUb3VjaFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHVwZGF0ZUxhc3RUb3VjaFRpbWUsIHRydWUpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZGlzYWJsZUhvdmVyLCB0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZW5hYmxlSG92ZXIsIHRydWUpO1xuXG4gICAgICAgIGVuYWJsZUhvdmVyKCk7XG4gICAgfVxuICAgIGNyZWF0ZUNvbXBvbmVudChtb2RlbCwgY29tcG9uZW50LCBzZWxlY3RvciwgX29wdGlvbnMpeyBcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIF9vcHRpb25zICE9PSBudWxsICYmIHR5cGVvZiBfb3B0aW9ucyA9PT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIGZvciAoIGxldCBrZXkgaW4gX29wdGlvbnMgKXtcbiAgICAgICAgICAgICAgICBpZiAoIF9vcHRpb25zLmhhc093blByb3BlcnR5KGtleSkgKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gX29wdGlvbnNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgY29tcG9uZW50KHNlbGVjdG9yLCBvcHRpb25zKTtcbiAgICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzZWN0aW9uIGlkPVxcXCJpbnRyb1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImpzLWlubmVyLWNvbnRlbnRcXFwiPlxcbiAgICA8L2Rpdj5cXG48L3NlY3Rpb24+XFxuPHNlY3Rpb24gaWQ9XFxcInNlY3Rpb24tY29tcGFyaXNvblxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImpzLWlubmVyLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgPGgyPkFudGliaW90aWNzIGluIERldmVsb3BtZW50IFNpbmNlIDIwMTQ8L2gyPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiYWJ4LWxlZ2VuZFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYWJ4LWxlZ2VuZC0td3JhcHBlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXCJhYngtbGVnZW5kLS1pdGVtIGFieC1sZWdlbmQtLWl0ZW0tLWFieFxcXCI+QW50aWJpb3RpYzwvcD5cXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcImFieC1sZWdlbmQtLWl0ZW0gYWJ4LWxlZ2VuZC0taXRlbS0tdXJnZW50XFxcIj5Qb3RlbnRpYWwgdG8gdHJlYXQgQ0RDIHVyZ2VudCBwYXRob2dlbjwvcD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhYngtbGVnZW5kLS13cmFwcGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcImFieC1sZWdlbmQtLWl0ZW0gYWJ4LWxlZ2VuZC0taXRlbS0tbm92ZWxcXFwiPk5vdmVsIGFudGliaW90aWNzPC9wPlxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwiYWJ4LWxlZ2VuZC0taXRlbSBhYngtbGVnZW5kLS1pdGVtLS1ncmFtXFxcIj5Qb3RlbnRpYWwgdG8gdHJlYXQgR3JhbS1uZWdhdGl2ZSBiYWN0ZXJpYTwvcD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBpZD1cXFwiYWJ4LXZpc3VhbGl6YXRpb25cXFwiPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGlkPVxcXCJhYngtdG90YWxzXFxcIj5cXG4gICAgICAgICAgICA8cD5Ub3RhbCBhcHByb3ZlZCBhbnRpYmlvdGljcyBzaW5jZSAyMDE0IC8gPHNwYW4gaWQ9XFxcInRvdGFsLWFwcHJvdmVkXFxcIiBjbGFzcz1cXFwidG90YWwtc3BhblxcXCI+PC9zcGFuPjwvcD5cXG4gICAgICAgICAgICA8cD5Ub3RhbCBkaXNjb250aW51ZWQgYW50aWJpb3RpY3Mgc2luY2UgMjAxNCAvIDxzcGFuIGlkPVxcXCJ0b3RhbC1kaXNjb250aW51ZWRcXFwiIGNsYXNzPVxcXCJ0b3RhbC1zcGFuXFxcIj48L3NwYW4+PC9wPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2Plxcbjwvc2VjdGlvbj5cXG48ZGl2IGlkPVxcXCJhYngtbm90ZXNcXFwiPjwvZGl2Plxcbjxmb290ZXIgY2xhc3M9XFxcImRvd25sb2FkLXJlc291cmNlc1xcXCI+XFxuICAgIDxkaXY+XFxuICAgICAgICA8cD48c3Ryb25nPkRvd25sb2FkIHJlc291cmNlczo8L3N0cm9uZz5cXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFwicGN0LWRvd25sb2FkXFxcIiBocmVmPVxcXCJcXFwiPk1ldGhvZG9sb2d5PC9hPlxcbiAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJwY3QtZG93bmxvYWRcXFwiIGhyZWY9XFxcIlxcXCI+UmVwb3J0PC9hPlxcbiAgICAgICAgPC9wPlxcbiAgICA8L2Rpdj5cXG48L2Zvb3Rlcj5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGgyIGlkPVxcXCJhbnRpYmlvdGljLWlubm92YXRpb25cXFwiPkFudGliaW90aWMgSW5ub3ZhdGlvbjwvaDI+XFxuPHA+VGhlIFBldyBDaGFyaXRhYmxlIFRydXN0cyBoYXMgdHJhY2tlZCB0aGUgcGlwZWxpbmUgb2YgYW50aWJpb3RpY3MgaW4gY2xpbmljYWwgZGV2ZWxvcG1lbnQgc2luY2UgMjAxNCBhbmQgaGFzIGFnZ3JlZ2F0ZWQgdGhlXFxudXBkYXRlcyBpbnRvIGFuIGludGVyYWN0aXZlIHRvb2wgdGhhdCBpbGx1c3RyYXRlcyB0cmVuZHMgaW4gdGhlIHBpcGVsaW5lLiBUaGlzIGxvbmdpdHVkaW5hbCBkYXRhIHZpc3VhbGl6YXRpb24gdW5kZXJzY29yZXMgdGhlIGxvbmdzdGFuZGluZyBjb25jZXJucyBvZiBzY2llbnRpc3RzLCBkb2N0b3JzLCBwdWJsaWMgaGVhbHRoIG9mZmljaWFscywgYW5kIG90aGVyIHN0YWtlaG9sZGVycyByZWdhcmRpbmcgdGhlIGRhbmdlcm91c2x5IGxvdyBudW1iZXIgb2YgYW50aWJpb3RpY3MgaW4gZGV2ZWxvcG1lbnQgdG8gYWRkcmVzcyBjdXJyZW50IGFuZCBmdXR1cmUgcGF0aWVudCBuZWVkcywgcGFydGljdWxhcmx5IGZvciB0cmVhdGluZyB0aGUgbW9zdCB1cmdlbnQgYmFjdGVyaWFsIHRocmVhdHMsIHN1Y2ggYXMgR3JhbS1uZWdhdGl2ZSBwYXRob2dlbnMuPC9wPlxcbjxwPkNsaWNrIHRoZSBwbGF5IGJ1dHRvbiB0byBzZWUgdGhlIGV2b2x1dGlvbiBvZiB0aGUgYW50aWJpb3RpYyBwaXBlbGluZSBzaW5jZSAyMDE0LCBvciBjbGljayBvbiBhbiBpbmRpdmlkdWFsIHllYXIgdG8gc2VlIHRoZSBzdGF0dXMgb2YgdGhlIHBpcGVsaW5lIGF0IGEgcGFydGljdWxhciBwb2ludCBpbiB0aW1lLiBUbyBzZWUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCBlYWNoIGRydWcsIGhvdmVyIG92ZXIgYW55IG9mIHRoZSBbcmVjdGFuZ2xlc10uPC9wPlxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8cD48c3Ryb25nPk5vdGVzOjwvc3Ryb25nPiBDbGluaWNhbCBjYW5kaWRhdGVzIGluY2x1ZGVkIGluIHRoaXMgZGF0YSB2aXN1YWxpemF0aW9uIGFyZSBjb25zaXN0ZW50IHdpdGggUGV34oCZcyBtZXRob2RvbG9neSBmb3IgdHJhY2tpbmcgYW50aWJpb3RpY3MgaW4gY2xpbmljYWwgZGV2ZWxvcG1lbnQuIE1vcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG1ldGhvZHMgYW5kIHRoZSBmdWxsIHVuZGVybHlpbmcgZGF0YSBjYW4gYmUgZm91bmQgaW4gdGhlIGxhdGVzdCBhbmFseXNpcyBvZiB0aGUgcGlwZWxpbmUuIFBld+KAmXMgdXBkYXRlcyBhcmUgY29uZHVjdGVkIHNlbWlhbm51YWxseSwgZXhjZXB0IGZvciAyMDE0LCB3aGVuIHRoZXkgd2VyZSBwdWJsaXNoZWQgcXVhcnRlcmx5LCBhbmQgMjAxOCwgd2hlbiBhIHRpbWVsaW5lIGFkanVzdG1lbnQgcmVzdWx0ZWQgaW4ganVzdCBvbmUgdXBkYXRlIGZvciB0aGUgeWVhci48L3A+XFxuXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gIHZhciBoYXNoID0gNTM4MSxcbiAgICAgIGkgICAgPSBzdHIubGVuZ3RoO1xuXG4gIHdoaWxlKGkpIHtcbiAgICBoYXNoID0gKGhhc2ggKiAzMykgXiBzdHIuY2hhckNvZGVBdCgtLWkpO1xuICB9XG5cbiAgLyogSmF2YVNjcmlwdCBkb2VzIGJpdHdpc2Ugb3BlcmF0aW9ucyAobGlrZSBYT1IsIGFib3ZlKSBvbiAzMi1iaXQgc2lnbmVkXG4gICAqIGludGVnZXJzLiBTaW5jZSB3ZSB3YW50IHRoZSByZXN1bHRzIHRvIGJlIGFsd2F5cyBwb3NpdGl2ZSwgY29udmVydCB0aGVcbiAgICogc2lnbmVkIGludCB0byBhbiB1bnNpZ25lZCBieSBkb2luZyBhbiB1bnNpZ25lZCBiaXRzaGlmdC4gKi9cbiAgcmV0dXJuIGhhc2ggPj4+IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaDtcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlciB7IC8vIHRoaXMgY291bGQgYmUgaW50ZWdyYXRlZCB3aXRoIHN0YXRlZnVsIGRlYWRcbiAgICAvKlxuICAgIFJvdXRlciBvZmZlcnMgYmFzaWMgc2hhcmVkIGZ1bmN0aW9ucyBmb3IgYWxsIHJvdXRlcnMuIE1ldGhvZHMgZm9yIHVwZGF0aW5nICBoaXN0b3J5IHN0YXRlIGFuZCB1cGRhdGluZyB0aGUgaGFzaCB1cmwuIEFycmF5IG9mIHN1YnNjcmlwdGlvbnNcbiAgICB0aGF0IGFmZmVjdCB0aGUgdXJsIGlzIHBhc3NlZCBpbi4gVGhlIFB1YlN1YiBtb2R1bGUgaXMgcGFzc2VkIGluLiBzZXRIYXNoIGFuZCBkZWNvZGVIYXNoIGZ1bmN0aW9ucyBhcmUgcGFzc2VkIGluIGJjIHRoZXkgd2lsbCBiZSBkaWZmXG4gICAgZm9yIGVhY2ggYXBwLiB2aWV3cyBhcmUgcGFzc2VkIGluIHNvIHRoYXQgdGhlIHJlc29sdXRpb25zIG9mIHRoZWlyIHByb21pc2VzIGNhbiBiZSB0cmFja2VkIGFuZCBhY3RlZCB1cG9uIChpZSByb3V0ZXIgZGVjb2RlcyBvbmx5IGFmdGVyIFxuICAgIGFsbCB2aWV3cyBhcmUgcmVhZHkpXG4gICAgKi9cbiAgICBpbml0KHJvdXRlck9wdGlvbnMpe1xuICAgICAgICBcbiAgICAgICAgaWYgKCByb3V0ZXJPcHRpb25zID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHJvdXRlck9wdGlvbnMgIT09ICdvYmplY3QnICl7XG4gICAgICAgICAgICB0aHJvdyAncm91dGVyLmluaXQgbWV0aG9kIHJlcXVpcmVzIGEgY29uZmlnIG9iamVjdCBhcyBwYXJhbWV0ZXIgMSdcbiAgICAgICAgfVxuICAgICAgICBpZiAoIHR5cGVvZiByb3V0ZXJPcHRpb25zLmVuY29kZSAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2Ygcm91dGVyT3B0aW9ucy5kZWNvZGUgIT09ICdmdW5jdGlvbicgfHwgIUFycmF5LmlzQXJyYXkocm91dGVyT3B0aW9ucy52aWV3cykgfHwgdHlwZW9mIHJvdXRlck9wdGlvbnMuUFMgIT09ICdvYmplY3QnICl7XG4gICAgICAgICAgICB0aHJvdyAncm91dGVyT3B0aW9ucyBvYmplY3QgbmVlZHMgZW5jb2RlLCBkZWNvZGUsIHZpZXdzLCBhbmQgUFMgcHJvcGVydGllcy4gZW5jb2RlIGFuZCBkZWNvZGUgbXVzdCBiZSBmdW5jdGlvbnM7IHZpZXdzIGlzIGFuIGFycmF5IG9mIHZpZXdzIGZyb20gdGhlIGFwcDsgUFMgbmVlZHMgdG8gYmUgdGhlIFB1YlN1YiBzZXR0ZXIuJ1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGVPYmogPSB7fTtcbiAgICAgICAgdGhpcy5oYXNoU3RhdGUgPSByb3V0ZXJPcHRpb25zLmVuY29kZTtcbiAgICAgICAgdGhpcy5kZWNvZGVIYXNoID0gcm91dGVyT3B0aW9ucy5kZWNvZGU7XG4gICAgICAgIHRoaXMudmlld1Byb21pc2VzID0gcm91dGVyT3B0aW9ucy52aWV3cy5tYXAoZWFjaCA9PiBlYWNoLmlzUmVhZHkpOyAvLyB2aWV3LmlzUmVhZHkgaXMgYSBwcm9taXNlZCByZXNvbHZlZCB0cnVlIGFmdGVyIHRoZSB2aWV3IGlzIHJlbmRlcmVkXG4gICAgICAgIHRoaXMuUFMgPSByb3V0ZXJPcHRpb25zLlBTO1xuICAgICAgICBcbiAgICAgICAgUHJvbWlzZS5hbGwodGhpcy52aWV3UHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLmRlY29kZUhhc2goKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuUFMuc2V0U3Vicyhyb3V0ZXJPcHRpb25zLnN1YnNjcmlwdGlvbnMubWFwKGVhY2ggPT4geyAvLyBzdWJzY3JpcHRpb25zIHRoYXQgbWF0dGVyIGZvciByb3V0ZXIgYXJlIG1hZGUgdG8gdHJpZ2dlciBoYXNoQ2hhbmdlIG1ldGhvZCB3aGVuIHB1Ymxpc2hlZFxuICAgICAgICAgICAgdmFyIGFyciA9IFtlYWNoLCAobXNnLGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc2hDaGFuZ2UuY2FsbCh0aGlzLG1zZyxkYXRhKTtcbiAgICAgICAgICAgIH1dO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGhhc2hDaGFuZ2UobXNnLGRhdGEpe1xuICAgICAgICB0aGlzLnNldFN0YXRlT2JqKG1zZyxkYXRhKTtcbiAgICAgICAgdGhpcy5oYXNoU3RhdGUoKTtcbiAgICAgICAgdGhpcy5yZXBsYWNlU3RhdGUoKTtcbiAgICB9XG4gICAgc2V0U3RhdGVPYmoobXNnLCBkYXRhKXtcbiAgICAgICAgdGhpcy5zdGF0ZU9ialttc2ddID0gZGF0YTtcbiAgICAgICAgXG4gICAgfVxuICAgIHJlcGxhY2VTdGF0ZSgpeyAgICBcbiAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHRoaXMuc3RhdGVPYmosJycsdGhpcy5oYXNoU3RyaW5nKVxuICAgIH1cblxufSIsImltcG9ydCBFbGVtZW50IGZyb20gJ0BVSS9lbGVtZW50JztcbmltcG9ydCBzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuaW1wb3J0IFBTIGZyb20gJ3B1YnN1Yi1zZXR0ZXInO1xuXG5jb25zdCBtaW5Vbml0RGltZW5zaW9uID0gMzA7IC8vIG1pbmltdW0gcHggaGVpZ2h0L3dpZHRoIGFjY2VwdGVkIGZvciB0b3VjaGFibGUgZWxlbWVudFxuY29uc3QgaGVhZGVySGVpZ2h0ID0gMS41ICogbWluVW5pdERpbWVuc2lvbjsgLy8gdGhlIGhlaWdodCBvZiB0aGUgcGhhc2UtaGVhZGluZyBiYXJzIHJlbGF0aXZlIHRvIG1pblVuaXREaW1lbnNpb25cbmNvbnN0IHVuaXRQYWRkaW5nID0gMjtcbmNvbnN0IGhlYWRlcnMgPSBbXG4gICAgWydQaGFzZSAxJywgJ1AxJ10sXG4gICAgWydQaGFzZSAyJywgJ1AyJ10sXG4gICAgWydQaGFzZSAzJywgJ1AzJ10sXG4gICAgWydBcHBsaWNhdGlvbicsICdOREEnXSxcbiAgICBbJ0FwcHJvdmVkJywgJyYjMTAwMDQnXVxuXTtcbmNvbnN0IGR1cmF0aW9uID0gNTAwO1xuXG52YXIgIGlzRmlyc3RMb2FkID0gdHJ1ZTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpelZpZXcgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBwcmVyZW5kZXIoKSB7IC8vIHRoaXMgcHJlcmVuZGVyIGlzIGNhbGxlZCBhcyBwYXJ0IG9mIHRoZSBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAvKiBhbnkgY2hpbGRyZW4gbmVlZCB0byBiZSBpbnN0YXRpYXRlZCBoZXJlICovXG5cbiAgICAgICAgdGhpcy5taW5Vbml0RGltZW5zaW9uID0gbWluVW5pdERpbWVuc2lvbjtcbiAgICAgICAgdGhpcy5oZWFkZXJIZWlnaHQgPSBoZWFkZXJIZWlnaHQ7XG4gICAgICAgIHRoaXMudW5pdFBhZGRpbmcgPSB1bml0UGFkZGluZztcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgICAgdGhpcy5waGFzZU1lbWJlcnMgPSBbMCwxXS5tYXAoKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFswLCAuLi5oZWFkZXJzXS5tYXAoZCA9PiB7IC8vIHdpbGwga2VlcCB0cmFjayBvZiB3aGljaCBkcnVncyBhcmUgaW4gd2hpY2ggY29sdW1uIHNvIHRoYXQgYW5pbWF0aW9ucyBjYW4gYmUgdGltZWQgYW5kIHNvIHRoYXQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkcnVncyB0aGF0IHN0YXkgaW4gdGhlaXIgY29sdW1uIGZyb20gb25lIHN0ZXAgdG8gYW5vdGhlciBjYW4gYmUgcGxhY2VkIGJlZm9yZSB0aG9zZSBlbnRlcmluZyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbHVtblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogZCA9PT0gMCA/IHRoaXMubW9kZWwudW5uZXN0ZWREYXRhLm1hcChkcnVnID0+IGRydWcuaWQpIDogW10sXG4gICAgICAgICAgICAgICAgICAgIGRpc2NvbnRpbnVlZDogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pOyAgIFxuICAgICAgICAgICAgXG4gICAgICAgIHRoaXMuaGVpZ2h0TmVlZGVkID0gKCB0aGlzLm1vZGVsLm1heEFjdGl2ZSArIHRoaXMubW9kZWwubWF4RGlzY29udGludWVkICsgMSApICogKCB0aGlzLm1pblVuaXREaW1lbnNpb24gKyB0aGlzLnVuaXRQYWRkaW5nICkgKyB0aGlzLmhlYWRlckhlaWdodCArIHRoaXMudW5pdFBhZGRpbmcgKyA1MSArIDkwICsgNjEgKyA0MDtcbiAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIHZpZXcgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3OyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cblxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbmRlckNvbHVtbnMoY29udCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgY29sdW1uLmNsYXNzTGlzdC5hZGQocy5jb2x1bW4pO1xuICAgICAgICAgICAgICAgIGxldCBwbGFjZWhvbGRlck51bWJlciA9IGNvbnQubmFtZSA9PT0gcy5hY3RpdmVDb250YWluZXIgPyB0aGlzLm1vZGVsLm1heEFjdGl2ZSA6IHRoaXMubW9kZWwubWF4RGlzY29udGludWVkO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGxhY2Vob2xkZXJOdW1iZXI7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIuY2xhc3NMaXN0LmFkZChzLmRydWcsIHMuZHJ1Z0VtcHR5KTtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmFwcGVuZENoaWxkKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udC5hcHBlbmRDaGlsZChjb2x1bW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29udHJvbHNcbiAgICAgICAgdmFyIGNvbnRyb2xDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udHJvbENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMuY29udHJvbENvbnRhaW5lcik7XG5cbiAgICAgICAgICAgIC8vIHBsYXlCdXR0b25cbiAgICAgICAgICAgIHZhciBwbGF5QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICBwbGF5QnV0dG9uLmNsYXNzTGlzdC5hZGQocy5wbGF5QnV0dG9uKTtcbiAgICAgICAgICAgIHBsYXlCdXR0b24udHlwZSA9IFwiYnV0dG9uXCI7XG4gICAgICAgICAgICBjb250cm9sQ29udGFpbmVyLmFwcGVuZENoaWxkKHBsYXlCdXR0b24pO1xuXG4gICAgICAgICAgICAvL3llYXJzXG4gICAgICAgICAgICB0aGlzLm1vZGVsLnllYXJzLmZvckVhY2goKHllYXIsIGkpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgeWVhckJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgICAgIHllYXJCdXR0b24uY2xhc3NMaXN0LmFkZChzLnllYXJCdXR0b24sIGAkeyBpID09PSAwID8gcy55ZWFyQnV0dG9uQWN0aXZlIDogJ25vcGUnfWApO1xuICAgICAgICAgICAgICAgIHllYXJCdXR0b24udHlwZSA9IFwiYnV0dG9uXCI7XG4gICAgICAgICAgICAgICAgeWVhckJ1dHRvbi52YWx1ZSA9IHllYXI7XG4gICAgICAgICAgICAgICAgeWVhckJ1dHRvbi50ZXh0Q29udGVudCA9IHllYXI7XG4gICAgICAgICAgICAgICAgY29udHJvbENvbnRhaW5lci5hcHBlbmRDaGlsZCh5ZWFyQnV0dG9uKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQoY29udHJvbENvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gY29udGFpbmVyXG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQocy5jb250YWluZXIpO1xuICAgICAgICB2aWV3LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gYWN0aXZlIGNvbnRhaW5lclxuICAgICAgICB2YXIgYWN0aXZlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGFjdGl2ZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMuYWN0aXZlQ29udGFpbmVyKTtcbiAgICAgICAgYWN0aXZlQ29udGFpbmVyLm5hbWUgPSBzLmFjdGl2ZUNvbnRhaW5lcjtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGFjdGl2ZUNvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gaGVhZGVyIGNvbnRhaW5lclxuICAgICAgICB2YXIgaGVhZGVyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGhlYWRlckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMuaGVhZGVyQ29udGFpbmVyKTtcbiAgICAgICAgaGVhZGVyQ29udGFpbmVyLm5hbWUgPSBzLmhlYWRlckNvbnRhaW5lcjtcbiAgICAgICAgaGVhZGVycy5mb3JFYWNoKHBoYXNlID0+IHtcbiAgICAgICAgICAgIHZhciBoZWFkZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGhlYWRlckRpdi5jbGFzc0xpc3QuYWRkKHMuaGVhZGVyRGl2KTtcbiAgICAgICAgICAgIGhlYWRlckRpdi5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3MucGhhc2VGdWxsfVwiPiR7cGhhc2VbMF0udG9VcHBlckNhc2UoKX08L3NwYW4+PHNwYW4gY2xhc3M9XCIke3MucGhhc2VBYmJyfVwiPiR7cGhhc2VbMV19PC9zcGFuPmA7XG4gICAgICAgICAgICBoZWFkZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGVyRGl2KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkZXJDb250YWluZXIpO1xuXG4gICAgICAgIC8vIGRpc2NvbnRpbnVlZCBjb250YWluZXJcbiAgICAgICAgdmFyIGRpc2NvbnRpbnVlZENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkaXNjb250aW51ZWRDb250YWluZXIuY2xhc3NMaXN0LmFkZChzLmRpc2NvbnRpbnVlZENvbnRhaW5lcik7XG4gICAgICAgIGRpc2NvbnRpbnVlZENvbnRhaW5lci5uYW1lID0gcy5kaXNjb250aW51ZWRDb250YWluZXI7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkaXNjb250aW51ZWRDb250YWluZXIpO1xuXG4gICAgICAgIC8vIGNvbHVtbnNcbiAgICAgICAgcmVuZGVyQ29sdW1ucy5jYWxsKHRoaXMsIGFjdGl2ZUNvbnRhaW5lcik7XG4gICAgICAgIHJlbmRlckNvbHVtbnMuY2FsbCh0aGlzLCBkaXNjb250aW51ZWRDb250YWluZXIpO1xuXG5cblxuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG4gICAgcG9wdWxhdGVQbGFjZWhvbGRlcnMoeWVhckluZGV4LCBvYnNlcnZhdGlvbikge1xuICAgICAgICBmdW5jdGlvbiBhZGRJZHNBbmRDbGFzc2VzKHBsYWNlaG9sZGVyLCBkcnVnLCBjb250YWluZXJJbmRleCl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkcnVnKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFwcGVuZERldGFpbHMoKXtcbiAgICAgICAgICAgICAgICB2YXIgZHJhd2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgZHJhd2VyLmNsYXNzTGlzdC5hZGQocy5kZXRhaWxEcmF3ZXIpO1xuICAgICAgICAgICAgICAgIGRyYXdlci5pbm5lckhUTUwgPSBgPHN0cm9uZz4ke2RydWcubmFtZX08L3N0cm9uZz48YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR7ZHJ1Zy5jb21wYW55fSAke2RydWcuaWR9YDtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlci5hcHBlbmRDaGlsZChkcmF3ZXIpOyAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXIuaWQgPSBkcnVnLmlkO1xuICAgICAgICAgICAvLyBwbGFjZWhvbGRlci5pbm5lclRleHQgPSBkcnVnLmlkLnNwbGl0KCctJylbMV07XG4gICAgICAgICAgICBwbGFjZWhvbGRlci5jbGFzc0xpc3QucmVtb3ZlKHMuZHJ1Z0VtcHR5KTtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLmNsYXNzTGlzdC5hZGQoYCR7IGRydWcuZ3JhbU5lZ2F0aXZlID8gcy5ncmFtTmVnYXRpdmUgOiAnbm9wZScgfWAsIGAkeyBkcnVnLm5vdmVsID8gcy5ub3ZlbCA6ICdub3BlJyB9YCwgYCR7IGRydWcudXJnZW50ID8gcy51cmdlbnQgOiAnbm9wZScgfWApO1xuICAgICAgICAgICAgaWYgKCBjb250YWluZXJJbmRleCA9PT0gMSApe1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyLmNsYXNzTGlzdC5hZGQocy5pc0Rpc2NvbnRpbnVlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcHBlbmREZXRhaWxzKClcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWN0aXZlQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLmFjdGl2ZUNvbnRhaW5lciksXG4gICAgICAgICAgICBkaXNjb250aW51ZWRDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMuZGlzY29udGludWVkQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBjb3B5IGluZGV4IDEgb2YgcGhhc2VNZW1iZXJzIHRvIGluZGV4IDAuIEpTT04gcGFyc2Uvc3RyaW5naWZ5IHRvIG1ha2UgZGVlcCBjb3B5XG4gICAgICAgIHRoaXMucGhhc2VNZW1iZXJzWzBdID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnBoYXNlTWVtYmVyc1sxXSkpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnBoYXNlTWVtYmVycyk7XG4gICAgICAgIFthY3RpdmVDb250YWluZXIsIGRpc2NvbnRpbnVlZENvbnRhaW5lcl0uZm9yRWFjaCgoY29udGFpbmVyLCBrKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLmRhdGFbeWVhckluZGV4XS5vYnNlcnZhdGlvbnNbb2JzZXJ2YXRpb25dLmZvckVhY2goKHBoYXNlLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UGhhc2VNZW1iZXJzSW5kZXgoaWQpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5waGFzZU1lbWJlcnNbMV1baSArIDFdWyAoIGsgPT09IDAgPyAnYWN0aXZlJyA6ICdkaXNjb250aW51ZWQnICkgXS5pbmRleE9mKGlkKSAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBmaWx0ZXIgZHJ1Z3MgYnkgd2hldGhlciB0aGV5J3JlIGFjdGl2ZSBvciBkaXNjb250aW51ZWQ7IGFsc28gc29ydCB0aGVtIGJhc2VkIG9uIHdoZXRoZXIgdGhleSB3ZXJlIGFscmVhZHkgaW4gdGhlIGNvbHVtblxuICAgICAgICAgICAgICAgIC8vICB0aGV5IGFyZSBhYm91dCB0byBiZSBwbGFjZWQgaW5cbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWQgPSBwaGFzZS52YWx1ZXMuZmlsdGVyKGQgPT4gayA9PT0gMCA/ICFkW3RoaXMubW9kZWwueWVhcnNbeWVhckluZGV4XV1bb2JzZXJ2YXRpb25dLmlzRGlzY29udGludWVkIDogZFt0aGlzLm1vZGVsLnllYXJzW3llYXJJbmRleF1dW29ic2VydmF0aW9uXS5pc0Rpc2NvbnRpbnVlZCkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nSW5kZXhBID0gZ2V0UGhhc2VNZW1iZXJzSW5kZXguY2FsbCh0aGlzLCBhLmlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ0luZGV4QiA9IGdldFBoYXNlTWVtYmVyc0luZGV4LmNhbGwodGhpcywgYi5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vICBjb25zb2xlLmxvZygnYSAnLCBhLmlkLCAnYiAnLCBiLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5waGFzZU1lbWJlcnNbMF1bMF0uYWN0aXZlLmluY2x1ZGVzKGEuaWQpICkgeyAvLyAgaWYgYSB3YXMgcHJldmlvdXNseSBpbiBjb2x1bW4wIChpZSBvZmYgc2NyZWVuIC8gaXMgZW50ZXJpbmcgKSwgc29ydCBsYXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2EgaXMgZW50ZXJpbmcnLCBhLmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBoYXNlTWVtYmVyc1swXVswXS5hY3RpdmUuaW5jbHVkZXMoYi5pZCkgPyBhLmlkIC0gYi5pZCA6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMucGhhc2VNZW1iZXJzWzBdWzBdLmFjdGl2ZS5pbmNsdWRlcyhiLmlkKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGV4aXN0aW5nSW5kZXhCIDwgMCAmJiBleGlzdGluZ0luZGV4QSA+PSAwICkgeyAvLyBpZiBkcnVnIGlzIGVudGVyaW5nIHRoZSBjb2x1bW4sIGllLCBub3QgYWxyZWFkeSBpbiBpdFxuICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY29uc29sZS5sb2coJ2Egd2FzIGluIGNvbHVtbiwgYiB3YXMgbm90Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nSW5kZXhBIDwgMCAmJiBleGlzdGluZ0luZGV4QiA+PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgY29uc29sZS5sb2coJ2Egd2FzIG5vdCBpbiBjb2x1bW4sIGIgd2FzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGdldFBoYXNlTWVtYmVyc0luZGV4LmNhbGwodGhpcywgYS5pZCkgPCBnZXRQaGFzZU1lbWJlcnNJbmRleC5jYWxsKHRoaXMsIGIuaWQpICkgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKCdib3RoIHdlcmUgaW4gY29sdW1uLCBhIGJlZm9yZSBiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBnZXRQaGFzZU1lbWJlcnNJbmRleC5jYWxsKHRoaXMsIGEuaWQpID4gZ2V0UGhhc2VNZW1iZXJzSW5kZXguY2FsbCh0aGlzLCBiLmlkKSApIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBjb25zb2xlLmxvZygnYm90aCB3ZXJlIGluIGNvbHVtbiwgYiBiZWZvcmUgYScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JldHVybmluZyAwJywgYS5pZCwgYi5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5pZCAtIGIuaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4gPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmNvbHVtbilbaV07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgdGhlIHBoYXNlTWVtYmVyIGFycmF5IG5vdyB0aGF0IGl0cyBwcmV2aW91cyBjb250ZW50cyBoYXZlIGJlZW4gdXRpbGl6ZWRcbiAgICAgICAgICAgICAgICB0aGlzLnBoYXNlTWVtYmVyc1sxXVtpICsgMV1bICggayA9PT0gMCA/ICdhY3RpdmUnIDogJ2Rpc2NvbnRpbnVlZCcgKSBdLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWQuZm9yRWFjaCgoZHJ1ZywgaikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBjb2x1bW4ucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmRydWcpW2pdO1xuICAgICAgICAgICAgICAgICAgICBhZGRJZHNBbmRDbGFzc2VzKHBsYWNlaG9sZGVyLCBkcnVnLCBrKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5waGFzZU1lbWJlcnNbMV1baSArIDFdWyAoIGsgPT09IDAgPyAnYWN0aXZlJyA6ICdkaXNjb250aW51ZWQnICkgXS5wdXNoKGRydWcuaWQpOyAvLyBwbGFjZSB0aGUgZHJ1ZyBpbiB0aGUgcHJvcGVyIGJ1Y2tldCB0cmFja2luZyBpdHMgY29sdW1uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5waGFzZU1lbWJlcnNbMV1bMF0uYWN0aXZlID0gdGhpcy5tb2RlbC51bm5lc3RlZERhdGEuZmlsdGVyKGQgPT4gZFsrdGhpcy5jdXJyZW50WWVhcl1bdGhpcy5jdXJyZW50T2JzZXJ2YXRpb25dLmNvbHVtbiA9PT0gMCkubWFwKGVhY2ggPT4gZWFjaC5pZCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5waGFzZU1lbWJlcnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9XG4gICAgc2V0WWVhclN0YXRlKGRhdGEpe1xuICAgICAgICB2YXIgc3RhdGVCZWZvcmVDaGFuZ2UgPSBTLmdldFN0YXRlKCd5ZWFyJyk7XG4gICAgICAgIGlmICggc3RhdGVCZWZvcmVDaGFuZ2UgKXtcbiAgICAgICAgICAgIHRoaXMucmVjb3JkU3RhdHVzZXMoc3RhdGVCZWZvcmVDaGFuZ2VbMF0sIHN0YXRlQmVmb3JlQ2hhbmdlWzJdKTtcbiAgICAgICAgfVxuICAgICAgICBTLnNldFN0YXRlKCd5ZWFyJywgZGF0YSk7XG4gICAgICAgIHRoaXMuY3VycmVudFllYXIgPSBkYXRhWzBdO1xuICAgICAgICB0aGlzLmN1cnJlbnRPYnNlcnZhdGlvbiA9IGRhdGFbMl07XG5cbiAgICB9XG4gICAgaW5pdCgpIHtcbiAgICAgICAgUFMuc2V0U3VicyhbXG4gICAgICAgICAgICBbJ3Jlc2l6ZScsIHRoaXMuY2hlY2tIZWlnaHQuYmluZCh0aGlzKV0sXG4gICAgICAgICAgICBbJ3llYXInLCB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpXVxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5zZXRZZWFyU3RhdGUoW3RoaXMubW9kZWwueWVhcnNbMF0sIG51bGwsIDFdKTtcbiAgICAgICAgdGhpcy5ub25FbXB0eURydWdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmRydWcgKyAnOm5vdCguJyArIHMuZHJ1Z0VtcHR5ICsgJyknKTtcbiAgICAgICAgdGhpcy5jaGVja0hlaWdodCgpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVZZWFyQnV0dG9ucygpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVQbGF5QnV0dG9uKCk7XG4gICAgfVxuICAgIGluaXRpYWxpemVQbGF5QnV0dG9uKCl7XG4gICAgICAgIHZhciBwbGF5QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLnBsYXlCdXR0b24pO1xuICAgICAgICBwbGF5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5wbGF5WWVhcnMuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIHBsYXlZZWFycygpe1xuICAgICAgICB2YXIgY3VycmVudFllYXIgPSBTLmdldFN0YXRlKCd5ZWFyJylbMF0sXG4gICAgICAgICAgICBjdXJyZW50T2JzZXJ2YXRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMueWVhckJ1dHRvbkFjdGl2ZSkuY2xhc3NMaXN0LmNvbnRhaW5zKHMub2JzZXJ2YXRpb24wKSA/IDAgOiAxO1xuICAgICAgICBmdW5jdGlvbiBuZXh0UHJvbWlzZSgpe1xuICAgICAgICAgICAgY3VycmVudFllYXIrKztcbiAgICAgICAgICAgIGlmICggY3VycmVudFllYXIgPD0gdGhpcy5tb2RlbC55ZWFyc1t0aGlzLm1vZGVsLnllYXJzLmxlbmd0aCAtIDFdICl7XG4gICAgICAgICAgICAgICAgbmV3IFByb21pc2Uod3JhcHBlclJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0WWVhclN0YXRlKFtjdXJyZW50WWVhciwgcmVzb2x2ZSwgMF0pOyBcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFllYXJTdGF0ZShbY3VycmVudFllYXIsIHdyYXBwZXJSZXNvbHZlLCAxXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pOyAgICBcbiAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFByb21pc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICggY3VycmVudE9ic2VydmF0aW9uID09PSAwICl7XG4gICAgICAgICAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFllYXJTdGF0ZShbY3VycmVudFllYXIsIHJlc29sdmUsIDFdKTsgXG4gICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBuZXh0UHJvbWlzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0UHJvbWlzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9IFxuXG4gICAgfVxuICAgIGNoZWNrSGVpZ2h0KCkge1xuXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgLyogYWRkICdzcXVhdCcgY2xhc3MgdG8gYm9keSBmb3Igc21hbGwgc2NyZWVucyAqL1xuICAgICAgICBpZiAod2luZG93LmlubmVySGVpZ2h0IDwgdGhpcy5oZWlnaHROZWVkZWQpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChzLnNxdWF0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShzLnNxdWF0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWN0aW9uLWNvbXBhcmlzb24gLmpzLWlubmVyLWNvbnRlbnQnKS5vZmZzZXRIZWlnaHQgPiB3aW5kb3cuaW5uZXJIZWlnaHQgLSAxMDAgKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQocy5zdXBlclNxdWF0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShzLnN1cGVyU3F1YXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRqdXN0Q1NTVmFyaWFibGVzKCkge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgICB2YXIgYWN0aXZlTWF4ID0gTWF0aC5mbG9vcigodGhpcy5oZWlnaHROZWVkZWQgLSB0aGlzLnVuaXRQYWRkaW5nIC0gdGhpcy5oZWFkZXJIZWlnaHQpICogKHRoaXMubWF4QWN0aXZlIC8gKHRoaXMubWF4QWN0aXZlICsgdGhpcy5tYXhEaXNjb250aW51ZWQpKSk7XG4gICAgICAgICAgICByb290LnN0eWxlLnNldFByb3BlcnR5KCctLXVuaXQtZGltZW5zaW9uJywgdGhpcy5taW5Vbml0RGltZW5zaW9uICsgJ3B4Jyk7XG4gICAgICAgICAgICByb290LnN0eWxlLnNldFByb3BlcnR5KCctLWhlYWRlci1oZWlnaHQnLCB0aGlzLmhlYWRlckhlaWdodCArICdweCcpO1xuICAgICAgICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1tYXgtY29udGFpbmVyLWhlaWdodCcsIHRoaXMuaGVpZ2h0TmVlZGVkICsgJ3B4Jyk7XG4gICAgICAgICAgICByb290LnN0eWxlLnNldFByb3BlcnR5KCctLWFjdGl2ZS1tYXgtaGVpZ2h0JywgYWN0aXZlTWF4ICsgJ3B4Jyk7XG4gICAgICAgICAgICByb290LnN0eWxlLnNldFByb3BlcnR5KCctLWRpc2NvbnRpbnVlZC1tYXgtaGVpZ2h0JywgTWF0aC5mbG9vcih0aGlzLmhlaWdodE5lZWRlZCAtIGFjdGl2ZU1heCAtIHRoaXMuaGVhZGVySGVpZ2h0KSArICdweCcpO1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgOnJvb3Qge1xuICAgICAgICAgICAgICAgIC0tbWF4LWNvbnRhaW5lci1oZWlnaHQ6IDgwMHB4O1xuICAgICAgICAgICAgICAgIC0tYWN0aXZlLW1heC1oZWlnaHQ6IDM2OHB4O1xuICAgICAgICAgICAgICAgIC0tZGlzY29udGludWVkLW1heC1oZWlnaHQ6IDM2OHB4O1xuICAgICAgICAgICAgICAgIC0tc3F1YXQtYWN0aXZlLXByb3BvcnRpb246IDUwdmg7XG4gICAgICAgICAgICAgICAgLS1zcXVhdC1kaXNjb250aW51ZWQtcHJvcG9ydGlvbjogNTB2aDtcbiAgICAgICAgICAgICAgICAtLXVuaXQtZGltZW5zaW9uOiAzMHB4O1xuICAgICAgICAgICAgICAgIC0taGVhZGVyLWhlaWdodDogNDVweDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgKi9cbiAgICAgICAgfVxuICAgICAgICBhZGp1c3RDU1NWYXJpYWJsZXMuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZVllYXJCdXR0b25zKCl7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy55ZWFyQnV0dG9uKS5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50WWVhciA9IFMuZ2V0U3RhdGUoJ3llYXInKVswXTtcbiAgICAgICAgICAgICAgICB0aGlzLmJsdXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoIGN1cnJlbnRZZWFyICE9PSB0aGlzLnZhbHVlICkgeyAvLyBpcyBub3QgdGhlIGFscmVhZHkgc2VsZWN0ZWQgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGxldCBvYnNlcnZhdGlvbnMgPSB0aGlzLnZhbHVlID4gY3VycmVudFllYXIgPyBbMCwxXSA6IFsxLDBdO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRZZWFyU3RhdGUoW3RoaXMudmFsdWUsIHJlc29sdmUsIG9ic2VydmF0aW9uc1swXV0pO1xuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFllYXJTdGF0ZShbdGhpcy52YWx1ZSwgbnVsbCwgb2JzZXJ2YXRpb25zWzFdXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvYnNlcnZhdGlvbiA9IHRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKHMub2JzZXJ2YXRpb24wKSA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRZZWFyU3RhdGUoW3RoaXMudmFsdWUsIG51bGwsIG9ic2VydmF0aW9uXSk7ICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGUobXNnLGRhdGEpIHsgLy8gaGVyZSBkYXRhIGlzIGFuIGFycmF5LiBbMF06IHllYXI7IFsxXTogbnVsbCBvciBgcmVzb2x2ZWAgZnJvbSB0aGUgUHJvbWlzZS4gbmVlZHMgdG8gcmVzb2x2ZSB0cnVlIHdoZW4gYWxsIHRyYW5zaXRpb25zIG9mIGN1cnJlbnQgdXBkYXRlIGFyZSBmaW5pc2hlZCAuIDMuIG9ic2VydmF0aW9uIGluZGV4XG4gICAgICAgIFxuICAgICAgICAvLyBmaW5kIGJ0biB0byBiZSBkZXNlbGVjdGVkIGFuZCBjaGFuZ2UgaXRzIGFwcGVhcmFuY2VcbiAgICAgICAgbGV0IHRvQmVEZXNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLnllYXJCdXR0b25BY3RpdmUpO1xuICAgICAgICB0b0JlRGVzZWxlY3RlZC5jbGFzc0xpc3QucmVtb3ZlKHMueWVhckJ1dHRvbkFjdGl2ZSwgcy5vYnNlcnZhdGlvbiwgcy5vYnNlcnZhdGlvbjAsIHMub2JzZXJ2YXRpb24xKTtcbiAgICAgICAgXG4gICAgICAgIC8vIGZpbmQgYnV0dG9uIHRoYXQgbWF0Y2hlcyBuZXcgc2VsZWN0aW9uIGFuZCBjaGFuZ2UgaXRzIGFwcGVhcmFuY2VcbiAgICAgICAgdmFyIGJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvblt2YWx1ZT1cIicgKyBkYXRhWzBdICsnXCJdJyk7XG4gICAgICAgIFxuICAgICAgICAvL3RvZ2dsZSBvYnNlcnZhdGlvbiAwIG9yIG9ic2VydmF0aW9uIDFcbiAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQocy55ZWFyQnV0dG9uQWN0aXZlKTtcbiAgICAgICAgaWYgKCBkYXRhWzJdID09PSAwICl7XG4gICAgICAgICAgICBidG4uY2xhc3NMaXN0LnJlbW92ZShzLm9ic2VydmF0aW9uMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidG4uY2xhc3NMaXN0LnJlbW92ZShzLm9ic2VydmF0aW9uMCk7XG4gICAgICAgIH1cbiAgICAgICAgYnRuLmNsYXNzTGlzdC5hZGQocy5vYnNlcnZhdGlvbiwgc1snb2JzZXJ2YXRpb24nICsgZGF0YVsyXV0pXG4gICAgICAgIHRoaXMuRkxJUChwYXJzZUludChkYXRhWzBdKSwgZGF0YVsxXSwgZGF0YVsyXSk7IC8vIHllYXJJbmRleCwgcmVzb2x2ZSBmbiwgb2JzZXJ2YXRpb25cbiAgICAgICAgdGhpcy51cGRhdGVUZXh0KCk7XG4gICAgfVxuICAgIHVwZGF0ZVRleHQoKXtcbiAgICAgICAgLy8gcGhhc2VNZW1iZXJzWzFdIGlzIHRoZSBjdXJyZW50IHN0YXRlOyBbMF0gaXMgdGhlIHByZXZpb3VzIHN0YXRlXG4gICAgICAgIFxuICAgICAgICB2YXIgdG90YWxBY3RpdmUgPSB0aGlzLnBoYXNlTWVtYmVyc1sxXVt0aGlzLnBoYXNlTWVtYmVyc1sxXS5sZW5ndGggLSAxXS5hY3RpdmUubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWxEaXNjb250aW51ZWQgPSB0aGlzLnBoYXNlTWVtYmVyc1sxXS5yZWR1Y2UoKGFjYyxjdXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjICsgY3VyLmRpc2NvbnRpbnVlZC5sZW5ndGg7XG4gICAgICAgICAgICB9LDApLFxuICAgICAgICAgICAgYXBwcm92ZWRTcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RvdGFsLWFwcHJvdmVkJyksXG4gICAgICAgICAgICBkaXNjb250aW51ZWRTcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RvdGFsLWRpc2NvbnRpbnVlZCcpO1xuICAgICAgICBpZiAoIGFwcHJvdmVkU3Bhbi5pbm5lckhUTUwgIT0gdG90YWxBY3RpdmUpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0b3RhbC1hcHByb3ZlZCcpLmZhZGVJbkNvbnRlbnQodG90YWxBY3RpdmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICggZGlzY29udGludWVkU3Bhbi5pbm5lckhUTUwgIT0gdG90YWxEaXNjb250aW51ZWQgKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG90YWwtZGlzY29udGludWVkJykuZmFkZUluQ29udGVudCh0b3RhbERpc2NvbnRpbnVlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgRkxJUChkYXRhLCByZXNvbHZlLCBvYnNlcnZhdGlvbiA9IDEpeyAvLyBvYm5zZXJ2YXRpb24gZGVmYXVsdHMgdG8gMSBmb3IgdGhlIGluaXRpYWwgcGFnZSBsb2FkIGFuaW1hdGlvblxuICAgICAgICB0aGlzLnJlY29yZEZpcnN0UG9zaXRpb25zKCk7IC8vIGZpcnN0IHBvc2l0aW9ucyBvbiBwYWdlXG4gICAgICAgIC8vdGhpcy5yZWNvcmRTdGF0dXNlcyhkYXRhLCBvYnNlcnZhdGlvbik7XG4gICAgICAgIHRoaXMuY2xlYXJBdHRyaWJ1dGVzQW5kRGV0YWlscygpOyAvLyByZW1vdmVzIGNsYXNzTmFtZXMgYW5kIElEcyBvZiBub25lbXB0eSBkcnVnXG5cbiAgICAgICAgLy8gcGFyYW1zIDEuIGluZGV4IG9mIHRoZSB5ZWFyICgyMDE0IC0+IDApOyAyLiBpbmRleCBvZiB0aGUgb2JzZXJ2YXRpb247IFxuICAgICAgICB0aGlzLnBvcHVsYXRlUGxhY2Vob2xkZXJzKHRoaXMubW9kZWwueWVhcnMuaW5kZXhPZihkYXRhKSwgb2JzZXJ2YXRpb24pOyAvLyBsYXN0ICBcblxuICAgICAgICB0aGlzLm5vbkVtcHR5RHJ1Z3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMuZHJ1ZyArICc6bm90KC4nICsgcy5kcnVnRW1wdHkgKyAnKScpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5pbnZlcnRQb3NpdGlvbnMoKTtcbiAgICAgICAgdGhpcy5wbGF5QW5pbWF0aW9uKHJlc29sdmUpOyAvLyBwYXNzIGluIHRoZSBgcmVzb2x2ZWAgZnVuY3Rpb24gZnJvbSB0aGUgcHJvbWlzZSBpbml0aWF0ZWQgd2hlbiB0aGUgeWVhciBidXR0b24gd2FzIHByZXNzZWQgb3IgUGxheSBsb29wIGN5Y2xlZFxuXG4gICAgICAgIFxuICAgICBcbiAgICB9XG4gICAgcmVjb3JkU3RhdHVzZXMoeWVhciwgb2JzZXJ2YXRpb24pe1xuICAgICAgICBcbiAgICAgICAgdGhpcy5wcmV2aW91c1N0YXR1c2VzID0gdGhpcy5tb2RlbC5kYXRhW3RoaXMubW9kZWwueWVhcnMuaW5kZXhPZigreWVhcildLm9ic2VydmF0aW9uc1tvYnNlcnZhdGlvbl0ucmVkdWNlKChhY2MsIHBoYXNlKSA9PiB7IC8vIGN1ciBpcyB0aGUgcGhhc2Ugb2JqZWN0XG4gICAgICAgICAgICAgICAgcGhhc2UudmFsdWVzLmZvckVhY2goZHJ1ZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFjY1tkcnVnLmlkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogZHJ1Z1t5ZWFyXVtvYnNlcnZhdGlvbl0uY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNjb250aW51ZWQ6IGRydWdbeWVhcl1bb2JzZXJ2YXRpb25dLmlzRGlzY29udGludWVkXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0se30pO1xuICAgICAgICBcbiAgICB9XG4gICAgcmVjb3JkRmlyc3RQb3NpdGlvbnMoKXtcbiAgICAgICAgdGhpcy5maXJzdFBvc2l0aW9ucyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmRydWcgKyAnOm5vdCgnICsgcy5kcnVnRW1wdHkgKyAnKScpKS5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGFjY1tjdXIuaWRdID0gY3VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSx7fSk7XG4gICAgfVxuICAgIGNsZWFyQXR0cmlidXRlc0FuZERldGFpbHMoKXtcbiAgICAgICAgdGhpcy5ub25FbXB0eURydWdzLmZvckVhY2goZHJ1ZyA9PiB7XG4gICAgICAgICAgICB2YXIgZGV0YWlscyA9IGRydWcucXVlcnlTZWxlY3RvcignLicgKyBzLmRldGFpbERyYXdlcik7XG4gICAgICAgICAgICBkcnVnLmNsYXNzTmFtZSA9ICBgJHtzLmRydWd9ICR7cy5kcnVnRW1wdHl9YDtcbiAgICAgICAgICAgIGRydWcuaWQgPSAnJztcbiAgICAgICAgICAgIGRydWcucmVtb3ZlQ2hpbGQoZGV0YWlscyk7XG4gICAgICAgICAgIC8vIGRydWcuaW5uZXJUZXh0ID0gJyc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbnZlcnRQb3NpdGlvbnMoKXtcbiAgICAgICAgdGhpcy5ub25FbXB0eURydWdzLmZvckVhY2goZHJ1ZyA9PiB7XG4gICAgICAgICAgICBkcnVnLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gICAgICAgICAgICB2YXIgbGFzdFBvc2l0aW9uID0gZHJ1Zy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICBkZWx0YVkgPSB0aGlzLmZpcnN0UG9zaXRpb25zW2RydWcuaWRdID8gdGhpcy5maXJzdFBvc2l0aW9uc1tkcnVnLmlkXS50b3AgLSBsYXN0UG9zaXRpb24udG9wIDogLTEwMDAsXG4gICAgICAgICAgICAgICAgZGVsdGFYID0gdGhpcy5maXJzdFBvc2l0aW9uc1tkcnVnLmlkXSA/IHRoaXMuZmlyc3RQb3NpdGlvbnNbZHJ1Zy5pZF0ubGVmdCAtIGxhc3RQb3NpdGlvbi5sZWZ0IDogLTEwMDA7IC8vIGRydWdzIHRoYXQgYXJlIGVudGVyaW5nIHdpbGwgbm90IGhhdmUgZmlyc3RQb3NpdGlvbnNcbiAgICAgICAgICAgIGRydWcuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke2RlbHRhWH1weCwgJHtkZWx0YVl9cHgpYDtcbiAgICAgICAgICAgIGlmICggZGVsdGFZICE9PSAwIHx8IGRlbHRhWCAhPT0gMCApe1xuICAgICAgICAgICAgICAgICBkcnVnLmNsYXNzTGlzdC5hZGQocy5pc1RyYW5zbGF0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCAhdGhpcy5maXJzdFBvc2l0aW9uc1tkcnVnLmlkXSApe1xuICAgICAgICAgICAgICAgIGRydWcuY2xhc3NMaXN0LmFkZChzLmVudGVyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBsYXlBbmltYXRpb24ocmVzb2x2ZSl7XG4gICAgICAgIFxuICAgICAgICB2YXIgY29sdW1uID0gaGVhZGVycy5sZW5ndGgsXG4gICAgICAgICAgICBjdXJyZW50U3RhdGUgPSBTLmdldFN0YXRlKCd5ZWFyJyksXG4gICAgICAgICAgICBjdXJyZW50WWVhciA9IGN1cnJlbnRTdGF0ZVswXSxcbiAgICAgICAgICAgIGN1cnJlbnRPYnNlcnZhdGlvbiA9IGN1cnJlbnRTdGF0ZVsyXTtcbiAgICAgICAgY29uc29sZS5sb2coY3VycmVudFllYXIsIGN1cnJlbnRPYnNlcnZhdGlvbik7XG4gICAgICAgICAgICBcblxuICAgICAgIFxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlVHJ1ZShkdXJhdGlvbil7XG4gICAgICAgICAgICBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiB0cmFuc2l0aW9uKERPTURydWcpe1xuICAgICAgICAgICAvLyB2YXIgdHJhbnNsYXRlWFkgPSBET01EcnVnLnN0eWxlLnRyYW5zZm9ybS5tYXRjaCgvdHJhbnNsYXRlXFwoKC4qPylcXCkvKVsxXS5yZXBsYWNlKCcgJywnJykuc3BsaXQoJywnKTtcbiAgICAgICAgICAgLy8gdmFyIGRpc3RhbmNlVG9UcmF2ZWwgPSBNYXRoLnNxcnQoIE1hdGguYWJzKHBhcnNlSW50KHRyYW5zbGF0ZVhZWzBdKSkgKiogMiArIE1hdGguYWJzKHBhcnNlSW50KHRyYW5zbGF0ZVhZWzBdKSkgKiogMiApO1xuICAgICAgICAgICAvLyB2YXIgZmFjdG9yID0gZGlzdGFuY2VUb1RyYXZlbCAvIDE0MTQuMjE7XG4gICAgICAgICAgICBET01EcnVnLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uIC8gMTAwMCArICdzJztcbiAgICAgICAgICAgIERPTURydWcuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwcHgsMHB4KSc7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgRE9NRHJ1Zy5jbGFzc0xpc3QucmVtb3ZlKHMuaXNUcmFuc2xhdGVkKTtcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gYW5pbWF0ZVNpbmdsZUNvbHVtbihyZXNvbHZlKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCcgIGNvbHVtbiAnICsgY29sdW1uKTtcbiAgICAgICAgICAgIHZhciBtYXRjaGluZ0RydWdJRHMgPSBPYmplY3Qua2V5cyh0aGlzLnByZXZpb3VzU3RhdHVzZXMpLmZpbHRlcihpZCA9PiB0aGlzLnByZXZpb3VzU3RhdHVzZXNbaWRdLmNvbHVtbiA9PT0gY29sdW1uKSxcbiAgICAgICAgICAgICAgICBtYXRjaGluZ0RPTURydWdzID0gQXJyYXkuZnJvbSh0aGlzLm5vbkVtcHR5RHJ1Z3MpLmZpbHRlcihET01EcnVnID0+IG1hdGNoaW5nRHJ1Z0lEcy5pbmNsdWRlcyhET01EcnVnLmlkKSk7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHNXaWxsU3RheUJ1dE1vdmUgPSBtYXRjaGluZ0RPTURydWdzLmZpbHRlcihlbCA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREYXR1bSA9IHRoaXMubW9kZWwudW5uZXN0ZWREYXRhLmZpbmQoZCA9PiBkLmlkID09PSBlbC5pZClbY3VycmVudFllYXJdW2N1cnJlbnRPYnNlcnZhdGlvbl07XG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVhZID0gZWwuc3R5bGUudHJhbnNmb3JtLm1hdGNoKC90cmFuc2xhdGVcXCgoLio/KVxcKS8pWzFdLnJlcGxhY2UoJyAnLCcnKS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgIGVsLnRyYW5zbGF0ZVhZID0gdHJhbnNsYXRlWFk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICggdGhpcy5wcmV2aW91c1N0YXR1c2VzW2VsLmlkXS5jb2x1bW4gPT09IGN1cnJlbnREYXR1bS5jb2x1bW4gJiYgdGhpcy5wcmV2aW91c1N0YXR1c2VzW2VsLmlkXS5pc0Rpc2NvbnRpbnVlZCA9PT0gY3VycmVudERhdHVtLmlzRGlzY29udGludWVkICYmICggdHJhbnNsYXRlWFlbMF0gIT09ICcwcHgnIHx8IHRyYW5zbGF0ZVhZWzFdICE9PSAnMHB4JyApICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50c1dpbGxDaGFuZ2VTdGF0dXMgPSBtYXRjaGluZ0RPTURydWdzLmZpbHRlcihlbCA9PiB0aGlzLnByZXZpb3VzU3RhdHVzZXNbZWwuaWRdLmlzRGlzY29udGludWVkICE9PSB0aGlzLm1vZGVsLnVubmVzdGVkRGF0YS5maW5kKGQgPT4gZC5pZCA9PT0gZWwuaWQpW2N1cnJlbnRZZWFyXVtjdXJyZW50T2JzZXJ2YXRpb25dLmlzRGlzY29udGludWVkICk7ICAgICBcbiAgICAgICAgICAgIHZhciBlbGVtZW50c1dpbGxNb3ZlRm9yd2FyZCA9IG1hdGNoaW5nRE9NRHJ1Z3MuZmlsdGVyKGVsID0+IHRoaXMucHJldmlvdXNTdGF0dXNlc1tlbC5pZF0uY29sdW1uIDwgdGhpcy5tb2RlbC51bm5lc3RlZERhdGEuZmluZChkID0+IGQuaWQgPT09IGVsLmlkKVtjdXJyZW50WWVhcl1bY3VycmVudE9ic2VydmF0aW9uXS5jb2x1bW4gKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50c1dpbGxNb3ZlQmFja3dhcmQgPSBtYXRjaGluZ0RPTURydWdzLmZpbHRlcihlbCA9PiB0aGlzLnByZXZpb3VzU3RhdHVzZXNbZWwuaWRdLmNvbHVtbiA+IHRoaXMubW9kZWwudW5uZXN0ZWREYXRhLmZpbmQoZCA9PiBkLmlkID09PSBlbC5pZClbY3VycmVudFllYXJdW2N1cnJlbnRPYnNlcnZhdGlvbl0uY29sdW1uICk7XG4gICAgICAgICAgICB2YXIgZWxlbWVudHNXaWxsRW50ZXIgPSBtYXRjaGluZ0RPTURydWdzLmZpbHRlcihlbCA9PiB0aGlzLnByZXZpb3VzU3RhdHVzZXNbZWwuaWRdLmNvbHVtbiA9PT0gMCk7XG5cbiAgICAgICAgICAgIHZhciBzdWJzZXRzID0gW2VsZW1lbnRzV2lsbE1vdmVGb3J3YXJkLCBlbGVtZW50c1dpbGxNb3ZlQmFja3dhcmQsIGVsZW1lbnRzV2lsbENoYW5nZVN0YXR1cywgZWxlbWVudHNXaWxsU3RheUJ1dE1vdmUsIGVsZW1lbnRzV2lsbEVudGVyXTtcbiAgICAgICAgICAgLy8gY29uc29sZS5sb2coZWxlbWVudHNXaWxsU3RheUJ1dE1vdmUpO1xuICAgICAgICAgICAgdmFyIGxlbmd0aE9mQWxsU3Vic2V0cyA9IHN1YnNldHMucmVkdWNlKGZ1bmN0aW9uKGFjYyxjdXIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2MgKyBjdXIubGVuZ3RoO1xuICAgICAgICAgICAgfSwwKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGxlbmd0aE9mQWxsU3Vic2V0cyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVN1YnNldChpbmRleCl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJyAgICBzdWJzZXQgJyArIGluZGV4ICk7XG4gICAgICAgICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzZXRzW2luZGV4XS5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJyAgICAgIHNraXBwaW5nIF4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7ICAgICAgICAvLyBpZiB0aGUgc3Vic2V0IGlzIGVtcHR5LCByZXNvbHZlIHJpZ2h0IGF3YXlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNldHNbaW5kZXhdLmZvckVhY2goKERPTURydWcsIGksIGFycmF5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgdHJhbnNsYXRlWFkgPSBET01EcnVnLnN0eWxlLnRyYW5zZm9ybS5tYXRjaCgvdHJhbnNsYXRlXFwoKC4qPylcXCkvKVsxXS5yZXBsYWNlKCcgJykuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3ZhciBkdXIgPSB0cmFuc2xhdGVYWVswXSA9PT0gMCAmJiB0cmFuc2xhdGVYWVsxXSA9PT0gMCA/IDAgOiBkdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uKERPTURydWcpOyAvLyBwYXNzaW5nIGluIHRoZSBleGlzdGluZyB0cmFuc2xhdGUgY29vcmRzIHNvIHRoYXQgdGltaW5nIGNhbiBiZSBiYXNlIG9uIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpID09PSBhcnJheS5sZW5ndGggLSAxICl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZHVyYXRpb24pOyAvLyB3YWl0IHVudGlsIGxhc3QgaXRlbSBpbiBzdWJzZXQgaGFzIGZpbmlzaGVkIGl0cyB0cmFuc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmVmb3JlIHJlc29sdmluZyBhbmQgdHJpZ2dlcmluZyB0aGUgbmV4dCBzdWJzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGluZGV4IDwgc3Vic2V0cy5sZW5ndGggKXsgLy8gaWYgdGhlcmUgYXJlIHN0aWxsIG1vcmUgc3Vic2V0cyB0byBoYW5kbGUsIGhhbmRsZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVTdWJzZXQuY2FsbCh0aGlzLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JldHVybjsgLy8gaWYgbm90LCBzdG9wXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGNvbHVtbiA+IDAgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW4tLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZVNpbmdsZUNvbHVtbi5jYWxsKHRoaXMsIHJlc29sdmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfSwgZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlbGF5QmV0d2Vlbk9ic2VydmF0aW9uID0gbGVuZ3RoT2ZBbGxTdWJzZXRzID09PSAwID8gZHVyYXRpb24gOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpOyAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZGVsYXlCZXR3ZWVuT2JzZXJ2YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVTdWJzZXQuY2FsbCh0aGlzLDApO1xuICAgICAgICAgIFxuICAgICAgICAgICAgLyptYXRjaGluZ0RPTURydWdzLmZpbHRlcihkcnVnID0+IHdpbGxTdGF5SW5Db2x1bW4uaW5jbHVkZXMoZHJ1Zy5pZCkpLmZvckVhY2goRE9NRHJ1ZyA9PiB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbihET01EcnVnLCAwKTtcbiAgICAgICAgICAgIH0pOyovXG4gICAgICAgICAgLyogIGlmICggY29sdW1uID4gMCApe1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW4tLTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZVNpbmdsZUNvbHVtbi5jYWxsKHRoaXMsIHJlc29sdmUpO1xuICAgICAgICAgICAgICAgIH0sIGR1cmF0aW9uICogMik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTsgIFxuICAgICAgICAgICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0qL1xuICAgICAgICB9IC8vIGVuZCBhbmltYXRlU2luZ2xlQ29sdW1uXG4gICAgICAgIFxuICAgICAgICAvLyBjb250aW51ZSBwbGF5QW5pbWF0aW9uLCB3aGljaCBpcyBjYWxsZWQgb25jZSBmb3IgZWFjaCBvYnNlcnZhdGlvbiAoMnggZm9yIGVhY2ggeWVhcilcbiAgICAgICAgaWYgKCBpc0ZpcnN0TG9hZCApeyAvLyBpZSBpcyAgdGhlIGZpcnN0IGFuaW1hdGlvbiBvbiBsb2FkIEZJUlNUIEFOSU1BVElPTlxuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMubm9uRW1wdHlEcnVncy5mb3JFYWNoKChET01EcnVnLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uKERPTURydWcpO1xuICAgICAgICAgICAgICAgIH0sIGkgKiAxMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlzRmlyc3RMb2FkID0gZmFsc2U7XG4gICAgICAgLy8gICAgIHJlc29sdmVUcnVlKGR1cmF0aW9uKTsgKi9cbiAgICAgICAgfSBlbHNlIHsgLy8gaXMgbm90IHRoZSBmaXJzdCBhbmltYXRpb24gb24gbG9hZCwgaWUgZHJ1Z3MgaGF2ZSBwcmV2aW91cyBzdGF0dXNlcyBTVUJTRVFVRU5UIEFOSU1BVElPTlNcbiAgICAgICAgICAgIGxldCBlbnRlcmluZ0RydWdzID0gQXJyYXkuZnJvbSh0aGlzLm5vbkVtcHR5RHJ1Z3MpLmZpbHRlcihET01EcnVnID0+ICFPYmplY3Qua2V5cyh0aGlzLnByZXZpb3VzU3RhdHVzZXMpLmluY2x1ZGVzKERPTURydWcuaWQpKTtcbiAgICAgICAgICAgIGVudGVyaW5nRHJ1Z3MuZm9yRWFjaChlbnRlcmluZ0RydWcgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXNTdGF0dXNlc1tlbnRlcmluZ0RydWcuaWRdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW46IDAsXG4gICAgICAgICAgICAgICAgICAgIGlzRGlzY29udGludWVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgYW5pbWF0ZVNpbmdsZUNvbHVtbi5jYWxsKHRoaXMsIHJlc29sdmUpO1xuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHJlc29sdmVUcnVlKDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8qKFxuICAgICAgICBjb25zdCBpbmNyZW1lbnQgPSA1MDtcbiAgICAgICAgdmFyIGRlbGF5O1xuICAgICAgICBbNCwzLDIsMSwwXS5mb3JFYWNoKChwaGFzZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmICggaW5kZXggPT09IDAgKXtcbiAgICAgICAgICAgICAgICBkZWxheSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxheSA9IHRoaXMucGhhc2VNZW1iZXJzWzBdW3BoYXNlICsgMV0uYWN0aXZlLmNvbmNhdCh0aGlzLnBoYXNlTWVtYmVyc1swXVtwaGFzZSArIDFdLmRpc2NvbnRpbnVlZCkubGVuZ3RoICogaW5jcmVtZW50ICsgNTAwICsgaW5jcmVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5waGFzZU1lbWJlcnNbMF1bcGhhc2VdLmFjdGl2ZS5jb25jYXQodGhpcy5waGFzZU1lbWJlcnNbMF1bcGhhc2VdLmRpc2NvbnRpbnVlZCkuZm9yRWFjaCgoZWFjaCwgaikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXYjJyArIGVhY2ggKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMC41cyc7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsMCknO1xuICAgICAgICAgICAgICAgICAgICB9LCBpbmNyZW1lbnQgKiBqKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5lbnRlcmluZykuZm9yRWFjaChkcnVnID0+IHtcbiAgICAgICAgICAgIGRydWcuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzAuNXMnO1xuICAgICAgICAgICAgZHJ1Zy5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsMCknO1xuICAgICAgICB9KTsqL1xuICAgICAgICBcbi8qKioqICBUTyBETyAqKioqKipcblxuYXNzaWduIGNsYXNzTmFtZXMgdG8gZHJ1Z3MgYWNjb3JkaW5nIHRvIHdoaWNoIHdheSB0aGV5IGFyZSBtb3ZpbmcuIHByb2dyZXNzaW5nLCByZWdyZXNzaW5nLCBkaXNjb250aW51aW5nLCBlbnRlcmluZywgcmVlbnRlcmluZ1xucHJvYmFibHkgZG9uZSB1cCBpbiBsb29wIHN0YXJ0aW5nIGFuIGxuIDE0MS5cblxuICAgICAgICB2YXIgYW5pbWF0ZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgICAgIFsnZm9vJywnYmFyJ10uZm9yRWFjaCgoYmF6LGksYXJyYXkpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGkgPT09IGFycmF5Lmxlbmd0aCAtIDEgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAxMDAwICogaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBhbmltYXRlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICAvKiAgc2V0VGltZW91dChmdW5jdGlvbigpeyAvLyB0cmFuc2l0aW9uIHdvbid0IGhhcHBlbiB3L28gdGhlIHNldFRpbWVvdXQgdHJpY2tcbiAgICAgICAgICAgICAgZHJ1Zy5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMC44cyc7XG4gICAgICAgICAgICAgIGRydWcuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLDApJztcbiAgICAgICAgICAgICAgKioqKiogSEVSRSAqKiogQ1lDTEUgVEhST1VHSCBjb2x1bW5zIG9uZSBieSBvbmVcbiAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNyYy12aWV3cy12aXotdmlldy0tY29sdW1uJylbMF0ucXVlcnlTZWxlY3RvckFsbCgnLnNyYy12aWV3cy12aXotdmlldy0tZHJ1ZycpLmZvckVhY2goZHJ1ZyA9PiB7ZHJ1Zy5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMC44cyc7ZHJ1Zy5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsMCknO30pO1xuICAgICAgICAgIH0pOyovXG4gICAgfVxufSIsIi8qIGdsb2JhbCBQVUJMSUNQQVRIIHByb2Nlc3MgKi9cbi8vdXRpbHNcbi8vaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMtY29sbGVjdGlvbic7XG5pbXBvcnQgUGFwYSBmcm9tICdwYXBhcGFyc2UnO1xuaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuLy9pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG5pbXBvcnQgeyBwdWJsaXNoV2luZG93UmVzaXplIH0gZnJvbSAnQFV0aWxzJztcblxuLy9kYXRhICggQ1NWcyBsb2FkZWQgYnkgZmlsZS1sb2FkZXIgZm9yIHVzZSBieSBQYXBhcGFyc2UgYXQgYnVpbGQgYW5kIHJ1bnRpbWUuIHRoYXQncyBzZXQgaW4gd2VicGFjay5jb21tb24uanMgKVxuaW1wb3J0IGRhdGEgZnJvbSAnLi9kYXRhL2FieC1kYXRhLmNzdic7XG5cbi8vdmlld3NcbmltcG9ydCBWaXpWaWV3IGZyb20gJy4vdmlld3Mvdml6LXZpZXcvJztcbi8vaW1wb3J0IEZpZnR5U3RhdGVWaWV3IGZyb20gJy4vdmlld3MvZmlmdHktc3RhdGUvJztcblxuLy8gYXBwIHByb3RvdHlwZVxuaW1wb3J0IFBDVEFwcCBmcm9tICdAQXBwJztcblxuLy9zdGF0aWMgY29udGVudFxuaW1wb3J0IHNlY3Rpb25zIGZyb20gJy4vcGFydGlhbHMvc2VjdGlvbnMuaHRtbCc7XG5pbXBvcnQgaW50cm8gZnJvbSAnLi9wYXJ0aWFscy9pbnRyby5tZCc7XG5pbXBvcnQgbm90ZXMgZnJvbSAnLi9wYXJ0aWFscy9ub3Rlcy5tZCc7XG5cblxucHVibGlzaFdpbmRvd1Jlc2l6ZShTKTsgLy8gaW5pdGlhbGl6ZSBwdWJsaXNoIHdpbmRvdyByZXNpemUgd2l0aCBTdGF0ZU1PZHVsZSBhcyBwYXJhbS9cblxuY29uc3QgbW9kZWwgPSB7XG4gICAgXG4gICAgLy8gYW55IHN0YXRpYyBkYXRhIHNob3VsZCBiZSBtYWRlIHByb3BlcnRpZXMgb2YgdGhlIG1vZGVsIG5vd1xuICAgIFxufTtcblxuY29uc3Qgdmlld3MgPSBbXTsgLy8gdmlld3MgZ2V0IHB1c2ggIG5seSBhZnRlciBtb2RlbCBpcyBmdWxseSByZWFkeSwgd2l0aCBhbnkgcnVudGltZSBkYXRhIGxvYWRlZFxuY29uc3Qgc3RhcnRZZWFyID0gMjAxNDtcblxuZnVuY3Rpb24gZ2V0UnVudGltZURhdGEoKXtcbiAgICB2YXIgcHVibGljUGF0aCA9ICcnO1xuICAgIGlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiAhd2luZG93LklTX1BSRVJFTkRFUklORyApeyAvLyBwcm9kdWN0aW9uIGJ1aWxkIG5lZWRzIHRvIGtub3cgdGhlIHB1YmxpYyBwYXRoIG9mIGFzc2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgZGV2IGFuZCBwcmV2aWV3LCBhc3NldHMgYXJlIGEgY2hpbGQgb2Ygcm9vdDsgZm9yIGJ1aWxkIHRoZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJlIGluIHNvbWUgZGlzdGFudCBwYXRoIG9uIHNpdGVjb3JlXG4gICAgICAgIHB1YmxpY1BhdGggPSBQVUJMSUNQQVRIOyAvLyBUT0RPOiBzZXQgUFVCTElDUEFUSCB1c2luZyBkZWZpbmUgcGx1Z2luIGluIHdlYnBhY2suYnVpbGQuanNcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdmFyIGFwcENvbnRhaW5lciA9IHRoaXMuZWw7XG4gICAgICAgIFBhcGEucGFyc2UocHVibGljUGF0aCArIGRhdGEsIHtcbiAgICAgICAgICAgIGRvd25sb2FkOiB0cnVlLFxuICAgICAgICAgICAgZHluYW1pY1R5cGluZzogdHJ1ZSxcbiAgICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICAgIGZhc3RNb2RlOiBmYWxzZSwgLy8gc3RyaW5nIGVzY2FwZXMgbmVlZGVkIHRvIHBhcnNlIHNyaW5naWZpZWQgYXJyYXlzIHdpdGggY29tbWFzXG4gICAgICAgICAgICBza2lwRW1wdHlMaW5lczogdHJ1ZSxcbiAgICAgICAgICAgIGJlZm9yZUZpcnN0Q2h1bmsoY2h1bmspeyAvLyBvbiBwcmVyZW5kZXIsIGRvIHNpbXBsZSBoYXNoIG9mIENTViBjb250ZW50cyBhbmQgYXBwZW5kIGFzIGF0dHJpYnV0ZSBvZiB0aGUgYXBwIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF0IHJ1bnRpbWUsIGRvIHNhbWUgaGFzaCBvZiBjc3YgY29udGVudHMgYW5kIGNvbXBhcmUgdG8gb3JpZ2luYWwuIGlmIGhhc2hlcyBtYXRjaCwgYXBwIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250aW51ZSBub3JtYWxseS4gaWYgbWlzbWF0Y2hlZCwgYXBwIHdpbGwgcmVyZW5kZXIgYWxsIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIG5ldyBkYXRhLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIGZvciBgaG90YCB1cGRhdGluZyBvZiB0aGUgbWFpbiBkYXRhIGZpbGUgd2l0aG91dCByZWJ1aWxkaW5nIHRoZSBkaXN0LyBmb2xkZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYG1vZGVsLmlzTWlzbWF0Y2hgIHdpbGwgYmUgc2V0IHRvIGB0cnVlYCBhbmQgdGhlIHByZXJlbmRlcmluZyBmdW5jdGlvbnMgd2lsbCBjaGVjayB0aGF0IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHJlc3BvbmQgYWNjb3JkaW5nbHlcblxuICAgICAgICAgICAgICAgIHZhciBkYXRhSGFzaCA9IGNodW5rLmhhc2hDb2RlKCk7IC8vIGhhc2hDb2RlIGlzIGhlbHBlciBmdW5jdGlvbiBmcm9tIHV0aWxzLCBpbXBvcnRlZCBhbmQgSUlGRSdkIGluIGluZGV4LmpzXG4gICAgICAgICAgICAgICAgaWYgKCB3aW5kb3cuSVNfUFJFUkVOREVSSU5HICl7XG4gICAgICAgICAgICAgICAgICAgIGFwcENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1oYXNoJywgZGF0YUhhc2gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnICYmIGRhdGFIYXNoLnRvU3RyaW5nKCkgIT09IGFwcENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1oYXNoJykgKXtcbiAgICAgICAgICAgICAgICAgICAgYXBwQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS1kYXRhLW1pc21hdGNoJyx0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhdGEgbWlzbWF0Y2gnKTtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuaXNNaXNtYXRjaGVkID0gdHJ1ZTsgLy8gc2V0IHNvIHRoYXQgY29tcG9uZW50cyBjYW4gYWNjZXNzIHRoaXMgdmFsdWUgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiByZXNwb25zZSA9PiB7IC8vIGFycm93IGZ1bmN0aW9uIGhlcmUgdG8ga2VlcCBgdGhpc2AgY29udGV4dCBhcyBTdGF0ZURlYnRcbiAgICAgICAgICAgICAgICB2aWV3cy5sZW5ndGggPSAwOyAgXG4gICAgICAgICAgICAgICAgbW9kZWwueWVhcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIG51bWJlciBvZiB5ZWFycyBpbiBkYXRhLiByZWxpZXMgb24gYWxsIHJvd3MgaGF2aW5nIHRoZSBzYW1lIG51bWJlclxuICAgICAgICAgICAgICAgIHZhciBsb29wV2hpbGUgPSB0cnVlLFxuICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcblxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhcnJheSBvZiB5ZWFycyBwcmVzZW50IGluIHRoZSBkYXRhLCBzdGFydGluZyB3aXRoIHN0YXJ0WWVhciBkZWZpbmVkIGFib3ZlXG4gICAgICAgICAgICAgICAgd2hpbGUgKCBsb29wV2hpbGUgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCByZXNwb25zZS5kYXRhWzBdLmhhc093blByb3BlcnR5KHN0YXJ0WWVhciArIGluZGV4KSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnllYXJzLnB1c2goc3RhcnRZZWFyICsgaW5kZXgpOyAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9vcFdoaWxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrK1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtb2RlbC51bm5lc3RlZERhdGEgPSByZXNwb25zZS5kYXRhLm1hcChkID0+IHsgLy8gdHVybiBlYWNoIHN0cmluZyB2YWx1ZSBsaWtlIFwiMS0xZFwiIGludG8gYW4gYXJyYXkgLCBbMSwxZF1cbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9ICdkcnVnLScgKyBkLmlkO1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC55ZWFycy5mb3JFYWNoKHllYXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZFt5ZWFyXSA9IFswLDFdLm1hcChvYnNlcnZhdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBwYXJzZUludChkW3llYXJdLnNwbGl0KCctJylbb2JzZXJ2YXRpb25dKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNjb250aW51ZWQ6ICggZFt5ZWFyXS5zcGxpdCgnLScpW29ic2VydmF0aW9uXS50b1N0cmluZygpLmluZGV4T2YoJ2QnKSAhPT0gLTEgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1vZGVsLmRhdGEgPSBtb2RlbC55ZWFycy5tYXAoeWVhciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb25zOiBbMCwxXS5tYXAob2JzZXJ2YXRpb24gPT4geyAvLyBlYWNoIHllYXIgaGFzIHR3byBvYnNlcnZhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzEsIDIsIDMsIDQsIDVdLm1hcChwaGFzZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhhc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IG1vZGVsLnVubmVzdGVkRGF0YS5maWx0ZXIoZCA9PiBkW3llYXJdW29ic2VydmF0aW9uXS5jb2x1bW4gPT09IHBoYXNlKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobW9kZWwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUxlbmd0aHMgPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNjb250aW51ZWRMZW5ndGhzID0gW107XG4gICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgbWF4aW11bSBudW1iZXIgb2Ygbm9uZGlzY29udGludWVkIGRydWdzIGluIG9uZSBjb2x1bW4gYXQgYW55IHRpbWUuIHNpZGUgZWZmZWN0IHB1c2hlcyBcbiAgICAgICAgICAgICAgICAvLyBudW1iZXIgb2YgZGlzY29udGludWVkIGRydWdzIHRvIGFycmF5IGZvciBtYXggdGJkIGxhdGVyXG4gICAgICAgICAgICAgICAgLy8gdGhlc2UgdmFsdWVzIHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hlbiBzdGFja2VkIGRydWdzIG5lZWQgdG8gYmUgY29sbGFwc2VkIGRvd25cbiAgICAgICAgICAgICAgICAvLyBmb3Igc21hbGxlciBzY3JlZW5zXG4gICAgICAgICAgICAgICAgbW9kZWwuZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkLm9ic2VydmF0aW9ucy5mb3JFYWNoKChvYnMsaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzLmZvckVhY2gocGhhc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUxlbmd0aHMucHVzaChwaGFzZS52YWx1ZXMuZmlsdGVyKGRydWcgPT4gZHJ1Z1tkLnllYXJdW2ldLmlzRGlzY29udGludWVkICE9PSB0cnVlKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvbnRpbnVlZExlbmd0aHMucHVzaChwaGFzZS52YWx1ZXMuZmlsdGVyKGRydWcgPT4gZHJ1Z1tkLnllYXJdW2ldLmlzRGlzY29udGludWVkID09PSB0cnVlKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1vZGVsLm1heEFjdGl2ZSA9IE1hdGgubWF4KC4uLmFjdGl2ZUxlbmd0aHMpO1xuICAgICAgICAgICAgICAgIG1vZGVsLm1heERpc2NvbnRpbnVlZCA9IE1hdGgubWF4KC4uLmRpc2NvbnRpbnVlZExlbmd0aHMpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1vZGVsKTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8qIHB1c2ggdmlld3Mgbm93IHRoYXQgbW9kZWwgaXMgY29tcGxldGUgKi9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2aWV3cy5wdXNoKFxuICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KG1vZGVsLCBWaXpWaWV3LCAnZGl2I3Zpei12aWV3Jywge3JlbmRlclRvU2VsZWN0b3I6ICcjYWJ4LXZpc3VhbGl6YXRpb24nLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXN9KVxuICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuY3JlYXRlQ29tcG9uZW50KG1vZGVsLCBGaWZ0eVN0YXRlVmlldywgJ2RpdiNmaWZ0eS1zdGF0ZS12aWV3Jywge3JlbmRlclRvU2VsZWN0b3I6ICcjc2VjdGlvbi1zdGF0ZXMgLmpzLWlubmVyLWNvbnRlbnQnLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXN9KSAgXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFCWEFwcCBleHRlbmRzIFBDVEFwcCB7XG4gICAgcHJlcmVuZGVyKCl7XG5cbiAgICAgICAgLy9pbmRzZXJ0IGFueSBzdGF0aWMgY29udGVudCBoZXJlXG4gICAgICAgIHRoaXMuZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBzZWN0aW9ucyk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbnRybycpLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGludHJvICk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhYngtbm90ZXMnKS5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBub3RlcyApO1xuICAgICAgICAvL3RoaXMud2FzUHJlcmVuZGVyZWQgPSBmYWxzZTtcbiAgICAgICAgZ2V0UnVudGltZURhdGEuY2FsbCh0aGlzKS50aGVuKCgpID0+IHsgLy8gYmluZCBTdGF0ZURlYnQgYXMgY29udGV4dCBgdGhpc2AgZm9yIGdldFJ1bnRpbWVEYXRhIHNvIHRoYXQgaXQgY2FuIGFjY2Vlc3MgdGhpcy5lbCwgZXRjXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codmlldyk7XG4gICAgICAgICAgLyogPyAqLyAgICAgIHZpZXcuY29udGFpbmVyLmFwcGVuZENoaWxkKHZpZXcuZWwpOyAvLyBkaWZmZXJlbnQgaGVyZSBmcm9tIENhcGVUb3duOiB2aWV3cyBhcmVuJ3QgYXBwZW5kZWQgdG8gYXBwIGNvbnRhaW5lcjsgc29tZSBzdGF0aWMgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyBwcmVzZW50IGFscmVhZHkuIHZpZXdzIGFwcGVuZGVkIHRvICp0aGVpciogY29udGFpbmVyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvL3RoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3JlbmRlcmVkJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIHN1cGVyLmluaXQoKTtcbiAgICAgICAvLyB0aGlzLmF0dGFjaFNlY3Rpb25PcGVuQ2xvc2UoKTtcbiAgICAgICAgZ2V0UnVudGltZURhdGEuY2FsbCh0aGlzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICAgICAgICAgICB2aWV3LmluaXQodGhpcyk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4vKiAgICAgICAgaWYgKCBtb2R1bGUuaG90ICl7XG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBtb2R1bGUuaG90LmFjY2VwdCgnLi92aWV3cy9zdGF0ZS1jb21wYXJpc29uJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhY2NlcHQhJywgYXJndW1lbnRzLCB0aGF0KTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VjdGlvbi1jb21wYXJpc29uIC5qcy1pbm5lci1jb250ZW50JykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gdGhhdC5jcmVhdGVDb21wb25lbnQobW9kZWwsIENvbXBhcmlzb25WaWV3LCAnZGl2I2NvbXBhcmlzb24tdmlldycsIHtyZW5kZXJUb1NlbGVjdG9yOiAnI3NlY3Rpb24tY29tcGFyaXNvbiAuanMtaW5uZXItY29udGVudCcsIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IHRydWV9KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQuY29udGFpbmVyLmFwcGVuZENoaWxkKHJlcGxhY2VtZW50LmVsKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gKi9cbiAgICB9XG59IiwiLyogZ2xvYmFsIHByb2Nlc3MgKi9cbi8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwidmFyc0lnbm9yZVBhdHRlcm5cIjogXCJTdHJpbmdIZWxwZXJzfEZhZGVJblRleHRcIiB9XSovIC8vYWxsb3cgU3RyaW5nSGVscGVycyB0byBiZSBpcG9ydGVkIChkZWZpbmVkKSBhbmQgbm90IGJlaW5nIGV4cGxpY2l0bHkgY2FsbGVkXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIHdpdGhvdXQgdHJpZ2dlcmluZyBlc2xpbnQgZXJyb3JcbmltcG9ydCB7IFN0cmluZ0hlbHBlcnMsIEZhZGVJblRleHQgfSBmcm9tICdAVXRpbHMnOyAvLyBzdHJpbmcgaGVscGVycyBpcyBhbiBJSUZFXG5pbXBvcnQgQUJYQXBwIGZyb20gJy4vYWJ4LmpzJztcbmltcG9ydCAnLi9jc3Mvc3R5bGVzLnNjc3MnO1xuXG5cbmNvbnN0IGNvbnRhaW5lciA9ICcjcGV3LWFwcCc7XG5jb25zdCBBcHAgPSBuZXcgQUJYQXBwKGNvbnRhaW5lciwgeyAvLyBTdGF0ZURlYnQgZXh0ZW5kcyBQQ1RBcHAtanMuIFBDVEFwcC1qcydzIGNvbnN0cnVjdG9yIG1ldGhvZCBpcyBjYWxsZWQsIHAxIGNvbnRhaXVuZXIsIHAyIG9wdGlvbnNcblx0bmVlZHNSb3V0ZXI6IGZhbHNlXG59KTtcbmlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgd2luZG93LklTX1BSRVJFTkRFUklORyApeyAvLyBwcm9jZXNzIGRldmVsb3BtZW50IG1lYW5zIHVzaW5nIFdlYlBhY2sgZGV2IHNlcnZlci4gd2luZG93IGlzIHByZXJlbmRlcmluZyBtZWFucyBpblxuXHRBcHAucHJlcmVuZGVyKCk7XG59XG5BcHAuaW5pdCgpOyJdLCJzb3VyY2VSb290IjoiIn0=