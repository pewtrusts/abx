!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=4)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GTMPush=function(t){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:t})},e.publishWindowResize=function(t){var e;window.addEventListener("resize",function(){e||(e=setTimeout(function(){t.setState("resize",[document.documentElement.clientWidth,document.documentElement.clientHeight]),e=null},350))},!1)};e.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(t,e){var n=this,i=e||0;return e&&(this.style.transition="opacity "+e+"s ease-in-out"),new Promise(function(e){var r=window.getComputedStyle(n).getPropertyValue("transition-duration")||i,o=1e3*parseFloat(r);n.fadeOutContent(),setTimeout(function(){n.innerHTML=t,n.classList.remove("no-opacity"),e(!0)},o)})})),e.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(t,e){if(this.length<=t)return this;var n=this.substr(0,t-1);return(e?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var t,e=0;if(0===this.length)return e;for(t=0;t<this.length;t++)e=(e<<5)-e+this.charCodeAt(t),e|=0;return e})),e.DOMHelpers={c:function(t){if(-1!==t.indexOf(".")||-1!==t.indexOf("#")){var e=t.match(/\.([^#.]*)/g)||[],n=t.match(/#([^.]*)/),i=t.match(/^([^.#]+)/),r=document.createElement(i[0]);return e.forEach(function(t){r.classList.add(t.replace(".",""))}),null!==n&&r.setAttribute("id",n[1]),r}return document.createElement(t)},q:function(t){return document.querySelector(t)},qa:function(t){return document.querySelectorAll(t)}}},function(t,e,n){const i=n(2),r={};function o(){console.log(r)}Array.prototype.compare=Array.prototype.compare||function(t){if(this.length!=t.length)return!1;if(0===this.length&&0===t.length)return!0;console.log("in compare"),console.log(this);for(var e=0;e<t.length;e++)if(this[e]!==t[e])return!1;return!0},e.stateModule={logState:o,getState:function(t){return void 0!==r[t]?r[t][0]:void 0},getPreviousState:function(t){return void 0!==r[t]&&void 0!==r[t][1]?r[t][1]:void 0},setState:function(t,e){void 0===r[t]?(r[t]=[e],i.publish(t,e),o()):("string"==typeof e||"number"==typeof e?r[t][0]!==e:!Array.isArray(e)||!Array.isArray(r[t][0])||!e.compare(r[t][0]))&&(r[t].unshift(e),i.publish(t,e),o(),r[t].length>2&&(r[t].length=2))}}},function(t,e,n){(function(t){!function(n,i){"use strict";var r={};n.PubSub=r;var o=n.define;!function(t){var e={},n=-1;function i(t){var e;for(e in t)if(t.hasOwnProperty(e))return!0;return!1}function r(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function o(t,e,n){t(e,n)}function a(t,n,i,a){var s,p=e[n],u=a?o:r;if(e.hasOwnProperty(n))for(s in p)p.hasOwnProperty(s)&&u(p[s],t,i)}function s(t,n,r,o){var s=function(t,e,n){return function(){var i=String(t),r=i.lastIndexOf(".");for(a(t,t,e,n);-1!==r;)i=i.substr(0,r),r=i.lastIndexOf("."),a(t,i,e,n)}}(t="symbol"==typeof t?t.toString():t,n,o),p=function(t){var n=String(t),r=Boolean(e.hasOwnProperty(n)&&i(e[n])),o=n.lastIndexOf(".");for(;!r&&-1!==o;)n=n.substr(0,o),o=n.lastIndexOf("."),r=Boolean(e.hasOwnProperty(n)&&i(e[n]));return r}(t);return!!p&&(!0===r?s():setTimeout(s,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,i){if("function"!=typeof i)return!1;t="symbol"==typeof t?t.toString():t,e.hasOwnProperty(t)||(e[t]={});var r="uid_"+String(++n);return e[t][r]=i,r},t.subscribeOnce=function(e,n){var i=t.subscribe(e,function(){t.unsubscribe(i),n.apply(this,arguments)});return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)e.hasOwnProperty(n)&&0===n.indexOf(t)&&delete e[n]},t.unsubscribe=function(n){var i,r,o,a="string"==typeof n&&(e.hasOwnProperty(n)||function(t){var n;for(n in e)if(e.hasOwnProperty(n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!a&&"string"==typeof n,p="function"==typeof n,u=!1;if(!a){for(i in e)if(e.hasOwnProperty(i)){if(r=e[i],s&&r[n]){delete r[n],u=n;break}if(p)for(o in r)r.hasOwnProperty(o)&&r[o]===n&&(delete r[o],u=!0)}return u}t.clearSubscriptions(n)}}(r),"function"==typeof o&&o.amd?o(function(){return r}):(void 0!==t&&t.exports&&(e=t.exports=r),e.PubSub=r,t.exports=e=r)}("object"==typeof window&&window||this)}).call(this,n(7)(t))},function(t,e,n){"use strict";(function(t){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.15.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,i=["Edge","Trident","Firefox"],r=0,o=0;o<i.length;o+=1)if(n&&navigator.userAgent.indexOf(i[o])>=0){r=1;break}var a=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},r))}};function s(t){return t&&"[object Function]"==={}.toString.call(t)}function p(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function u(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function l(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=p(t),n=e.overflow,i=e.overflowX,r=e.overflowY;return/(auto|scroll|overlay)/.test(n+r+i)?t:l(u(t))}var c=n&&!(!window.MSInputMethodContext||!document.documentMode),d=n&&/MSIE 10/.test(navigator.userAgent);function f(t){return 11===t?c:10===t?d:c||d}function h(t){if(!t)return document.documentElement;for(var e=f(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===p(n,"position")?h(n):n:t?t.ownerDocument.documentElement:document.documentElement}function m(t){return null!==t.parentNode?m(t.parentNode):t}function v(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,r=n?e:t,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var a,s,p=o.commonAncestorContainer;if(t!==p&&e!==p||i.contains(r))return"BODY"===(s=(a=p).nodeName)||"HTML"!==s&&h(a.firstElementChild)!==a?h(p):p;var u=m(t);return u.host?v(u.host,e):v(t,m(e).host)}function y(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var i=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||i)[e]}return t[e]}function b(t,e){var n="x"===e?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function g(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],f(10)?parseInt(n["offset"+t])+parseInt(i["margin"+("Height"===t?"Top":"Left")])+parseInt(i["margin"+("Height"===t?"Bottom":"Right")]):0)}function w(t){var e=t.body,n=t.documentElement,i=f(10)&&getComputedStyle(n);return{height:g("Height",e,n,i),width:g("Width",e,n,i)}}var x=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},k=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),S=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},E=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t};function _(t){return E({},t,{right:t.left+t.width,bottom:t.top+t.height})}function O(t){var e={};try{if(f(10)){e=t.getBoundingClientRect();var n=y(t,"top"),i=y(t,"left");e.top+=n,e.left+=i,e.bottom+=n,e.right+=i}else e=t.getBoundingClientRect()}catch(t){}var r={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?w(t.ownerDocument):{},a=o.width||t.clientWidth||r.right-r.left,s=o.height||t.clientHeight||r.bottom-r.top,u=t.offsetWidth-a,l=t.offsetHeight-s;if(u||l){var c=p(t);u-=b(c,"x"),l-=b(c,"y"),r.width-=u,r.height-=l}return _(r)}function C(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=f(10),r="HTML"===e.nodeName,o=O(t),a=O(e),s=l(t),u=p(e),c=parseFloat(u.borderTopWidth,10),d=parseFloat(u.borderLeftWidth,10);n&&r&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var h=_({top:o.top-a.top-c,left:o.left-a.left-d,width:o.width,height:o.height});if(h.marginTop=0,h.marginLeft=0,!i&&r){var m=parseFloat(u.marginTop,10),v=parseFloat(u.marginLeft,10);h.top-=c-m,h.bottom-=c-m,h.left-=d-v,h.right-=d-v,h.marginTop=m,h.marginLeft=v}return(i&&!n?e.contains(s):e===s&&"BODY"!==s.nodeName)&&(h=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=y(e,"top"),r=y(e,"left"),o=n?-1:1;return t.top+=i*o,t.bottom+=i*o,t.left+=r*o,t.right+=r*o,t}(h,e)),h}function P(t){if(!t||!t.parentElement||f())return document.documentElement;for(var e=t.parentElement;e&&"none"===p(e,"transform");)e=e.parentElement;return e||document.documentElement}function A(t,e,n,i){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=r?P(t):v(t,e);if("viewport"===i)o=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,i=C(t,n),r=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=e?0:y(n),s=e?0:y(n,"left");return _({top:a-i.top+i.marginTop,left:s-i.left+i.marginLeft,width:r,height:o})}(a,r);else{var s=void 0;"scrollParent"===i?"BODY"===(s=l(u(e))).nodeName&&(s=t.ownerDocument.documentElement):s="window"===i?t.ownerDocument.documentElement:i;var c=C(s,a,r);if("HTML"!==s.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===p(e,"position"))return!0;var i=u(e);return!!i&&t(i)}(a))o=c;else{var d=w(t.ownerDocument),f=d.height,h=d.width;o.top+=c.top-c.marginTop,o.bottom=f+c.top,o.left+=c.left-c.marginLeft,o.right=h+c.left}}var m="number"==typeof(n=n||0);return o.left+=m?n:n.left||0,o.top+=m?n:n.top||0,o.right-=m?n:n.right||0,o.bottom-=m?n:n.bottom||0,o}function L(t,e,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=A(n,i,o,r),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},p=Object.keys(s).map(function(t){return E({key:t},s[t],{area:(e=s[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),u=p.filter(function(t){var e=t.width,i=t.height;return e>=n.clientWidth&&i>=n.clientHeight}),l=u.length>0?u[0].key:p[0].key,c=t.split("-")[1];return l+(c?"-"+c:"")}function T(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return C(n,i?P(e):v(e,n),i)}function M(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),i=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function D(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function B(t,e,n){n=n.split("-")[0];var i=M(t),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",p=o?"height":"width",u=o?"width":"height";return r[a]=e[a]+e[p]/2-i[p]/2,r[s]=n===s?e[s]-i[u]:e[D(s)],r}function I(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function R(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var i=I(t,function(t){return t[e]===n});return t.indexOf(i)}(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&s(n)&&(e.offsets.popper=_(e.offsets.popper),e.offsets.reference=_(e.offsets.reference),e=n(e,t))}),e}function j(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function Y(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var r=e[i],o=r?""+r+n:t;if(void 0!==document.body.style[o])return o}return null}function z(t){var e=t.ownerDocument;return e?e.defaultView:window}function H(t,e,n,i){n.updateBound=i,z(t).addEventListener("resize",n.updateBound,{passive:!0});var r=l(t);return function t(e,n,i,r){var o="BODY"===e.nodeName,a=o?e.ownerDocument.defaultView:e;a.addEventListener(n,i,{passive:!0}),o||t(l(a.parentNode),n,i,r),r.push(a)}(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function F(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,z(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function N(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function q(t,e){Object.keys(e).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&N(e[n])&&(i="px"),t.style[n]=e[n]+i})}var X=n&&/Firefox/i.test(navigator.userAgent);function W(t,e,n){var i=I(t,function(t){return t.name===e}),r=!!i&&t.some(function(t){return t.name===n&&t.enabled&&t.order<i.order});if(!r){var o="`"+e+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}var U=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],V=U.slice(3);function K(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=V.indexOf(t),i=V.slice(n+1).concat(V.slice(0,n));return e?i.reverse():i}var G={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function J(t,e,n,i){var r=[0,0],o=-1!==["right","left"].indexOf(i),a=t.split(/(\+|\-)/).map(function(t){return t.trim()}),s=a.indexOf(I(a,function(t){return-1!==t.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var p=/\s*,\s*|\s+/,u=-1!==s?[a.slice(0,s).concat([a[s].split(p)[0]]),[a[s].split(p)[1]].concat(a.slice(s+1))]:[a];return(u=u.map(function(t,i){var r=(1===i?!o:o)?"height":"width",a=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,i){var r=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],a=r[2];if(!o)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=i}return _(s)[e]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(t,r,e,n)})})).forEach(function(t,e){t.forEach(function(n,i){N(n)&&(r[e]+=n*("-"===t[i-1]?-1:1))})}),r}var Q={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var r=t.offsets,o=r.reference,a=r.popper,s=-1!==["bottom","top"].indexOf(n),p=s?"left":"top",u=s?"width":"height",l={start:S({},p,o[p]),end:S({},p,o[p]+o[u]-a[u])};t.offsets.popper=E({},a,l[i])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,i=t.placement,r=t.offsets,o=r.popper,a=r.reference,s=i.split("-")[0],p=void 0;return p=N(+n)?[+n,0]:J(n,o,a,s),"left"===s?(o.top+=p[0],o.left-=p[1]):"right"===s?(o.top+=p[0],o.left+=p[1]):"top"===s?(o.left+=p[0],o.top-=p[1]):"bottom"===s&&(o.left+=p[0],o.top+=p[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||h(t.instance.popper);t.instance.reference===n&&(n=h(n));var i=Y("transform"),r=t.instance.popper.style,o=r.top,a=r.left,s=r[i];r.top="",r.left="",r[i]="";var p=A(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);r.top=o,r.left=a,r[i]=s,e.boundaries=p;var u=e.priority,l=t.offsets.popper,c={primary:function(t){var n=l[t];return l[t]<p[t]&&!e.escapeWithReference&&(n=Math.max(l[t],p[t])),S({},t,n)},secondary:function(t){var n="right"===t?"left":"top",i=l[n];return l[t]>p[t]&&!e.escapeWithReference&&(i=Math.min(l[n],p[t]-("right"===t?l.width:l.height))),S({},n,i)}};return u.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";l=E({},l,c[e](t))}),t.offsets.popper=l,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,i=e.reference,r=t.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(r),s=a?"right":"bottom",p=a?"left":"top",u=a?"width":"height";return n[s]<o(i[p])&&(t.offsets.popper[p]=o(i[p])-n[u]),n[p]>o(i[s])&&(t.offsets.popper[p]=o(i[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!W(t.instance.modifiers,"arrow","keepTogether"))return t;var i=e.element;if("string"==typeof i){if(!(i=t.instance.popper.querySelector(i)))return t}else if(!t.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],o=t.offsets,a=o.popper,s=o.reference,u=-1!==["left","right"].indexOf(r),l=u?"height":"width",c=u?"Top":"Left",d=c.toLowerCase(),f=u?"left":"top",h=u?"bottom":"right",m=M(i)[l];s[h]-m<a[d]&&(t.offsets.popper[d]-=a[d]-(s[h]-m)),s[d]+m>a[h]&&(t.offsets.popper[d]+=s[d]+m-a[h]),t.offsets.popper=_(t.offsets.popper);var v=s[d]+s[l]/2-m/2,y=p(t.instance.popper),b=parseFloat(y["margin"+c],10),g=parseFloat(y["border"+c+"Width"],10),w=v-t.offsets.popper[d]-b-g;return w=Math.max(Math.min(a[l]-m,w),0),t.arrowElement=i,t.offsets.arrow=(S(n={},d,Math.round(w)),S(n,f,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(j(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=A(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),i=t.placement.split("-")[0],r=D(i),o=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case G.FLIP:a=[i,r];break;case G.CLOCKWISE:a=K(i);break;case G.COUNTERCLOCKWISE:a=K(i,!0);break;default:a=e.behavior}return a.forEach(function(s,p){if(i!==s||a.length===p+1)return t;i=t.placement.split("-")[0],r=D(i);var u=t.offsets.popper,l=t.offsets.reference,c=Math.floor,d="left"===i&&c(u.right)>c(l.left)||"right"===i&&c(u.left)<c(l.right)||"top"===i&&c(u.bottom)>c(l.top)||"bottom"===i&&c(u.top)<c(l.bottom),f=c(u.left)<c(n.left),h=c(u.right)>c(n.right),m=c(u.top)<c(n.top),v=c(u.bottom)>c(n.bottom),y="left"===i&&f||"right"===i&&h||"top"===i&&m||"bottom"===i&&v,b=-1!==["top","bottom"].indexOf(i),g=!!e.flipVariations&&(b&&"start"===o&&f||b&&"end"===o&&h||!b&&"start"===o&&m||!b&&"end"===o&&v),w=!!e.flipVariationsByContent&&(b&&"start"===o&&h||b&&"end"===o&&f||!b&&"start"===o&&v||!b&&"end"===o&&m),x=g||w;(d||y||x)&&(t.flipped=!0,(d||y)&&(i=a[p+1]),x&&(o=function(t){return"end"===t?"start":"start"===t?"end":t}(o)),t.placement=i+(o?"-"+o:""),t.offsets.popper=E({},t.offsets.popper,B(t.instance.popper,t.offsets.reference,t.placement)),t=R(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,r=i.popper,o=i.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return r[a?"left":"top"]=o[n]-(s?r[a?"width":"height"]:0),t.placement=D(e),t.offsets.popper=_(r),t}},hide:{order:800,enabled:!0,fn:function(t){if(!W(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=I(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,i=e.y,r=t.offsets.popper,o=I(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:e.gpuAcceleration,s=h(t.instance.popper),p=O(s),u={position:r.position},l=function(t,e){var n=t.offsets,i=n.popper,r=n.reference,o=Math.round,a=Math.floor,s=function(t){return t},p=o(r.width),u=o(i.width),l=-1!==["left","right"].indexOf(t.placement),c=-1!==t.placement.indexOf("-"),d=e?l||c||p%2==u%2?o:a:s,f=e?o:s;return{left:d(p%2==1&&u%2==1&&!c&&e?i.left-1:i.left),top:f(i.top),bottom:f(i.bottom),right:d(i.right)}}(t,window.devicePixelRatio<2||!X),c="bottom"===n?"top":"bottom",d="right"===i?"left":"right",f=Y("transform"),m=void 0,v=void 0;if(v="bottom"===c?"HTML"===s.nodeName?-s.clientHeight+l.bottom:-p.height+l.bottom:l.top,m="right"===d?"HTML"===s.nodeName?-s.clientWidth+l.right:-p.width+l.right:l.left,a&&f)u[f]="translate3d("+m+"px, "+v+"px, 0)",u[c]=0,u[d]=0,u.willChange="transform";else{var y="bottom"===c?-1:1,b="right"===d?-1:1;u[c]=v*y,u[d]=m*b,u.willChange=c+", "+d}var g={"x-placement":t.placement};return t.attributes=E({},g,t.attributes),t.styles=E({},u,t.styles),t.arrowStyles=E({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return q(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&q(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,i,r){var o=T(r,e,t,n.positionFixed),a=L(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",a),q(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},$=function(){function t(e,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=a(this.update.bind(this)),this.options=E({},t.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(E({},t.Defaults.modifiers,r.modifiers)).forEach(function(e){i.options.modifiers[e]=E({},t.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return E({name:t},i.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&s(t.onLoad)&&t.onLoad(i.reference,i.popper,i.options,t,i.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return k(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=T(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=L(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=B(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=R(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[Y("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=H(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return F.call(this)}}]),t}();$.Utils=("undefined"!=typeof window?window:t).PopperUtils,$.placements=U,$.Defaults=Q,e.a=$}).call(this,n(15))},function(t,e,n){"use strict";n(0);var i,r=n(5),o=(i=r)&&i.__esModule?i:{default:i};n(22);var a=new o.default("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&a.prerender(),a.init()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=f(n(6)),o=n(1),a=n(0),s=f(n(8)),p=f(n(9)),u=f(n(17)),l=f(n(19)),c=f(n(20)),d=f(n(21));function f(t){return t&&t.__esModule?t:{default:t}}(0,a.publishWindowResize)(o.stateModule);var h={},m=[],v=2014;function y(){var t=this;return new Promise(function(e,n){var i=t.el;r.default.parse(""+s.default,{download:!0,dynamicTyping:!0,header:!0,fastMode:!1,skipEmptyLines:!0,beforeFirstChunk:function(t){var e=t.hashCode();window.IS_PRERENDERING?i.setAttribute("data-data-hash",e):e.toString()!==i.getAttribute("data-data-hash")&&(i.setAttribute("data-data-mismatch",!0),console.log("data mismatch"),h.isMismatched=!0)},complete:function(n){m.length=0,h.years=[];for(var i=!0,r=0;i;)n.data[0].hasOwnProperty(v+r)?h.years.push(v+r):i=!1,r++;h.unnestedData=n.data.map(function(t){return t.id="drug-"+t.id,h.years.forEach(function(e){t[e]=[0,1].map(function(n){return{column:parseInt(t[e].split("-")[n]),isDiscontinued:-1!==t[e].split("-")[n].toString().indexOf("d")}})}),t}),h.data=h.years.map(function(t){return{year:t,observations:[0,1].map(function(e){return[1,2,3,4,5].map(function(n){return{phase:n,values:h.unnestedData.filter(function(i){return i[t][e].column===n})}})})}}),console.log(h);var o=[],a=[];h.data.forEach(function(t){t.observations.forEach(function(e,n){e.forEach(function(e){o.push(e.values.filter(function(e){return!0!==e[t.year][n].isDiscontinued}).length),a.push(e.values.filter(function(e){return!0===e[t.year][n].isDiscontinued}).length)})})}),h.maxActive=Math.max.apply(Math,o),h.maxDiscontinued=Math.max.apply(Math,a),console.log(h),m.push(t.createComponent(h,p.default,"div#viz-view",{renderToSelector:"#abx-visualization",rerenderOnDataMismatch:!0,parent:t})),e(!0)},error:function(t){n(t)}})})}var b=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,u.default),i(e,[{key:"prerender",value:function(){this.el.insertAdjacentHTML("beforeend",l.default),document.querySelector("#intro").insertAdjacentHTML("afterbegin",c.default),document.querySelector("#abx-notes").insertAdjacentHTML("afterbegin",d.default),y.call(this).then(function(){m.forEach(function(t){console.log(t),t.container.appendChild(t.el)})})}},{key:"init",value:function(){var t=this;(function t(e,n,i){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,n);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,i)}if("value"in r)return r.value;var a=r.get;return void 0!==a?a.call(i):void 0})(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),y.call(this).then(function(){m.forEach(function(e){e.init(t)})})}}]),e}();e.default=b},function(t,e,n){var i,r,o;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),r=[],void 0===(o="function"==typeof(i=function(){"use strict";var t,e,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},i=!n.document&&!!n.postMessage,r=i&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),o=!1,a={},s=0,p={parse:function(e,i){var r=(i=i||{}).dynamicTyping||!1;if(S(r)&&(i.dynamicTypingFunction=r,r={}),i.dynamicTyping=r,i.transform=!!S(i.transform)&&i.transform,i.worker&&p.WORKERS_SUPPORTED){var u=function(){if(!p.WORKERS_SUPPORTED)return!1;if(!o&&null===p.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var e=p.SCRIPT_PATH||t;e+=(-1!==e.indexOf("?")?"&":"?")+"papaworker";var i=new n.Worker(e);return i.onmessage=b,i.id=s++,a[i.id]=i}();return u.userStep=i.step,u.userChunk=i.chunk,u.userComplete=i.complete,u.userError=i.error,i.step=S(i.step),i.chunk=S(i.chunk),i.complete=S(i.complete),i.error=S(i.error),delete i.worker,void u.postMessage({input:e,config:i,workerId:u.id})}var l=null;return p.NODE_STREAM_INPUT,"string"==typeof e?l=i.download?new c(i):new f(i):!0===e.readable&&S(e.read)&&S(e.on)?l=new h(i):(n.File&&e instanceof File||e instanceof Object)&&(l=new d(i)),l.stream(e)},unparse:function(t,e){var n=!1,i=!0,r=",",o="\r\n",a='"',s=!1;"object"==typeof e&&("string"!=typeof e.delimiter||p.BAD_DELIMITERS.filter(function(t){return-1!==e.delimiter.indexOf(t)}).length||(r=e.delimiter),("boolean"==typeof e.quotes||Array.isArray(e.quotes))&&(n=e.quotes),"boolean"!=typeof e.skipEmptyLines&&"string"!=typeof e.skipEmptyLines||(s=e.skipEmptyLines),"string"==typeof e.newline&&(o=e.newline),"string"==typeof e.quoteChar&&(a=e.quoteChar),"boolean"==typeof e.header&&(i=e.header));var u=new RegExp(v(a),"g");if("string"==typeof t&&(t=JSON.parse(t)),Array.isArray(t)){if(!t.length||Array.isArray(t[0]))return c(null,t,s);if("object"==typeof t[0])return c(l(t[0]),t,s)}else if("object"==typeof t)return"string"==typeof t.data&&(t.data=JSON.parse(t.data)),Array.isArray(t.data)&&(t.fields||(t.fields=t.meta&&t.meta.fields),t.fields||(t.fields=Array.isArray(t.data[0])?t.fields:l(t.data[0])),Array.isArray(t.data[0])||"object"==typeof t.data[0]||(t.data=[t.data])),c(t.fields||[],t.data||[],s);throw"exception: Unable to serialize unrecognized input";function l(t){if("object"!=typeof t)return[];var e=[];for(var n in t)e.push(n);return e}function c(t,e,n){var a="";"string"==typeof t&&(t=JSON.parse(t)),"string"==typeof e&&(e=JSON.parse(e));var s=Array.isArray(t)&&0<t.length,p=!Array.isArray(e[0]);if(s&&i){for(var u=0;u<t.length;u++)0<u&&(a+=r),a+=d(t[u],u);0<e.length&&(a+=o)}for(var l=0;l<e.length;l++){var c=s?t.length:e[l].length,f=!1,h=s?0===Object.keys(e[l]).length:0===e[l].length;if(n&&!s&&(f="greedy"===n?""===e[l].join("").trim():1===e[l].length&&0===e[l][0].length),"greedy"===n&&s){for(var m=[],v=0;v<c;v++){var y=p?t[v]:v;m.push(e[l][y])}f=""===m.join("").trim()}if(!f){for(var b=0;b<c;b++){0<b&&!h&&(a+=r);var g=s&&p?t[b]:b;a+=d(e[l][g],b)}l<e.length-1&&(!n||0<c&&!h)&&(a+=o)}}return a}function d(t,e){if(null==t)return"";if(t.constructor===Date)return JSON.stringify(t).slice(1,25);t=t.toString().replace(u,a+a);var i="boolean"==typeof n&&n||Array.isArray(n)&&n[e]||function(t,e){for(var n=0;n<e.length;n++)if(-1<t.indexOf(e[n]))return!0;return!1}(t,p.BAD_DELIMITERS)||-1<t.indexOf(r)||" "===t.charAt(0)||" "===t.charAt(t.length-1);return i?a+t+a:t}}};if(p.RECORD_SEP=String.fromCharCode(30),p.UNIT_SEP=String.fromCharCode(31),p.BYTE_ORDER_MARK="\ufeff",p.BAD_DELIMITERS=["\r","\n",'"',p.BYTE_ORDER_MARK],p.WORKERS_SUPPORTED=!i&&!!n.Worker,p.SCRIPT_PATH=null,p.NODE_STREAM_INPUT=1,p.LocalChunkSize=10485760,p.RemoteChunkSize=5242880,p.DefaultDelimiter=",",p.Parser=y,p.ParserHandle=m,p.NetworkStreamer=c,p.FileStreamer=d,p.StringStreamer=f,p.ReadableStreamStreamer=h,n.jQuery){var u=n.jQuery;u.fn.parse=function(t){var e=t.config||{},i=[];return this.each(function(t){if("INPUT"!==u(this).prop("tagName").toUpperCase()||"file"!==u(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var r=0;r<this.files.length;r++)i.push({file:this.files[r],inputElem:this,instanceConfig:u.extend({},e)})}),r(),this;function r(){if(0!==i.length){var e,n,r,a=i[0];if(S(t.before)){var s=t.before(a.file,a.inputElem);if("object"==typeof s){if("abort"===s.action)return e=a.file,n=a.inputElem,r=s.reason,void(S(t.error)&&t.error({name:"AbortError"},e,n,r));if("skip"===s.action)return void o();"object"==typeof s.config&&(a.instanceConfig=u.extend(a.instanceConfig,s.config))}else if("skip"===s)return void o()}var l=a.instanceConfig.complete;a.instanceConfig.complete=function(t){S(l)&&l(t,a.file,a.inputElem),o()},p.parse(a.file,a.instanceConfig)}else S(t.complete)&&t.complete()}function o(){i.splice(0,1),r()}}}function l(t){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(t){var e=x(t);e.chunkSize=parseInt(e.chunkSize),t.step||t.chunk||(e.chunkSize=null),this._handle=new m(e),(this._handle.streamer=this)._config=e}.call(this,t),this.parseChunk=function(t,e){if(this.isFirstChunk&&S(this._config.beforeFirstChunk)){var i=this._config.beforeFirstChunk(t);void 0!==i&&(t=i)}this.isFirstChunk=!1;var o=this._partialLine+t;this._partialLine="";var a=this._handle.parse(o,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=a.meta.cursor;this._finished||(this._partialLine=o.substring(s-this._baseIndex),this._baseIndex=s),a&&a.data&&(this._rowCount+=a.data.length);var u=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(r)n.postMessage({results:a,workerId:p.WORKER_ID,finished:u});else if(S(this._config.chunk)&&!e){if(this._config.chunk(a,this._handle),this._handle.paused()||this._handle.aborted())return;a=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(a.data),this._completeResults.errors=this._completeResults.errors.concat(a.errors),this._completeResults.meta=a.meta),this._completed||!u||!S(this._config.complete)||a&&a.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),u||a&&a.meta.paused||this._nextChunk(),a}},this._sendError=function(t){S(this._config.error)?this._config.error(t):r&&this._config.error&&n.postMessage({workerId:p.WORKER_ID,error:t,finished:!1})}}function c(t){var e;(t=t||{}).chunkSize||(t.chunkSize=p.RemoteChunkSize),l.call(this,t),this._nextChunk=i?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(t){this._input=t,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(e=new XMLHttpRequest,this._config.withCredentials&&(e.withCredentials=this._config.withCredentials),i||(e.onload=k(this._chunkLoaded,this),e.onerror=k(this._chunkError,this)),e.open("GET",this._input,!i),this._config.downloadRequestHeaders){var t=this._config.downloadRequestHeaders;for(var n in t)e.setRequestHeader(n,t[n])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;e.setRequestHeader("Range","bytes="+this._start+"-"+r),e.setRequestHeader("If-None-Match","webkit-no-cache")}try{e.send()}catch(t){this._chunkError(t.message)}i&&0===e.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var t;4===e.readyState&&(e.status<200||400<=e.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(t=e.getResponseHeader("Content-Range"))?-1:parseInt(t.substr(t.lastIndexOf("/")+1))),this.parseChunk(e.responseText)))},this._chunkError=function(t){var n=e.statusText||t;this._sendError(new Error(n))}}function d(t){var e,n;(t=t||{}).chunkSize||(t.chunkSize=p.LocalChunkSize),l.call(this,t);var i="undefined"!=typeof FileReader;this.stream=function(t){this._input=t,n=t.slice||t.webkitSlice||t.mozSlice,i?((e=new FileReader).onload=k(this._chunkLoaded,this),e.onerror=k(this._chunkError,this)):e=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var t=this._input;if(this._config.chunkSize){var r=Math.min(this._start+this._config.chunkSize,this._input.size);t=n.call(t,this._start,r)}var o=e.readAsText(t,this._config.encoding);i||this._chunkLoaded({target:{result:o}})},this._chunkLoaded=function(t){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(t.target.result)},this._chunkError=function(){this._sendError(e.error)}}function f(t){var e;l.call(this,t=t||{}),this.stream=function(t){return e=t,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var t=this._config.chunkSize,n=t?e.substr(0,t):e;return e=t?e.substr(t):"",this._finished=!e,this.parseChunk(n)}}}function h(t){l.call(this,t=t||{});var e=[],n=!0,i=!1;this.pause=function(){l.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){l.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(t){this._input=t,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){i&&1===e.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),e.length?this.parseChunk(e.shift()):n=!0},this._streamData=k(function(t){try{e.push("string"==typeof t?t:t.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(e.shift()))}catch(t){this._streamError(t)}},this),this._streamError=k(function(t){this._streamCleanUp(),this._sendError(t)},this),this._streamEnd=k(function(){this._streamCleanUp(),i=!0,this._streamData("")},this),this._streamCleanUp=k(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function m(t){var e,n,i,r=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,o=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,a=this,s=0,u=0,l=!1,c=!1,d=[],f={data:[],errors:[],meta:{}};if(S(t.step)){var h=t.step;t.step=function(e){if(f=e,g())b();else{if(b(),0===f.data.length)return;s+=e.data.length,t.preview&&s>t.preview?n.abort():h(f,a)}}}function m(e){return"greedy"===t.skipEmptyLines?""===e.join("").trim():1===e.length&&0===e[0].length}function b(){if(f&&i&&(k("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+p.DefaultDelimiter+"'"),i=!1),t.skipEmptyLines)for(var e=0;e<f.data.length;e++)m(f.data[e])&&f.data.splice(e--,1);return g()&&function(){if(f){for(var e=0;g()&&e<f.data.length;e++)for(var n=0;n<f.data[e].length;n++){var i=f.data[e][n];t.trimHeaders&&(i=i.trim()),d.push(i)}f.data.splice(0,1)}}(),function(){if(!f||!t.header&&!t.dynamicTyping&&!t.transform)return f;for(var e=0;e<f.data.length;e++){var n,i=t.header?{}:[];for(n=0;n<f.data[e].length;n++){var r=n,o=f.data[e][n];t.header&&(r=n>=d.length?"__parsed_extra":d[n]),t.transform&&(o=t.transform(o,r)),o=w(r,o),"__parsed_extra"===r?(i[r]=i[r]||[],i[r].push(o)):i[r]=o}f.data[e]=i,t.header&&(n>d.length?k("FieldMismatch","TooManyFields","Too many fields: expected "+d.length+" fields but parsed "+n,u+e):n<d.length&&k("FieldMismatch","TooFewFields","Too few fields: expected "+d.length+" fields but parsed "+n,u+e))}return t.header&&f.meta&&(f.meta.fields=d),u+=f.data.length,f}()}function g(){return t.header&&0===d.length}function w(e,n){return i=e,t.dynamicTypingFunction&&void 0===t.dynamicTyping[i]&&(t.dynamicTyping[i]=t.dynamicTypingFunction(i)),!0===(t.dynamicTyping[i]||t.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(r.test(n)?parseFloat(n):o.test(n)?new Date(n):""===n?null:n):n;var i}function k(t,e,n,i){f.errors.push({type:t,code:e,message:n,row:i})}this.parse=function(r,o,a){var s=t.quoteChar||'"';if(t.newline||(t.newline=function(t,e){t=t.substr(0,1048576);var n=new RegExp(v(e)+"([^]*?)"+v(e),"gm"),i=(t=t.replace(n,"")).split("\r"),r=t.split("\n"),o=1<r.length&&r[0].length<i[0].length;if(1===i.length||o)return"\n";for(var a=0,s=0;s<i.length;s++)"\n"===i[s][0]&&a++;return a>=i.length/2?"\r\n":"\r"}(r,s)),i=!1,t.delimiter)S(t.delimiter)&&(t.delimiter=t.delimiter(r),f.meta.delimiter=t.delimiter);else{var u=function(e,n,i,r){for(var o,a,s,u=[",","\t","|",";",p.RECORD_SEP,p.UNIT_SEP],l=0;l<u.length;l++){var c=u[l],d=0,f=0,h=0;s=void 0;for(var v=new y({comments:r,delimiter:c,newline:n,preview:10}).parse(e),b=0;b<v.data.length;b++)if(i&&m(v.data[b]))h++;else{var g=v.data[b].length;f+=g,void 0!==s?1<g&&(d+=Math.abs(g-s),s=g):s=0}0<v.data.length&&(f/=v.data.length-h),(void 0===a||a<d)&&1.99<f&&(a=d,o=c)}return{successful:!!(t.delimiter=o),bestDelimiter:o}}(r,t.newline,t.skipEmptyLines,t.comments);u.successful?t.delimiter=u.bestDelimiter:(i=!0,t.delimiter=p.DefaultDelimiter),f.meta.delimiter=t.delimiter}var c=x(t);return t.preview&&t.header&&c.preview++,e=r,n=new y(c),f=n.parse(e,o,a),b(),l?{meta:{paused:!0}}:f||{meta:{paused:!1}}},this.paused=function(){return l},this.pause=function(){l=!0,n.abort(),e=e.substr(n.getCharIndex())},this.resume=function(){l=!1,a.streamer.parseChunk(e,!0)},this.aborted=function(){return c},this.abort=function(){c=!0,n.abort(),f.meta.aborted=!0,S(t.complete)&&t.complete(f),e=""}}function v(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function y(t){var e,n=(t=t||{}).delimiter,i=t.newline,r=t.comments,o=t.step,a=t.preview,s=t.fastMode,u=e=void 0===t.quoteChar?'"':t.quoteChar;if(void 0!==t.escapeChar&&(u=t.escapeChar),("string"!=typeof n||-1<p.BAD_DELIMITERS.indexOf(n))&&(n=","),r===n)throw"Comment character same as delimiter";!0===r?r="#":("string"!=typeof r||-1<p.BAD_DELIMITERS.indexOf(r))&&(r=!1),"\n"!==i&&"\r"!==i&&"\r\n"!==i&&(i="\n");var l=0,c=!1;this.parse=function(t,p,d){if("string"!=typeof t)throw"Input must be a string";var f=t.length,h=n.length,m=i.length,y=r.length,b=S(o),g=[],w=[],x=[],k=l=0;if(!t)return R();if(s||!1!==s&&-1===t.indexOf(e)){for(var E=t.split(i),_=0;_<E.length;_++){if(x=E[_],l+=x.length,_!==E.length-1)l+=i.length;else if(d)return R();if(!r||x.substr(0,y)!==r){if(b){if(g=[],M(x.split(n)),j(),c)return R()}else M(x.split(n));if(a&&a<=_)return g=g.slice(0,a),R(!0)}}return R()}for(var O,C=t.indexOf(n,l),P=t.indexOf(i,l),A=new RegExp(v(u)+v(e),"g");;)if(t[l]!==e)if(r&&0===x.length&&t.substr(l,y)===r){if(-1===P)return R();l=P+m,P=t.indexOf(i,l),C=t.indexOf(n,l)}else if(-1!==C&&(C<P||-1===P))x.push(t.substring(l,C)),l=C+h,C=t.indexOf(n,l);else{if(-1===P)break;if(x.push(t.substring(l,P)),I(P+m),b&&(j(),c))return R();if(a&&g.length>=a)return R(!0)}else for(O=l,l++;;){if(-1===(O=t.indexOf(e,O+1)))return d||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:g.length,index:l}),B();if(O===f-1)return B(t.substring(l,O).replace(A,e));if(e!==u||t[O+1]!==u){if(e===u||0===O||t[O-1]!==u){var L=D(-1===P?C:Math.min(C,P));if(t[O+1+L]===n){x.push(t.substring(l,O).replace(A,e)),l=O+1+L+h,C=t.indexOf(n,l),P=t.indexOf(i,l);break}var T=D(P);if(t.substr(O+1+T,m)===i){if(x.push(t.substring(l,O).replace(A,e)),I(O+1+T+m),C=t.indexOf(n,l),b&&(j(),c))return R();if(a&&g.length>=a)return R(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:g.length,index:l}),O++}}else O++}return B();function M(t){g.push(t),k=l}function D(e){var n=0;if(-1!==e){var i=t.substring(O+1,e);i&&""===i.trim()&&(n=i.length)}return n}function B(e){return d||(void 0===e&&(e=t.substr(l)),x.push(e),l=f,M(x),b&&j()),R()}function I(e){l=e,M(x),x=[],P=t.indexOf(i,l)}function R(t){return{data:g,errors:w,meta:{delimiter:n,linebreak:i,aborted:c,truncated:!!t,cursor:k+(p||0)}}}function j(){o(R()),g=[],w=[]}},this.abort=function(){c=!0},this.getCharIndex=function(){return l}}function b(t){var e=t.data,n=a[e.workerId],i=!1;if(e.error)n.userError(e.error,e.file);else if(e.results&&e.results.data){var r={abort:function(){i=!0,g(e.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(S(n.userStep)){for(var o=0;o<e.results.data.length&&(n.userStep({data:[e.results.data[o]],errors:e.results.errors,meta:e.results.meta},r),!i);o++);delete e.results}else S(n.userChunk)&&(n.userChunk(e.results,r,e.file),delete e.results)}e.finished&&!i&&g(e.workerId,e.results)}function g(t,e){var n=a[t];S(n.userComplete)&&n.userComplete(e),n.terminate(),delete a[t]}function w(){throw"Not implemented."}function x(t){if("object"!=typeof t||null===t)return t;var e=Array.isArray(t)?[]:{};for(var n in t)e[n]=x(t[n]);return e}function k(t,e){return function(){t.apply(e,arguments)}}function S(t){return"function"==typeof t}return r?n.onmessage=function(t){var e=t.data;if(void 0===p.WORKER_ID&&e&&(p.WORKER_ID=e.workerId),"string"==typeof e.input)n.postMessage({workerId:p.WORKER_ID,results:p.parse(e.input,e.config),finished:!0});else if(n.File&&e.input instanceof File||e.input instanceof Object){var i=p.parse(e.input,e.config);i&&n.postMessage({workerId:p.WORKER_ID,results:i,finished:!0})}}:p.WORKERS_SUPPORTED&&(e=document.getElementsByTagName("script"),t=e.length?e[e.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){o=!0},!0):o=!0),(c.prototype=Object.create(l.prototype)).constructor=c,(d.prototype=Object.create(l.prototype)).constructor=d,(f.prototype=Object.create(f.prototype)).constructor=f,(h.prototype=Object.create(l.prototype)).constructor=h,p})?i.apply(e,r):i)||(t.exports=o)},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){t.exports=n.p+"data/abx-data.csv?v=a69ace"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=u(n(10)),o=u(n(11)),a=n(1),s=u(n(12)),p=u(n(14));function u(t){return t&&t.__esModule?t:{default:t}}n(16);var l=[["Phase 1","P1"],["Phase 2","P2"],["Phase 3","P3"],["Application","NDA"],["Approved","&#10004"]],c=1200,d=!0,f=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,r.default),i(e,[{key:"prerender",value:function(){var t=this;this.minUnitDimension=30,this.headerHeight=45,this.unitPadding=2,this.headers=l,this.phaseMembers=[0,1].map(function(){return[0].concat(l).map(function(e){return{active:0===e?t.model.unnestedData.map(function(t){return t.id}):[],discontinued:[]}})}),this.heightNeeded=(this.model.maxActive+this.model.maxDiscontinued+1)*(this.minUnitDimension+this.unitPadding)+this.headerHeight+this.unitPadding+51+90+61+40;var n=function t(e,n,i){null===e&&(e=Function.prototype);var r=Object.getOwnPropertyDescriptor(e,n);if(void 0===r){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,i)}if("value"in r)return r.value;var a=r.get;return void 0!==a?a.call(i):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.prerendered&&!this.rerender)return n;function i(t){for(var e=0;e<5;e++){var n=document.createElement("div");n.classList.add(o.default.column);for(var i=t.name===o.default.activeContainer?this.model.maxActive:this.model.maxDiscontinued,r=0;r<i;r++){var a=document.createElement("div");a.classList.add(o.default.drug,o.default.drugEmpty),n.appendChild(a)}t.appendChild(n)}}var r=document.createElement("div");r.classList.add(o.default.controlContainer);var a=document.createElement("button");a.classList.add(o.default.playButton),a.type="button",a.title="Play",r.appendChild(a),this.model.years.forEach(function(t,e){var n=document.createElement("button");n.classList.add(o.default.yearButton,""+(0===e?o.default.yearButtonActive:"nope")),n.type="button",n.value=t,n.textContent=t,r.appendChild(n)}),n.appendChild(r);var s=document.createElement("div");s.classList.add(o.default.container),n.appendChild(s);var p=document.createElement("div");p.classList.add(o.default.activeContainer),p.name=o.default.activeContainer,s.appendChild(p);var u=document.createElement("div");u.classList.add(o.default.headerContainer),u.name=o.default.headerContainer,l.forEach(function(t){var e=document.createElement("div");e.classList.add(o.default.headerDiv),e.innerHTML='<span class="'+o.default.phaseFull+'">'+t[0].toUpperCase()+'</span><span class="'+o.default.phaseAbbr+'">'+t[1]+"</span>",u.appendChild(e)}),s.appendChild(u);var c=document.createElement("div");return c.classList.add(o.default.discontinuedContainer),c.name=o.default.discontinuedContainer,s.appendChild(c),i.call(this,p),i.call(this,c),n}},{key:"populatePlaceholders",value:function(t,e){var n=this;console.log(this.previousStatuses);var i=document.querySelector("."+o.default.activeContainer),r=document.querySelector("."+o.default.discontinuedContainer);this.phaseMembers[0]=JSON.parse(JSON.stringify(this.phaseMembers[1])),console.log(this.phaseMembers,this.previousStatuses),[i,r].forEach(function(i,r){var a=0!==r;n.model.data[t].observations[e].forEach(function(s,p){function u(t){return this.phaseMembers[1][p+1][a?"discontinued":"active"].indexOf(t)}var l=s.values.filter(function(i){return 0===r?!i[n.model.years[t]][e].isDiscontinued:i[n.model.years[t]][e].isDiscontinued}).sort(function(t,e){return void 0===n.previousStatuses?t.id-e.id:n.previousStatuses[t.id]||n.previousStatuses[e.id]?n.previousStatuses[t.id]?n.previousStatuses[e.id]?n.previousStatuses[t.id].column===p+1&&n.previousStatuses[t.id].isDiscontinued===a?n.previousStatuses[e.id].column===p+1&&n.previousStatuses[e.id].isDiscontinued===a?u.call(n,t.id)<u.call(n,e.id)?-1:1:-1:n.previousStatuses[e.id].column===p+1&&n.previousStatuses[e.id].isDiscontinued===a?1:n.previousStatuses[t.id].column===p+1?n.previousStatuses[e.id].column===p+1&&n.previousStatuses[e.id].isDiscontinued!==a?t.id-e.id:n.previousStatuses[e.id].column===p+1?1:-1:n.previousStatuses[e.id].column===p+1?1:n.previousStatuses[t.id].column>n.previousStatuses[e.id].column?-1:n.previousStatuses[t.id].column<n.previousStatuses[e.id].column?1:n.previousStatuses[t.id].isDiscontinued===a&&n.previousStatuses[e.id].isDiscontinued!==a?-1:n.previousStatuses[e.id].isDiscontinued===a&&n.previousStatuses[t.id].isDiscontinued!==a?1:t.id-e.id:-1:1:t.id-e.id}),c=i.querySelectorAll("."+o.default.column)[p];n.phaseMembers[1][p+1][0===r?"active":"discontinued"].length=0,l.forEach(function(t,e){!function(t,e,n){t.id=e.id,t.classList.remove(o.default.drugEmpty),t.classList.add(""+(e.gramNegative?o.default.gramNegative:"nope"),""+(e.novel?o.default.novel:"nope"),""+(e.urgent?o.default.urgent:"nope")),1===n&&t.classList.add(o.default.isDiscontinued),t.setAttribute("data-tippy-content","<strong>"+e.name+"</strong><br />"+e.company)}(c.querySelectorAll("."+o.default.drug)[e],t,r),n.phaseMembers[1][p+1][0===r?"active":"discontinued"].push(t.id)}),n.phaseMembers[1][0].active=n.model.unnestedData.filter(function(t){return 0===t[+n.currentYear][n.currentObservation].column}).map(function(t){return t.id})})})}},{key:"setYearState",value:function(t,e){var n=a.stateModule.getState("year");n&&!e&&this.recordStatuses(n[0],n[2]),a.stateModule.setState("year",t),this.currentYear=t[0],this.currentObservation=t[2]}},{key:"init",value:function(){s.default.setSubs([["resize",this.checkHeight.bind(this)],["year",this.update.bind(this)]]),this.setYearState([this.model.years[0],null,1]),this.nonEmptyDrugs=document.querySelectorAll("."+o.default.drug+":not(."+o.default.drugEmpty+")"),this.checkHeight(),this.initializeYearButtons(),this.initializePlayButton()}},{key:"initializePlayButton",value:function(){this.playYearsBind=this.playYears.bind(this),document.querySelector("."+o.default.playButton).addEventListener("click",this.playYearsBind)}},{key:"pausePlay",value:function(){document.querySelector("."+o.default.yearButtonPrevious).classList.remove(o.default.yearButtonPrevious),this.playBtn.blur(),this.playBtn.removeEventListener("click",this.pausePlayBind),a.stateModule.setState("isPaused",!0),this.playBtn.classList.add(o.default.willPause)}},{key:"disableYearButtons",value:function(){this.yearButtons=this.yearButtons||document.querySelectorAll("."+o.default.yearButton),this.yearButtons.forEach(function(t){t.setAttribute("disabled","disabled")})}},{key:"disablePlayButton",value:function(){this.playBtn=this.playBtn||document.querySelector("."+o.default.playButton),this.playBtn.setAttribute("disabled","disabled")}},{key:"enablePlayButton",value:function(){this.playBtn=this.playBtn||document.querySelector("."+o.default.playButton),this.playBtn.removeAttribute("disabled")}},{key:"enableYearButtons",value:function(){this.yearButtons=this.yearButtons||document.querySelectorAll("."+o.default.yearButton),this.yearButtons.forEach(function(t){t.removeAttribute("disabled")})}},{key:"playYears",value:function(t){var e=this;function n(){var t=this;if(a.stateModule.getState("isPaused"))return this.enableYearButtons(),void this.removePauseOption();++i<=this.model.years[this.model.years.length-1]?new Promise(function(e){new Promise(function(e){t.setYearState([i,e,0])}).then(function(){t.setYearState([i,e,1])})}).then(function(){n.call(t)}):(this.showReplayOption.call(this),this.enableYearButtons())}a.stateModule.setState("isPaused",!1),a.stateModule.setState("isBackward",!1),this.disableYearButtons(),this.playBtn=this.playBtn||document.querySelector("."+o.default.playButton),this.playBtn.blur(),"reciprocal"!==t&&this.showPauseOption();var i=a.stateModule.getState("year")[0],r=a.stateModule.getState("year")[2];console.log(i,r),this.model.years.indexOf(+i)===this.model.years.length-1&&1===r?(this.removeReplayOption(),d=!0,this.clearAttributesAndDetails(),this.setYearState([this.model.years[0],null,0],!0),setTimeout(function(){e.playYears("reciprocal")},2*c)):0===r?new Promise(function(t){a.stateModule.getState("isPaused")?(e.enableYearButtons(),t(!1)):e.setYearState([i,t,1])}).then(function(t){a.stateModule.getState("isPaused")||!0!==t||n.call(e)}):a.stateModule.getState("isPaused")||n.call(this)}},{key:"showReplayOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.replayBtn.removeEventListener("click",this.pausePlayBind),this.replayBtn.addEventListener("click",this.playYearsBind),this.replayBtn.classList.add(o.default.replay),this.replayBtn.classList.remove(o.default.pause),this.replayBtn.classList.remove(o.default.willPause),this.replayBtn.title="Replay"}},{key:"showPauseOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.pausePlayBind=this.pausePlay.bind(this),this.removeReplayOption(),this.replayBtn.removeEventListener("click",this.playYearsBind),this.replayBtn.addEventListener("click",this.pausePlayBind),this.replayBtn.classList.add(o.default.pause),this.replayBtn.classList.remove(o.default.replay),this.replayBtn.title="Pause"}},{key:"removePauseOption",value:function(){console.log("removing pause option"),this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.replayBtn.removeEventListener("click",this.pausePlayBind),this.replayBtn.addEventListener("click",this.playYearsBind),this.replayBtn.classList.remove(o.default.pause),this.replayBtn.classList.remove(o.default.willPause),this.replayBtn.title="Play"}},{key:"removeReplayOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.replayBtn.classList.remove(o.default.replay)}},{key:"checkHeight",value:function(){window.innerHeight<this.heightNeeded?document.body.classList.add(o.default.squat):document.body.classList.remove(o.default.squat),document.querySelector("#section-comparison .js-inner-content").offsetHeight>window.innerHeight-100?document.body.classList.add(o.default.superSquat):document.body.classList.remove(o.default.superSquat),function(){var t=document.documentElement,e=Math.floor((this.heightNeeded-this.unitPadding-this.headerHeight)*(this.maxActive/(this.maxActive+this.maxDiscontinued)));t.style.setProperty("--unit-dimension",this.minUnitDimension+"px"),t.style.setProperty("--header-height",this.headerHeight+"px"),t.style.setProperty("--max-container-height",this.heightNeeded+"px"),t.style.setProperty("--active-max-height",e+"px"),t.style.setProperty("--discontinued-max-height",Math.floor(this.heightNeeded-e-this.headerHeight)+"px")}.call(this)}},{key:"initializeYearButtons",value:function(){var t=this;document.querySelectorAll("."+o.default.yearButton).forEach(function(e){var n=t;e.addEventListener("click",function(){var t=this,e=a.stateModule.getState("year")[0];console.log(e,this.value),e!=this.value&&(a.stateModule.setState("isPaused",!1),this.blur(),n.disablePlayButton(),n.removeReplayOption(),+this.value>+e?(a.stateModule.setState("isBackward",!1),new Promise(function(e){n.setYearState([t.value,e,0])}).then(function(){n.setYearState([t.value,null,1])})):(a.stateModule.setState("isBackward",!0),new Promise(function(){n.setYearState([t.value,null,1])})))})})}},{key:"update",value:function(t,e){document.querySelector("."+o.default.yearButtonActive).classList.remove(o.default.yearButtonActive,o.default.observation,o.default.observation0,o.default.observation1),document.querySelector('button[value="'+e[0]+'"]').classList.add(o.default.yearButtonActive),this.FLIP(parseInt(e[0]),e[1],e[2]),this.updateText()}},{key:"updateText",value:function(){var t=this.phaseMembers[1][this.phaseMembers[1].length-1].active.length,e=this.phaseMembers[1].reduce(function(t,e){return t+e.discontinued.length},0),n=document.querySelector("#total-approved"),i=document.querySelector("#total-discontinued");n.innerHTML!=t&&document.querySelector("#total-approved").fadeInContent(t),i.innerHTML!=e&&document.querySelector("#total-discontinued").fadeInContent(e)}},{key:"FLIP",value:function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;this.recordFirstPositions(),this.clearAttributesAndDetails(),this.populatePlaceholders(this.model.years.indexOf(t),n),this.nonEmptyDrugs=document.querySelectorAll("."+o.default.drug+":not(."+o.default.drugEmpty+")"),(0,p.default)(this.nonEmptyDrugs,{arrow:!0,distance:3}),a.stateModule.getState("isBackward")?this.enablePlayButton():(this.invertPositions(),this.playAnimation(e))}},{key:"recordStatuses",value:function(t,e){this.previousStatuses=this.model.data[this.model.years.indexOf(+t)].observations[e].reduce(function(n,i){return i.values.forEach(function(i){n[i.id]={column:i[t][e].column,isDiscontinued:i[t][e].isDiscontinued}}),n},{})}},{key:"recordFirstPositions",value:function(){this.firstPositions=Array.from(document.querySelectorAll("."+o.default.drug+":not("+o.default.drugEmpty+")")).reduce(function(t,e){return t[e.id]=e.getBoundingClientRect(),t},{})}},{key:"clearAttributesAndDetails",value:function(){this.nonEmptyDrugs.forEach(function(t){t.className=o.default.drug+" "+o.default.drugEmpty,t.id="",t.setAttribute("data-tippy-content",""),t._tippy&&(t.removeAttribute("tabindex"),t._tippy.destroy())})}},{key:"invertPositions",value:function(){var t=this;this.nonEmptyDrugs.forEach(function(e){e.style.transitionDuration="0s";var n=e.getBoundingClientRect(),i=t.firstPositions[e.id]?t.firstPositions[e.id].top-n.top:-3e3,r=t.firstPositions[e.id]?t.firstPositions[e.id].left-n.left:-3e3;e.style.transform="translate("+r+"px, "+i+"px)",0===i&&0===r||e.classList.add(o.default.isTranslated),t.firstPositions[e.id]||e.classList.add(o.default.entering)})}},{key:"playAnimation",value:function(t){var e=this;console.log(a.stateModule.getState("isBackward"));var n=a.stateModule.getState("isBackward")?0:l.length,i=a.stateModule.getState("year"),r=i[0],s=i[2];function p(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:c,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=t.style.transform.match(/translate\((.*?)\)/)[1].replace(" ","").split(",").map(function(t){return parseInt(t)});t.classList.add(o.default.isMoving),console.log(i),t.style.transitionDuration=e/1e3+"s",setTimeout(function(){console.log(t._tippy.popper.style);var r=t._tippy.popper.style.transform.match(/translate3d\((.*?)\)/),a=r?r[1].replace(" ","").split(",").map(function(t){return parseInt(t)}):[0,0,0];console.log(a),0!==n&&1!==n&&2!==n||(t._tippy.popper.style.transitionDuration=e/1e3+"s",t._tippy.popper.style.transitionTimingFunction="ease-in-out"),window.requestAnimationFrame(function(){0!==n&&1!==n&&2!==n||(t._tippy.popper.style.transform="translate3d("+(parseInt(a[0])-parseInt(i[0]))+"px, "+(parseInt(a[1])-parseInt(i[1]))+"px, 0px)"),t.style.transform="translate(0px,0px)"}),setTimeout(function(){t.classList.remove(o.default.isMoving),t._tippy.popper.style.transitionDuration="0s",t._tippy.hide()},e)})}function u(t){var e=this;this.disableYearButtons();var i=Object.keys(this.previousStatuses).filter(function(t){return e.previousStatuses[t].column===n}),o=Array.from(this.nonEmptyDrugs).filter(function(t){return i.includes(t.id)}),d=o.filter(function(t){var n=e.model.unnestedData.find(function(e){return e.id===t.id})[r][s],i=t.style.transform.match(/translate\((.*?)\)/)[1].replace(" ","").split(",");return t.translateXY=i,e.previousStatuses[t.id].column===n.column&&e.previousStatuses[t.id].isDiscontinued===n.isDiscontinued&&("0px"!==i[0]||"0px"!==i[1])}),f=o.filter(function(t){return e.previousStatuses[t.id].isDiscontinued!==e.model.unnestedData.find(function(e){return e.id===t.id})[r][s].isDiscontinued}),h=[o.filter(function(t){return 0!==e.previousStatuses[t.id].column&&e.previousStatuses[t.id].column<e.model.unnestedData.find(function(e){return e.id===t.id})[r][s].column}),o.filter(function(t){return e.previousStatuses[t.id].column>e.model.unnestedData.find(function(e){return e.id===t.id})[r][s].column}),f,d,o.filter(function(t){return 0===e.previousStatuses[t.id].column})],m=h.reduce(function(t,e){return t+e.length},0);console.log(m),function e(i){var r=this;console.log("    subset "+i,h[i]),new Promise(function(t){0===h[i].length?(console.log("      skipping ^"),t(!0)):h[i].forEach(function(e,n,r){var o=3===i?c/12:4===i?c/1.5:c;setTimeout(function(){console.log(o),p(e,o,i)},3===i?.5*o*n:4===i?.1*o*n:o*n),n===r.length-1&&setTimeout(function(){t(!0)},4===i?2*o:o*(n+1))})}).then(function(){++i<h.length?e.call(r,i):(a.stateModule.getState("isBackward")?n<l.length:n>0)?(a.stateModule.getState("isBackward")?n++:n--,u.call(r,t)):setTimeout(function(){r.enableYearButtons(),console.log(a.stateModule.getState("year")[0],r.model.years[r.model.years.length-1],a.stateModule.getState("year")[2]),1==a.stateModule.getState("year")[2]&&(r.enablePlayButton(),a.stateModule.getState("year")[0]==r.model.years[r.model.years.length-1]&&r.showReplayOption()),a.stateModule.getState("isPaused")?(r.removePauseOption(),r.enableYearButtons()):t(!0)},0===m?0:c)})}.call(this,0)}d?(this.nonEmptyDrugs.forEach(function(t){p(t,0)}),d=!1):(Array.from(this.nonEmptyDrugs).filter(function(t){return!Object.keys(e.previousStatuses).includes(t.id)}).forEach(function(t){e.previousStatuses[t.id]={column:0,isDiscontinued:!1}}),new Promise(function(t){u.call(e,t)}).then(function(){var e;e=0,t&&setTimeout(function(){t(!0)},e)}))}}]),e}();e.default=f},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),r=n(0);var o=function(){function t(e,n){var i=this;if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),"string"!=typeof e)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=e,this.model=n.model,this.parent=n.parent,this.renderToSelector=n.renderToSelector,this.container=r.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.el=this.prerender(arguments),this.isReady=new Promise(function(t,e){i.resolve=t,i.reject=e})}return i(t,[{key:"prerender",value:function(){var t=r.DOMHelpers.q(this.selector);return t&&!this.rerender?(this.prerendered=!0,t):t?(t.innerHTML="",t):r.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),t}();e.default=o},function(t,e,n){t.exports={container:"src-views-viz-view--container",superSquat:"src-views-viz-view--superSquat",activeContainer:"src-views-viz-view--activeContainer",headerContainer:"src-views-viz-view--headerContainer",column:"src-views-viz-view--column",discontinuedContainer:"src-views-viz-view--discontinuedContainer",squat:"src-views-viz-view--squat",drug:"src-views-viz-view--drug",drugEmpty:"src-views-viz-view--drugEmpty",isTranslated:"src-views-viz-view--isTranslated",novel:"src-views-viz-view--novel",urgent:"src-views-viz-view--urgent",gramNegative:"src-views-viz-view--gramNegative",isMoving:"src-views-viz-view--isMoving",headerDiv:"src-views-viz-view--headerDiv",isAnimating:"src-views-viz-view--isAnimating",phaseFull:"src-views-viz-view--phaseFull",phaseAbbr:"src-views-viz-view--phaseAbbr",controlContainer:"src-views-viz-view--controlContainer",playButton:"src-views-viz-view--playButton",yearButton:"src-views-viz-view--yearButton",pause:"src-views-viz-view--pause",replay:"src-views-viz-view--replay",willPause:"src-views-viz-view--willPause",pauseSpinner:"src-views-viz-view--pauseSpinner",yearButtonActive:"src-views-viz-view--yearButtonActive"}},function(t,e,n){var i=n(13),r=n(2),o={};function a(t,e){var n=i(e.toString());return{token:"sub"+i(t+e),fn:n}}t.exports={logSubs:function(){console.log(o)},setSubs:function(t){t.forEach(function(t){var e=t[0],n=t[1],i=a(e,n);if(void 0===o[i.fn]&&(o[i.fn]={}),void 0!==o[i.fn][e])throw"Subscription token is already in use.";o[i.fn][e]=r.subscribe(e,n)})},cancelSub:function(t,e){var n=a(t,e);if(void 0===o[n.fn]||void 0===o[n.fn][t])throw"Subscription does not exist.";r.unsubscribe(o[n.fn][t]),delete o[n.fn][t],0===Object.keys(o[n.fn]).length&&delete o[n.fn]}}},function(t,e,n){"use strict";t.exports=function(t){for(var e=5381,n=t.length;n;)e=33*e^t.charCodeAt(--n);return e>>>0}},function(t,e,n){"use strict";n.r(e);var i=n(3);
/**!
* tippy.js v4.2.1
* (c) 2017-2019 atomiks
* MIT License
*/function r(){return(r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}var o="undefined"!=typeof window&&"undefined"!=typeof document,a=o?navigator.userAgent:"",s=/MSIE |Trident\//.test(a),p=/UCBrowser\//.test(a),u=o&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,l={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:0,distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",updateDuration:0,wait:null,zIndex:9999},c=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],d=o?Element.prototype:{},f=d.matches||d.matchesSelector||d.webkitMatchesSelector||d.mozMatchesSelector||d.msMatchesSelector;function h(t){return[].slice.call(t)}function m(t,e){return(d.closest||function(t){for(var e=this;e;){if(f.call(e,t))return e;e=e.parentElement}}).call(t,e)}function v(t,e){for(;t;){if(e(t))return t;t=t.parentElement}}var y={passive:!0},b=4,g="x-placement",w="x-out-of-boundaries",x="tippy-iOS",k="tippy-active",S=".tippy-popper",E=".tippy-tooltip",_=".tippy-content",O=".tippy-backdrop",C=".tippy-arrow",P=".tippy-roundarrow",A=Object.keys(l);function L(t,e){return{}.hasOwnProperty.call(t,e)}function T(t,e,n){if(Array.isArray(t)){var i=t[e];return null==i?n:i}return t}function M(t,e){var n;return function(){var i=this,r=arguments;clearTimeout(n),n=setTimeout(function(){return t.apply(i,r)},e)}}function D(t,e){return t&&t.modifiers&&t.modifiers[e]}function B(t,e){return t.indexOf(e)>-1}function I(t){return!(!t||!L(t,"isVirtual"))||t instanceof Element}function R(t,e){return"function"==typeof t?t.apply(null,e):t}function j(t,e){t.filter(function(t){return"flip"===t.name})[0].enabled=e}function Y(){return document.createElement("div")}function z(t,e){t.forEach(function(t){t&&(t.style.transitionDuration="".concat(e,"ms"))})}function H(t,e){t.forEach(function(t){t&&t.setAttribute("data-state",e)})}function F(t,e){var n=r({},e,{content:R(e.content,[t])},e.ignoreAttributes?{}:function(t){return A.reduce(function(e,n){var i=(t.getAttribute("data-tippy-".concat(n))||"").trim();if(!i)return e;if("content"===n)e[n]=i;else try{e[n]=JSON.parse(i)}catch(t){e[n]=i}return e},{})}(t));return(n.arrow||p)&&(n.animateFill=!1),n}function N(t,e){Object.keys(t).forEach(function(t){if(!L(e,t))throw new Error("[tippy]: `".concat(t,"` is not a valid option"))})}function q(t,e){t.innerHTML=e instanceof Element?e.innerHTML:e}function X(t,e){if(e.content instanceof Element)q(t,""),t.appendChild(e.content);else if("function"!=typeof e.content){t[e.allowHTML?"innerHTML":"textContent"]=e.content}}function W(t){return{tooltip:t.querySelector(E),backdrop:t.querySelector(O),content:t.querySelector(_),arrow:t.querySelector(C)||t.querySelector(P)}}function U(t){t.setAttribute("data-inertia","")}function V(t){var e=Y();return"round"===t?(e.className="tippy-roundarrow",q(e,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):e.className="tippy-arrow",e}function K(){var t=Y();return t.className="tippy-backdrop",t.setAttribute("data-state","hidden"),t}function G(t,e){t.setAttribute("tabindex","-1"),e.setAttribute("data-interactive","")}function J(t,e,n){var i=p&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";t[e+"EventListener"](i,n)}function Q(t){var e=t.getAttribute(g);return e?e.split("-")[0]:""}function $(t,e,n){n.split(" ").forEach(function(n){t.classList[e](n+"-theme")})}function Z(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.checkHideOnClick,n=t.exclude,i=t.duration;h(document.querySelectorAll(S)).forEach(function(t){var r=t._tippy;!r||e&&!0!==r.props.hideOnClick||n&&t===n.popper||r.hide(i)})}var tt=!1;function et(){tt||(tt=!0,u&&document.body.classList.add(x),window.performance&&document.addEventListener("mousemove",it))}var nt=0;function it(){var t=performance.now();t-nt<20&&(tt=!1,document.removeEventListener("mousemove",it),u||document.body.classList.remove(x)),nt=t}function rt(t){if(!(t.target instanceof Element))return Z();var e=m(t.target,S);if(!(e&&e._tippy&&e._tippy.props.interactive)){var n=v(t.target,function(t){return t._tippy&&t._tippy.reference===t});if(n){var i=n._tippy;if(i){var r=B(i.props.trigger||"","click");if(tt||r)return Z({exclude:i,checkHideOnClick:!0});if(!0!==i.props.hideOnClick||r)return;i.clearDelayTimeouts()}}Z({checkHideOnClick:!0})}}function ot(){var t=document.activeElement;t&&t.blur&&t._tippy&&t.blur()}var at=1;function st(t,e){var n,o,a,p,u,d=F(t,e);if(!d.multiple&&t._tippy)return null;var x,E,_,O,C=!1,P=!1,A=[],I=d.interactiveDebounce>0?M(ht,d.interactiveDebounce):ht,q=at++,Z=function(t,e){var n=Y();n.className="tippy-popper",n.id="tippy-".concat(t),n.style.zIndex=""+e.zIndex,e.role&&n.setAttribute("role",e.role);var i=Y();i.className="tippy-tooltip",i.style.maxWidth=e.maxWidth+("number"==typeof e.maxWidth?"px":""),i.setAttribute("data-size",e.size),i.setAttribute("data-animation",e.animation),i.setAttribute("data-state","hidden"),$(i,"add",e.theme);var r=Y();return r.className="tippy-content",r.setAttribute("data-state","hidden"),e.interactive&&G(n,i),e.arrow&&i.appendChild(V(e.arrowType)),e.animateFill&&(i.appendChild(K()),i.setAttribute("data-animatefill","")),e.inertia&&U(i),X(r,e),i.appendChild(r),n.appendChild(i),n}(q,d),et={id:q,reference:t,popper:Z,popperChildren:W(Z),popperInstance:null,props:d,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:St,set:Et,setContent:function(t){Et({content:t})},show:_t,hide:Ot,enable:function(){et.state.isEnabled=!0},disable:function(){et.state.isEnabled=!1},destroy:function(t){if(et.state.isDestroyed)return;et.state.isMounted&&Ot(0);ct(),delete et.reference._tippy,et.props.target&&t&&h(et.reference.querySelectorAll(et.props.target)).forEach(function(t){t._tippy&&t._tippy.destroy()});et.popperInstance&&et.popperInstance.destroy();et.state.isDestroyed=!0}};return t._tippy=et,Z._tippy=et,lt(),d.lazy||(wt(),et.popperInstance.disableEventListeners()),d.showOnInit&&xt(),d.a11y&&!d.target&&((O=t)instanceof Element&&(!f.call(O,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")||O.hasAttribute("disabled")))&&t.setAttribute("tabindex","0"),Z.addEventListener("mouseenter",function(t){et.props.interactive&&et.state.isVisible&&"mouseenter"===n&&xt(t)}),Z.addEventListener("mouseleave",function(){et.props.interactive&&"mouseenter"===n&&document.addEventListener("mousemove",I)}),et;function nt(){document.removeEventListener("mousemove",dt)}function it(){document.body.removeEventListener("mouseleave",kt),document.removeEventListener("mousemove",I)}function rt(){return[et.popperChildren.tooltip,et.popperChildren.backdrop,et.popperChildren.content]}function ot(){return et.props.followCursor&&!tt&&"focus"!==n}function pt(t,e){var n=et.popperChildren.tooltip;function i(t){t.target===n&&(J(n,"remove",i),e())}if(0===t)return e();J(n,"remove",_),J(n,"add",i),_=i}function ut(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];et.reference.addEventListener(t,e,n),A.push({eventType:t,handler:e,options:n})}function lt(){et.props.touchHold&&!et.props.target&&(ut("touchstart",ft,y),ut("touchend",mt,y)),et.props.trigger.trim().split(" ").forEach(function(t){if("manual"!==t)if(et.props.target)switch(t){case"mouseenter":ut("mouseover",yt),ut("mouseout",bt);break;case"focus":ut("focusin",yt),ut("focusout",bt);break;case"click":ut(t,yt)}else switch(ut(t,ft),t){case"mouseenter":ut("mouseleave",mt);break;case"focus":ut(s?"focusout":"blur",vt)}})}function ct(){A.forEach(function(t){var e=t.eventType,n=t.handler,i=t.options;et.reference.removeEventListener(e,n,i)}),A=[]}function dt(t){var e=o=t,n=e.clientX,i=e.clientY;if(et.popperInstance){var a=Q(et.popper),s=et.props.arrow?b+("round"===et.props.arrowType?18:16):b,p=B(["top","bottom"],a),u=B(["left","right"],a),l=p?Math.max(s,n):n,c=u?Math.max(s,i):i;p&&l>s&&(l=Math.min(n,window.innerWidth-s)),u&&c>s&&(c=Math.min(i,window.innerHeight-s));var d=et.reference.getBoundingClientRect(),f=et.props.followCursor,h="horizontal"===f,m="vertical"===f;et.popperInstance.reference=r({},et.popperInstance.reference,{getBoundingClientRect:function(){return{width:0,height:0,top:h?d.top:c,bottom:h?d.bottom:c,left:m?d.left:l,right:m?d.right:l}},clientWidth:0,clientHeight:0}),et.popperInstance.scheduleUpdate(),"initial"===f&&et.state.isVisible&&nt()}}function ft(t){et.state.isEnabled&&!gt(t)&&(et.state.isVisible||(n=t.type,t instanceof MouseEvent&&(o=t)),"click"===t.type&&!1!==et.props.hideOnClick&&et.state.isVisible?kt():xt(t))}function ht(t){var e=v(t.target,function(t){return t._tippy}),n=m(t.target,S)===et.popper,i=e===et.reference;n||i||function(t,e,n,i){if(!t)return!0;var r=n.clientX,o=n.clientY,a=i.interactiveBorder,s=i.distance,p=e.top-o>("top"===t?a+s:a),u=o-e.bottom>("bottom"===t?a+s:a),l=e.left-r>("left"===t?a+s:a),c=r-e.right>("right"===t?a+s:a);return p||u||l||c}(Q(et.popper),et.popper.getBoundingClientRect(),t,et.props)&&(it(),kt())}function mt(t){if(!gt(t))return et.props.interactive?(document.body.addEventListener("mouseleave",kt),void document.addEventListener("mousemove",I)):void kt()}function vt(t){t.target===et.reference&&(et.props.interactive&&t.relatedTarget&&et.popper.contains(t.relatedTarget)||kt())}function yt(t){m(t.target,et.props.target)&&xt(t)}function bt(t){m(t.target,et.props.target)&&kt()}function gt(t){var e="ontouchstart"in window,n=B(t.type,"touch"),i=et.props.touchHold;return e&&tt&&i&&!n||tt&&!i&&n}function wt(){var t=et.props.popperOptions,e=et.popperChildren,n=e.tooltip,o=e.arrow,a=D(t,"preventOverflow");function s(t){et.props.flip&&!et.props.flipOnUpdate&&(t.flipped&&(et.popperInstance.options.placement=t.placement),j(et.popperInstance.modifiers,!1)),n.setAttribute(g,t.placement),!1!==t.attributes[w]?n.setAttribute(w,""):n.removeAttribute(w),E&&E!==t.placement&&P&&(n.style.transition="none",requestAnimationFrame(function(){n.style.transition=""})),E=t.placement,P=et.state.isVisible;var e=Q(et.popper),i=n.style;i.top=i.bottom=i.left=i.right="",i[e]=-(et.props.distance-10)+"px";var o=a&&void 0!==a.padding?a.padding:b,s="number"==typeof o,p=r({top:s?o:o.top,bottom:s?o:o.bottom,left:s?o:o.left,right:s?o:o.right},!s&&o);p[e]=s?o+et.props.distance:(o[e]||0)+et.props.distance,et.popperInstance.modifiers.filter(function(t){return"preventOverflow"===t.name})[0].padding=p}var p=r({placement:et.props.placement},t,{modifiers:r({},t?t.modifiers:{},{preventOverflow:r({boundariesElement:et.props.boundary,padding:b},a),arrow:r({element:o,enabled:!!o},D(t,"arrow")),flip:r({enabled:et.props.flip,padding:et.props.distance+b,behavior:et.props.flipBehavior},D(t,"flip")),offset:r({offset:et.props.offset},D(t,"offset"))}),onCreate:function(e){s(e),t&&t.onCreate&&t.onCreate(e)},onUpdate:function(e){s(e),t&&t.onUpdate&&t.onUpdate(e)}});et.popperInstance=new i.a(et.reference,et.popper,p)}function xt(t){if(St(),!et.state.isVisible){if(et.props.target)return function(t){if(t){var n=m(t.target,et.props.target);n&&!n._tippy&&(st(n,r({},et.props,{content:R(e.content,[n]),appendTo:e.appendTo,target:"",showOnInit:!0})),xt(t))}}(t);if(C=!0,et.props.wait)return et.props.wait(et,t);ot()&&!et.state.isMounted&&document.addEventListener("mousemove",dt);var n=T(et.props.delay,0,l.delay);n?a=setTimeout(function(){_t()},n):_t()}}function kt(){if(St(),!et.state.isVisible)return nt();C=!1;var t=T(et.props.delay,1,l.delay);t?p=setTimeout(function(){et.state.isVisible&&Ot()},t):u=requestAnimationFrame(function(){Ot()})}function St(){clearTimeout(a),clearTimeout(p),cancelAnimationFrame(u)}function Et(t){N(t=t||{},l);var e=et.props,n=F(et.reference,r({},et.props,t,{ignoreAttributes:!0}));n.ignoreAttributes=L(t,"ignoreAttributes")?t.ignoreAttributes||!1:e.ignoreAttributes,et.props=n,(L(t,"trigger")||L(t,"touchHold"))&&(ct(),lt()),L(t,"interactiveDebounce")&&(it(),I=M(ht,t.interactiveDebounce||0)),function(t,e,n){var i=W(t),r=i.tooltip,o=i.content,a=i.backdrop,s=i.arrow;t.style.zIndex=""+n.zIndex,r.setAttribute("data-size",n.size),r.setAttribute("data-animation",n.animation),r.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?t.setAttribute("role",n.role):t.removeAttribute("role"),e.content!==n.content&&X(o,n),!e.animateFill&&n.animateFill?(r.appendChild(K()),r.setAttribute("data-animatefill","")):e.animateFill&&!n.animateFill&&(r.removeChild(a),r.removeAttribute("data-animatefill")),!e.arrow&&n.arrow?r.appendChild(V(n.arrowType)):e.arrow&&!n.arrow&&r.removeChild(s),e.arrow&&n.arrow&&e.arrowType!==n.arrowType&&r.replaceChild(V(n.arrowType),s),!e.interactive&&n.interactive?G(t,r):e.interactive&&!n.interactive&&function(t,e){t.removeAttribute("tabindex"),e.removeAttribute("data-interactive")}(t,r),!e.inertia&&n.inertia?U(r):e.inertia&&!n.inertia&&function(t){t.removeAttribute("data-inertia")}(r),e.theme!==n.theme&&($(r,"remove",e.theme),$(r,"add",n.theme))}(et.popper,e,n),et.popperChildren=W(et.popper),et.popperInstance&&(et.popperInstance.update(),c.some(function(n){return L(t,n)&&t[n]!==e[n]})&&(et.popperInstance.destroy(),wt(),et.state.isVisible||et.popperInstance.disableEventListeners(),et.props.followCursor&&o&&dt(o)))}function _t(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:T(et.props.duration,0,l.duration[1]);if(!et.state.isDestroyed&&et.state.isEnabled&&(!tt||et.props.touch)&&!et.reference.hasAttribute("disabled")&&!1!==et.props.onShow(et)){et.popper.style.visibility="visible",et.state.isVisible=!0,et.props.interactive&&et.reference.classList.add(k);var e=rt();z(e.concat(et.popper),0),function(t){var e=!(ot()||"initial"===et.props.followCursor&&tt);et.popperInstance?(ot()||(et.popperInstance.scheduleUpdate(),e&&et.popperInstance.enableEventListeners()),j(et.popperInstance.modifiers,et.props.flip)):(wt(),e||et.popperInstance.disableEventListeners()),et.popperInstance.reference=et.reference;var n=et.popperChildren.arrow;ot()?(n&&(n.style.margin="0"),o&&dt(o)):n&&(n.style.margin=""),tt&&o&&"initial"===et.props.followCursor&&(dt(o),n&&(n.style.margin="0")),function(t,e){var n=t.popper,i=t.options,r=i.onCreate,o=i.onUpdate;i.onCreate=i.onUpdate=function(t){!function(t){t.offsetHeight}(n),e(),o&&o(t),i.onCreate=r,i.onUpdate=o}}(et.popperInstance,t);var i=et.props.appendTo;(x="parent"===i?et.reference.parentNode:R(i,[et.reference])).contains(et.popper)||(x.appendChild(et.popper),et.props.onMount(et),et.state.isMounted=!0)}(function(){et.state.isVisible&&(ot()||et.popperInstance.update(),et.popperChildren.backdrop&&(et.popperChildren.content.style.transitionDelay=Math.round(t/12)+"ms"),et.props.sticky&&(z([et.popper],s?0:et.props.updateDuration),function t(){et.popperInstance&&et.popperInstance.scheduleUpdate(),et.state.isMounted?requestAnimationFrame(t):z([et.popper],0)}()),z([et.popper],d.updateDuration),z(e,t),H(e,"visible"),function(t,e){pt(t,e)}(t,function(){et.props.aria&&et.reference.setAttribute("aria-".concat(et.props.aria),et.popper.id),et.props.onShown(et),et.state.isShown=!0}))})}}function Ot(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:T(et.props.duration,1,l.duration[1]);if(!et.state.isDestroyed&&et.state.isEnabled&&!1!==et.props.onHide(et)){et.popper.style.visibility="hidden",et.state.isVisible=!1,et.state.isShown=!1,P=!1,et.props.interactive&&et.reference.classList.remove(k);var e=rt();z(e,t),H(e,"hidden"),function(t,e){pt(t,function(){!et.state.isVisible&&x&&x.contains(et.popper)&&e()})}(t,function(){C||nt(),et.props.aria&&et.reference.removeAttribute("aria-".concat(et.props.aria)),et.popperInstance.disableEventListeners(),et.popperInstance.options.placement=et.props.placement,x.removeChild(et.popper),et.props.onHidden(et),et.state.isMounted=!1})}}}var pt=!1;function ut(t,e){N(e||{},l),pt||(document.addEventListener("click",rt,!0),document.addEventListener("touchstart",et,y),window.addEventListener("blur",ot),pt=!0);var n,i=r({},l,e);n=t,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(t){var e={isVirtual:!0,attributes:t.attributes||{},setAttribute:function(e,n){t.attributes[e]=n},getAttribute:function(e){return t.attributes[e]},removeAttribute:function(e){delete t.attributes[e]},hasAttribute:function(e){return e in t.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(e){t.classList.classNames[e]=!0},remove:function(e){delete t.classList.classNames[e]},contains:function(e){return e in t.classList.classNames}}};for(var n in e)t[n]=e[n]}(t);var o=function(t){if(I(t))return[t];if(t instanceof NodeList)return h(t);if(Array.isArray(t))return t;try{return h(document.querySelectorAll(t))}catch(t){return[]}}(t).reduce(function(t,e){var n=e&&st(e,i);return n&&t.push(n),t},[]);return I(t)?o[0]:o}ut.version="4.2.1",ut.defaults=l,ut.setDefaults=function(t){Object.keys(t).forEach(function(e){l[e]=t[e]})},ut.hideAll=Z,ut.group=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.delay,i=void 0===n?t[0].props.delay:n,o=e.duration,a=void 0===o?0:o;if(!t.some(function(t){return L(t,"_originalProps")})){var s=!1;t.forEach(function(t){t._originalProps=r({},t.props)}),d()}function p(t){s=t,d()}function u(e){e._originalProps.onShow(e),t.forEach(function(t){t.set({duration:a}),t.hide()}),p(!0)}function l(t){t._originalProps.onHide(t),p(!1)}function c(t){t._originalProps.onShown(t),t.set({duration:t._originalProps.duration})}function d(){t.forEach(function(t){t.set({onShow:u,onShown:c,onHide:l,delay:s?[0,Array.isArray(i)?i[1]:i]:i,duration:s?a:t._originalProps.duration})})}},o&&setTimeout(function(){h(document.querySelectorAll("[data-tippy]")).forEach(function(t){var e=t.getAttribute("data-tippy");e&&ut(t,{content:e})})}),function(t){if(o){var e=document.createElement("style");e.type="text/css",e.textContent=t;var n=document.head,i=n.firstChild;i?n.insertBefore(e,i):n.appendChild(e)}}('.tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px) rotateX(0);transform:perspective(700px) translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(60deg);transform:perspective(700px) translateY(0) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px) rotateX(0);transform:perspective(700px) translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateY(0) rotateX(-60deg);transform:perspective(700px) translateY(0) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px) rotateY(0);transform:perspective(700px) translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(-60deg);transform:perspective(700px) translateX(0) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px) rotateY(0);transform:perspective(700px) translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) translateX(0) rotateY(60deg);transform:perspective(700px) translateX(0) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=visible]{opacity:1}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}'),e.default=ut},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),a=n(18),s=(i=a)&&i.__esModule?i:{default:i};var p=function(){function t(e,n){var i=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.container=e,this.el=document.querySelector(e),Object.keys(n).forEach(function(t){i[t]=n[t]})}return o(t,[{key:"init",value:function(t){this.needsRouter&&(this.router=new s.default,this.router.init(t)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var t=!1,e=document.body,n=0;function i(){new Date-n<500||t||(e.classList.add("has-hover"),t=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){t&&(e.classList.remove("has-hover"),t=!1)},!0),document.addEventListener("mousemove",i,!0),i()}},{key:"createComponent",value:function(t,e,n,i){var o=Object.create({children:[],data:null,model:t,parent:null,rerenderOnDataMismatch:!1});if(null!==i&&"object"===(void 0===i?"undefined":r(i)))for(var a in i)i.hasOwnProperty(a)&&(o[a]=i[a]);return new e(n,o)}}]),t}();e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"init",value:function(t){var e=this;if(void 0===t||"object"!==(void 0===t?"undefined":i(t)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof t.encode||"function"!=typeof t.decode||!Array.isArray(t.views)||"object"!==i(t.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=t.encode,this.decodeHash=t.decode,this.viewPromises=t.views.map(function(t){return t.isReady}),this.PS=t.PS,Promise.all(this.viewPromises).then(function(){e.decodeHash()}),this.PS.setSubs(t.subscriptions.map(function(t){return[t,function(t,n){e.hashChange.call(e,t,n)}]}))}},{key:"hashChange",value:function(t,e){this.setStateObj(t,e),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(t,e){this.stateObj[t]=e}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),t}();e.default=o},function(t,e){t.exports='<section id="intro">\n    <div class="js-inner-content">\n    </div>\n</section>\n<section id="section-comparison">\n    <div class="js-inner-content">\n        <h2>Antibiotics in Development Since 2014</h2>\n        <div class="abx-legend">\n            <div class="abx-legend--wrapper">\n                <p class="abx-legend--item abx-legend--item--abx">Antibiotic</p>\n                <p class="abx-legend--item abx-legend--item--urgent">Potential to treat CDC urgent pathogen</p>\n            </div>\n            <div class="abx-legend--wrapper">\n                <p class="abx-legend--item abx-legend--item--novel">Novel antibiotics</p>\n                <p class="abx-legend--item abx-legend--item--gram">Potential to treat Gram-negative bacteria</p>\n            </div>\n        </div>\n        <div id="abx-visualization">\n        </div>\n        <div id="abx-totals">\n            <p>Total approved antibiotics since 2014: <span id="total-approved" class="total-span"></span></p>\n            <p>Total discontinued antibiotics since 2014: <span id="total-discontinued" class="total-span"></span></p>\n        </div>\n    </div>\n</section>\n<div id="abx-notes"></div>\n<footer class="download-resources">\n    <div>\n        <p><strong>Download resources:</strong>\n            <a class="pct-download" href="">Methodology</a>\n            <a class="pct-download" href="">Report</a>\n        </p>\n    </div>\n</footer>'},function(t,e){t.exports='<h2 id="antibiotic-innovation">Antibiotic Innovation</h2>\n<p>The Pew Charitable Trusts has tracked the pipeline of antibiotics in clinical development since 2014 and has aggregated the\nupdates into an interactive tool that illustrates trends in the pipeline. This longitudinal data visualization underscores the longstanding concerns of scientists, doctors, public health officials, and other stakeholders regarding the dangerously low number of antibiotics in development to address current and future patient needs, particularly for treating the most urgent bacterial threats, such as Gram-negative pathogens.</p>\n<p>Click the play button to see the evolution of the antibiotic pipeline since 2014, or click on an individual year to see the status of the pipeline at a particular point in time. To see additional information about each drug, hover over any of the rectangles.</p>\n'},function(t,e){t.exports="<p><strong>Notes:</strong> Clinical candidates included in this data visualization are consistent with Pew’s methodology for tracking antibiotics in clinical development. More information about the methods and the full underlying data can be found in the latest analysis of the pipeline. Pew’s updates are conducted semiannually, except for 2014, when they were published quarterly, and 2018, when a timeline adjustment resulted in just one update for the year.</p>\n"},function(t,e,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VVElMUy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RhdGVmdWwtZGVhZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVic3ViLWpzL3NyYy9wdWJzdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BvcHBlci5qcy9kaXN0L2VzbS9wb3BwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9hYnguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcGFwYXJzZS9wYXBhcGFyc2UubWluLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RhdGEvYWJ4LWRhdGEuY3N2Iiwid2VicGFjazovLy8uL3NyYy92aWV3cy92aXotdmlldy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zdWJtb2R1bGVzL1VJLWpzL2VsZW1lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3Zpei12aWV3L3N0eWxlcy5zY3NzPzI4YzQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YnN1Yi1zZXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZy1oYXNoL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aXBweS5qcy9lc20vaW5kZXguYWxsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9QQ1RBcHAtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9ST1VUUi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvc2VjdGlvbnMuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvcGFydGlhbHMvaW50cm8ubWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpYWxzL25vdGVzLm1kIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiR1RNUHVzaCIsImV2ZW50TGFiZWwiLCJkYXRhTGF5ZXIiLCJwdXNoIiwiZXZlbnQiLCJldmVudERhdGEiLCJwdWJsaXNoV2luZG93UmVzaXplIiwiUyIsInJlc2l6ZVRpbWVvdXQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwic2V0VGltZW91dCIsInNldFN0YXRlIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIkZhZGVJblRleHQiLCJIVE1MRWxlbWVudCIsImZhZGVPdXRDb250ZW50IiwidGhpcyIsImNsYXNzTGlzdCIsImFkZCIsImZhZGVJbkNvbnRlbnQiLCJjb250ZW50IiwiX3RoaXMiLCJkdXJhdGlvblMiLCJzdHlsZSIsInRyYW5zaXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsImR1cmF0aW9uU3RyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJkdXJhdGlvbiIsInBhcnNlRmxvYXQiLCJpbm5lckhUTUwiLCJyZW1vdmUiLCJTdHJpbmdIZWxwZXJzIiwiU3RyaW5nIiwiY2xlYW5TdHJpbmciLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJyZW1vdmVVbmRlcnNjb3JlcyIsInVuZG9DYW1lbENhc2UiLCJ0cnVuYyIsInVzZVdvcmRCb3VuZGFyeSIsImxlbmd0aCIsInN1YlN0cmluZyIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwiaGFzaENvZGUiLCJoYXNoIiwiY2hhckNvZGVBdCIsIkRPTUhlbHBlcnMiLCJpbmRleE9mIiwiY2xhc3NTdHJpbmdzIiwibWF0Y2giLCJpZFN0cmluZyIsImVsU3RyaW5nIiwiZWwiLCJjcmVhdGVFbGVtZW50IiwiZm9yRWFjaCIsImtsYXNzIiwic2V0QXR0cmlidXRlIiwicSIsInF1ZXJ5U2VsZWN0b3IiLCJxYSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJQdWJTdWIiLCJzdGF0ZSIsIl9sb2dTdGF0ZSIsImNvbnNvbGUiLCJsb2ciLCJBcnJheSIsImNvbXBhcmUiLCJ0ZXN0QXJyIiwic3RhdGVNb2R1bGUiLCJsb2dTdGF0ZSIsImdldFN0YXRlIiwidW5kZWZpbmVkIiwiZ2V0UHJldmlvdXNTdGF0ZSIsInB1Ymxpc2giLCJpc0FycmF5IiwidW5zaGlmdCIsInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwibWVzc2FnZXMiLCJsYXN0VWlkIiwiaGFzS2V5cyIsIm9iaiIsImNhbGxTdWJzY3JpYmVyV2l0aERlbGF5ZWRFeGNlcHRpb25zIiwic3Vic2NyaWJlciIsIm1lc3NhZ2UiLCJkYXRhIiwiZXgiLCJ0aHJvd0V4Y2VwdGlvbiIsImNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMiLCJkZWxpdmVyTWVzc2FnZSIsIm9yaWdpbmFsTWVzc2FnZSIsIm1hdGNoZWRNZXNzYWdlIiwiaW1tZWRpYXRlRXhjZXB0aW9ucyIsInN1YnNjcmliZXJzIiwiY2FsbFN1YnNjcmliZXIiLCJzeW5jIiwiZGVsaXZlciIsInRvcGljIiwicG9zaXRpb24iLCJjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uIiwidG9TdHJpbmciLCJoYXNTdWJzY3JpYmVycyIsImZvdW5kIiwiQm9vbGVhbiIsIm1lc3NhZ2VIYXNTdWJzY3JpYmVycyIsInB1Ymxpc2hTeW5jIiwic3Vic2NyaWJlIiwiZnVuYyIsInRva2VuIiwic3Vic2NyaWJlT25jZSIsInVuc3Vic2NyaWJlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjbGVhckFsbFN1YnNjcmlwdGlvbnMiLCJjbGVhclN1YnNjcmlwdGlvbnMiLCJpc1RvcGljIiwiZGVzY2VuZGFudFRvcGljRXhpc3RzIiwiaXNUb2tlbiIsImlzRnVuY3Rpb24iLCJyZXN1bHQiLCJhbWQiLCJnbG9iYWwiLCJpc0Jyb3dzZXIiLCJsb25nZXJUaW1lb3V0QnJvd3NlcnMiLCJ0aW1lb3V0RHVyYXRpb24iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJkZWJvdW5jZSIsImZuIiwiY2FsbGVkIiwidGhlbiIsInNjaGVkdWxlZCIsImZ1bmN0aW9uVG9DaGVjayIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsImVsZW1lbnQiLCJub2RlVHlwZSIsImNzcyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImdldFBhcmVudE5vZGUiLCJub2RlTmFtZSIsInBhcmVudE5vZGUiLCJob3N0IiwiZ2V0U2Nyb2xsUGFyZW50IiwiYm9keSIsIl9nZXRTdHlsZUNvbXB1dGVkUHJvcCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwidGVzdCIsImlzSUUxMSIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwiaXNJRTEwIiwiaXNJRSIsInZlcnNpb24iLCJnZXRPZmZzZXRQYXJlbnQiLCJub09mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsImdldFJvb3QiLCJub2RlIiwiZmluZENvbW1vbk9mZnNldFBhcmVudCIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJvcmRlciIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInN0YXJ0IiwiZW5kIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJjb250YWlucyIsImZpcnN0RWxlbWVudENoaWxkIiwiZWxlbWVudDFyb290IiwiZ2V0U2Nyb2xsIiwidXBwZXJTaWRlIiwiaHRtbCIsInNjcm9sbGluZ0VsZW1lbnQiLCJnZXRCb3JkZXJzU2l6ZSIsInN0eWxlcyIsImF4aXMiLCJzaWRlQSIsInNpZGVCIiwiZ2V0U2l6ZSIsImNvbXB1dGVkU3R5bGUiLCJNYXRoIiwibWF4IiwicGFyc2VJbnQiLCJnZXRXaW5kb3dTaXplcyIsImhlaWdodCIsIndpZHRoIiwiY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInNvdXJjZSIsImdldENsaWVudFJlY3QiLCJvZmZzZXRzIiwicmlnaHQiLCJsZWZ0IiwiYm90dG9tIiwidG9wIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJlIiwic2l6ZXMiLCJob3JpelNjcm9sbGJhciIsIm9mZnNldFdpZHRoIiwidmVydFNjcm9sbGJhciIsIm9mZnNldEhlaWdodCIsImdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSIsImNoaWxkcmVuIiwicGFyZW50IiwiZml4ZWRQb3NpdGlvbiIsImlzSFRNTCIsImNoaWxkcmVuUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxQYXJlbnQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJzdWJ0cmFjdCIsIm1vZGlmaWVyIiwiaW5jbHVkZVNjcm9sbCIsImdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwiZ2V0Qm91bmRhcmllcyIsInBvcHBlciIsInJlZmVyZW5jZSIsInBhZGRpbmciLCJib3VuZGFyaWVzRWxlbWVudCIsImJvdW5kYXJpZXMiLCJleGNsdWRlU2Nyb2xsIiwicmVsYXRpdmVPZmZzZXQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJib3VuZGFyaWVzTm9kZSIsImlzRml4ZWQiLCJfZ2V0V2luZG93U2l6ZXMiLCJpc1BhZGRpbmdOdW1iZXIiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInBsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwia2V5cyIsIm1hcCIsImFyZWEiLCJfcmVmIiwic29ydCIsImEiLCJiIiwiZmlsdGVyZWRBcmVhcyIsImZpbHRlciIsIl9yZWYyIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJzcGxpdCIsImdldFJlZmVyZW5jZU9mZnNldHMiLCJnZXRPdXRlclNpemVzIiwieCIsIm1hcmdpbkJvdHRvbSIsInkiLCJtYXJnaW5SaWdodCIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwibWF0Y2hlZCIsImdldFBvcHBlck9mZnNldHMiLCJyZWZlcmVuY2VPZmZzZXRzIiwicG9wcGVyUmVjdCIsInBvcHBlck9mZnNldHMiLCJpc0hvcml6IiwibWFpblNpZGUiLCJzZWNvbmRhcnlTaWRlIiwibWVhc3VyZW1lbnQiLCJzZWNvbmRhcnlNZWFzdXJlbWVudCIsImZpbmQiLCJhcnIiLCJjaGVjayIsInJ1bk1vZGlmaWVycyIsIm1vZGlmaWVycyIsImVuZHMiLCJzbGljZSIsInByb3AiLCJmaW5kSW5kZXgiLCJjdXIiLCJ3YXJuIiwiZW5hYmxlZCIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJwcmVmaXgiLCJ0b0NoZWNrIiwiZ2V0V2luZG93Iiwic2V0dXBFdmVudExpc3RlbmVycyIsIm9wdGlvbnMiLCJ1cGRhdGVCb3VuZCIsInBhc3NpdmUiLCJzY3JvbGxFbGVtZW50IiwiYXR0YWNoVG9TY3JvbGxQYXJlbnRzIiwiY2FsbGJhY2siLCJzY3JvbGxQYXJlbnRzIiwiaXNCb2R5IiwiZXZlbnRzRW5hYmxlZCIsImRpc2FibGVFdmVudExpc3RlbmVycyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2NoZWR1bGVVcGRhdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJpc0Zpbml0ZSIsInNldFN0eWxlcyIsInVuaXQiLCJpc0ZpcmVmb3giLCJpc01vZGlmaWVyUmVxdWlyZWQiLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJyZXF1ZXN0aW5nIiwiaXNSZXF1aXJlZCIsIl9yZXF1ZXN0aW5nIiwicmVxdWVzdGVkIiwicGxhY2VtZW50cyIsInZhbGlkUGxhY2VtZW50cyIsImNsb2Nrd2lzZSIsImNvdW50ZXIiLCJpbmRleCIsImNvbmNhdCIsInJldmVyc2UiLCJCRUhBVklPUlMiLCJGTElQIiwiQ0xPQ0tXSVNFIiwiQ09VTlRFUkNMT0NLV0lTRSIsInBhcnNlT2Zmc2V0Iiwib2Zmc2V0IiwiYmFzZVBsYWNlbWVudCIsInVzZUhlaWdodCIsImZyYWdtZW50cyIsImZyYWciLCJ0cmltIiwiZGl2aWRlciIsInNlYXJjaCIsInNwbGl0UmVnZXgiLCJvcHMiLCJvcCIsIm1lcmdlV2l0aFByZXZpb3VzIiwicmVkdWNlIiwic3RyIiwidG9WYWx1ZSIsImluZGV4MiIsIkRlZmF1bHRzIiwicG9zaXRpb25GaXhlZCIsInJlbW92ZU9uRGVzdHJveSIsIm9uQ3JlYXRlIiwib25VcGRhdGUiLCJzaGlmdCIsInNoaWZ0dmFyaWF0aW9uIiwiX2RhdGEkb2Zmc2V0cyIsImlzVmVydGljYWwiLCJzaWRlIiwic2hpZnRPZmZzZXRzIiwicHJldmVudE92ZXJmbG93IiwidHJhbnNmb3JtUHJvcCIsInBvcHBlclN0eWxlcyIsInRyYW5zZm9ybSIsInByaW9yaXR5IiwicHJpbWFyeSIsImVzY2FwZVdpdGhSZWZlcmVuY2UiLCJzZWNvbmRhcnkiLCJtaW4iLCJrZWVwVG9nZXRoZXIiLCJmbG9vciIsIm9wU2lkZSIsImFycm93IiwiX2RhdGEkb2Zmc2V0cyRhcnJvdyIsImFycm93RWxlbWVudCIsImxlbiIsInNpZGVDYXBpdGFsaXplZCIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJyb3VuZCIsImZsaXAiLCJmbGlwcGVkIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsImJlaGF2aW9yIiwic3RlcCIsInJlZk9mZnNldHMiLCJvdmVybGFwc1JlZiIsIm92ZXJmbG93c0xlZnQiLCJvdmVyZmxvd3NSaWdodCIsIm92ZXJmbG93c1RvcCIsIm92ZXJmbG93c0JvdHRvbSIsIm92ZXJmbG93c0JvdW5kYXJpZXMiLCJmbGlwcGVkVmFyaWF0aW9uQnlSZWYiLCJmbGlwVmFyaWF0aW9ucyIsImZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQiLCJmbGlwVmFyaWF0aW9uc0J5Q29udGVudCIsImZsaXBwZWRWYXJpYXRpb24iLCJnZXRPcHBvc2l0ZVZhcmlhdGlvbiIsImlubmVyIiwic3VidHJhY3RMZW5ndGgiLCJoaWRlIiwiYm91bmQiLCJhdHRyaWJ1dGVzIiwiY29tcHV0ZVN0eWxlIiwibGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uIiwiZ3B1QWNjZWxlcmF0aW9uIiwib2Zmc2V0UGFyZW50UmVjdCIsInNob3VsZFJvdW5kIiwibm9Sb3VuZCIsInYiLCJyZWZlcmVuY2VXaWR0aCIsInBvcHBlcldpZHRoIiwiaXNWYXJpYXRpb24iLCJob3Jpem9udGFsVG9JbnRlZ2VyIiwidmVydGljYWxUb0ludGVnZXIiLCJnZXRSb3VuZGVkT2Zmc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJwcmVmaXhlZFByb3BlcnR5Iiwid2lsbENoYW5nZSIsImludmVydFRvcCIsImludmVydExlZnQiLCJ4LXBsYWNlbWVudCIsImFycm93U3R5bGVzIiwiYXBwbHlTdHlsZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9uTG9hZCIsIm1vZGlmaWVyT3B0aW9ucyIsIlBvcHBlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVwZGF0ZSIsImlzRGVzdHJveWVkIiwiaXNDcmVhdGVkIiwianF1ZXJ5IiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVDaGlsZCIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX2FieCIsIkFwcCIsIkFCWEFwcCIsIm5lZWRzUm91dGVyIiwiSVNfUFJFUkVOREVSSU5HIiwicHJlcmVuZGVyIiwiaW5pdCIsIl9zdGF0ZWZ1bERlYWQiLCJfVXRpbHMiLCJtb2RlbCIsInZpZXdzIiwic3RhcnRZZWFyIiwiZ2V0UnVudGltZURhdGEiLCJyZWplY3QiLCJhcHBDb250YWluZXIiLCJQYXBhIiwicGFyc2UiLCJkb3dubG9hZCIsImR5bmFtaWNUeXBpbmciLCJoZWFkZXIiLCJmYXN0TW9kZSIsInNraXBFbXB0eUxpbmVzIiwiYmVmb3JlRmlyc3RDaHVuayIsImNodW5rIiwiZGF0YUhhc2giLCJnZXRBdHRyaWJ1dGUiLCJpc01pc21hdGNoZWQiLCJjb21wbGV0ZSIsInJlc3BvbnNlIiwieWVhcnMiLCJsb29wV2hpbGUiLCJ1bm5lc3RlZERhdGEiLCJpZCIsInllYXIiLCJvYnNlcnZhdGlvbiIsImNvbHVtbiIsImlzRGlzY29udGludWVkIiwib2JzZXJ2YXRpb25zIiwicGhhc2UiLCJ2YWx1ZXMiLCJhY3RpdmVMZW5ndGhzIiwiZGlzY29udGludWVkTGVuZ3RocyIsIm9icyIsImRydWciLCJtYXhBY3RpdmUiLCJtYXhEaXNjb250aW51ZWQiLCJjcmVhdGVDb21wb25lbnQiLCJWaXpWaWV3IiwicmVuZGVyVG9TZWxlY3RvciIsInJlcmVuZGVyT25EYXRhTWlzbWF0Y2giLCJlcnJvciIsIlBDVEFwcCIsImluc2VydEFkamFjZW50SFRNTCIsInNlY3Rpb25zIiwiaW50cm8iLCJub3RlcyIsInZpZXciLCJjb250YWluZXIiLCJhcHBlbmRDaGlsZCIsIl90aGlzMyIsIl9nZXQiLCJfX3Byb3RvX18iLCJnZXRQcm90b3R5cGVPZiIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImYiLCJzZWxmIiwicG9zdE1lc3NhZ2UiLCJsb2NhdGlvbiIsImgiLCJ1IiwiayIsInoiLCJkeW5hbWljVHlwaW5nRnVuY3Rpb24iLCJ3b3JrZXIiLCJXT1JLRVJTX1NVUFBPUlRFRCIsIlNDUklQVF9QQVRIIiwiRXJyb3IiLCJXb3JrZXIiLCJvbm1lc3NhZ2UiLCJ1c2VyU3RlcCIsInVzZXJDaHVuayIsInVzZXJDb21wbGV0ZSIsInVzZXJFcnJvciIsImlucHV0IiwiY29uZmlnIiwid29ya2VySWQiLCJOT0RFX1NUUkVBTV9JTlBVVCIsIl8iLCJyZWFkYWJsZSIsInJlYWQiLCJvbiIsImciLCJGaWxlIiwic3RyZWFtIiwidW5wYXJzZSIsImRlbGltaXRlciIsIkJBRF9ERUxJTUlURVJTIiwicXVvdGVzIiwibmV3bGluZSIsInF1b3RlQ2hhciIsIlJlZ0V4cCIsIk0iLCJKU09OIiwiZmllbGRzIiwibWV0YSIsImpvaW4iLCJjb25zdHJ1Y3RvciIsIkRhdGUiLCJzdHJpbmdpZnkiLCJSRUNPUkRfU0VQIiwiZnJvbUNoYXJDb2RlIiwiVU5JVF9TRVAiLCJCWVRFX09SREVSX01BUksiLCJMb2NhbENodW5rU2l6ZSIsIlJlbW90ZUNodW5rU2l6ZSIsIkRlZmF1bHREZWxpbWl0ZXIiLCJQYXJzZXIiLCJQYXJzZXJIYW5kbGUiLCJOZXR3b3JrU3RyZWFtZXIiLCJGaWxlU3RyZWFtZXIiLCJTdHJpbmdTdHJlYW1lciIsIlJlYWRhYmxlU3RyZWFtU3RyZWFtZXIiLCJqUXVlcnkiLCJlYWNoIiwiYXR0ciIsIkZpbGVSZWFkZXIiLCJmaWxlcyIsImZpbGUiLCJpbnB1dEVsZW0iLCJpbnN0YW5jZUNvbmZpZyIsImV4dGVuZCIsImJlZm9yZSIsImFjdGlvbiIsInJlYXNvbiIsInNwbGljZSIsIl9oYW5kbGUiLCJfZmluaXNoZWQiLCJfY29tcGxldGVkIiwiX2lucHV0IiwiX2Jhc2VJbmRleCIsIl9wYXJ0aWFsTGluZSIsIl9yb3dDb3VudCIsIl9zdGFydCIsIl9uZXh0Q2h1bmsiLCJpc0ZpcnN0Q2h1bmsiLCJfY29tcGxldGVSZXN1bHRzIiwiZXJyb3JzIiwiRSIsImNodW5rU2l6ZSIsInN0cmVhbWVyIiwiX2NvbmZpZyIsInBhcnNlQ2h1bmsiLCJwYXVzZWQiLCJhYm9ydGVkIiwiY3Vyc29yIiwic3Vic3RyaW5nIiwicHJldmlldyIsInJlc3VsdHMiLCJXT1JLRVJfSUQiLCJmaW5pc2hlZCIsIl9zZW5kRXJyb3IiLCJfcmVhZENodW5rIiwiX2NodW5rTG9hZGVkIiwiWE1MSHR0cFJlcXVlc3QiLCJ3aXRoQ3JlZGVudGlhbHMiLCJvbmxvYWQiLCJ3Iiwib25lcnJvciIsIl9jaHVua0Vycm9yIiwib3BlbiIsImRvd25sb2FkUmVxdWVzdEhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsInN0YXR1cyIsInJlYWR5U3RhdGUiLCJnZXRSZXNwb25zZUhlYWRlciIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJ3ZWJraXRTbGljZSIsIm1velNsaWNlIiwiRmlsZVJlYWRlclN5bmMiLCJzaXplIiwicmVhZEFzVGV4dCIsImVuY29kaW5nIiwicGF1c2UiLCJyZXN1bWUiLCJfc3RyZWFtRGF0YSIsIl9zdHJlYW1FbmQiLCJfc3RyZWFtRXJyb3IiLCJfY2hlY2tJc0ZpbmlzaGVkIiwiX3N0cmVhbUNsZWFuVXAiLCJyZW1vdmVMaXN0ZW5lciIsImFib3J0IiwidHJpbUhlYWRlcnMiLCJ0eXBlIiwiY29kZSIsInJvdyIsImNvbW1lbnRzIiwiYWJzIiwic3VjY2Vzc2Z1bCIsImJlc3REZWxpbWl0ZXIiLCJnZXRDaGFySW5kZXgiLCJPIiwiVCIsIkkiLCJBIiwiRCIsIkwiLCJlc2NhcGVDaGFyIiwiUCIsIkYiLCJDIiwiUiIsImxpbmVicmVhayIsInRydW5jYXRlZCIsInRlcm1pbmF0ZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3JjIiwid2VicGFja1BvbHlmaWxsIiwiZGVwcmVjYXRlIiwicGF0aHMiLCJoZWFkZXJzIiwiaXNGaXJzdExvYWQiLCJFbGVtZW50IiwibWluVW5pdERpbWVuc2lvbiIsImhlYWRlckhlaWdodCIsInVuaXRQYWRkaW5nIiwicGhhc2VNZW1iZXJzIiwiYWN0aXZlIiwiZGlzY29udGludWVkIiwiaGVpZ2h0TmVlZGVkIiwicHJlcmVuZGVyZWQiLCJyZXJlbmRlciIsInJlbmRlckNvbHVtbnMiLCJjb250IiwicGxhY2Vob2xkZXJOdW1iZXIiLCJhY3RpdmVDb250YWluZXIiLCJqIiwicGxhY2Vob2xkZXIiLCJkcnVnRW1wdHkiLCJjb250cm9sQ29udGFpbmVyIiwicGxheUJ1dHRvbiIsInRpdGxlIiwieWVhckJ1dHRvbiIsInllYXJCdXR0b25BY3RpdmUiLCJ0ZXh0Q29udGVudCIsImhlYWRlckNvbnRhaW5lciIsImhlYWRlckRpdiIsInBoYXNlRnVsbCIsInBoYXNlQWJiciIsImRpc2NvbnRpbnVlZENvbnRhaW5lciIsInllYXJJbmRleCIsIl90aGlzNCIsInByZXZpb3VzU3RhdHVzZXMiLCJnZXRQaGFzZU1lbWJlcnNJbmRleCIsImZpbHRlcmVkIiwiY29udGFpbmVySW5kZXgiLCJncmFtTmVnYXRpdmUiLCJub3ZlbCIsInVyZ2VudCIsImNvbXBhbnkiLCJhZGRJZHNBbmRDbGFzc2VzIiwiY3VycmVudFllYXIiLCJjdXJyZW50T2JzZXJ2YXRpb24iLCJpc1Jlc3RhcnQiLCJzdGF0ZUJlZm9yZUNoYW5nZSIsInJlY29yZFN0YXR1c2VzIiwiUFMiLCJzZXRTdWJzIiwiY2hlY2tIZWlnaHQiLCJzZXRZZWFyU3RhdGUiLCJub25FbXB0eURydWdzIiwiaW5pdGlhbGl6ZVllYXJCdXR0b25zIiwiaW5pdGlhbGl6ZVBsYXlCdXR0b24iLCJwbGF5WWVhcnNCaW5kIiwicGxheVllYXJzIiwieWVhckJ1dHRvblByZXZpb3VzIiwicGxheUJ0biIsImJsdXIiLCJwYXVzZVBsYXlCaW5kIiwid2lsbFBhdXNlIiwieWVhckJ1dHRvbnMiLCJidG4iLCJfdGhpczYiLCJuZXh0UHJvbWlzZSIsIl90aGlzNSIsImVuYWJsZVllYXJCdXR0b25zIiwicmVtb3ZlUGF1c2VPcHRpb24iLCJ3cmFwcGVyUmVzb2x2ZSIsInNob3dSZXBsYXlPcHRpb24iLCJkaXNhYmxlWWVhckJ1dHRvbnMiLCJzaG93UGF1c2VPcHRpb24iLCJyZW1vdmVSZXBsYXlPcHRpb24iLCJjbGVhckF0dHJpYnV0ZXNBbmREZXRhaWxzIiwicmVzb2x1dGlvbiIsInJlcGxheUJ0biIsInJlcGxheSIsInBhdXNlUGxheSIsInNxdWF0Iiwic3VwZXJTcXVhdCIsImFjdGl2ZU1heCIsInNldFByb3BlcnR5IiwiX3RoaXM3IiwiYnV0dG9uIiwiX3RoaXM4IiwiZGlzYWJsZVBsYXlCdXR0b24iLCJtc2ciLCJvYnNlcnZhdGlvbjAiLCJvYnNlcnZhdGlvbjEiLCJ1cGRhdGVUZXh0IiwidG90YWxBY3RpdmUiLCJ0b3RhbERpc2NvbnRpbnVlZCIsImFjYyIsImFwcHJvdmVkU3BhbiIsImRpc2NvbnRpbnVlZFNwYW4iLCJyZWNvcmRGaXJzdFBvc2l0aW9ucyIsInBvcHVsYXRlUGxhY2Vob2xkZXJzIiwiX3RpcHB5MiIsImRlZmF1bHQiLCJkaXN0YW5jZSIsImVuYWJsZVBsYXlCdXR0b24iLCJpbnZlcnRQb3NpdGlvbnMiLCJwbGF5QW5pbWF0aW9uIiwiZmlyc3RQb3NpdGlvbnMiLCJmcm9tIiwiY2xhc3NOYW1lIiwiX3RpcHB5IiwiZGVzdHJveSIsIl90aGlzOSIsInRyYW5zaXRpb25EdXJhdGlvbiIsImxhc3RQb3NpdGlvbiIsImRlbHRhWSIsImRlbHRhWCIsImlzVHJhbnNsYXRlZCIsImVudGVyaW5nIiwiX3RoaXMxMiIsImN1cnJlbnRTdGF0ZSIsIkRPTURydWciLCJkdXIiLCJ0cmFuc2xhdGVYWSIsImlzTW92aW5nIiwicG9wcGVyQ3VycmVudFRyYW5zbGF0ZTNkIiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwiYW5pbWF0ZVNpbmdsZUNvbHVtbiIsIl90aGlzMTAiLCJtYXRjaGluZ0RydWdJRHMiLCJtYXRjaGluZ0RPTURydWdzIiwiaW5jbHVkZXMiLCJlbGVtZW50c1dpbGxTdGF5QnV0TW92ZSIsImN1cnJlbnREYXR1bSIsImVsZW1lbnRzV2lsbENoYW5nZVN0YXR1cyIsInN1YnNldHMiLCJsZW5ndGhPZkFsbFN1YnNldHMiLCJoYW5kbGVTdWJzZXQiLCJfdGhpczExIiwiYXJyYXkiLCJlbnRlcmluZ0RydWciLCJzZWxlY3RvciIsIl9jbGFzc0NhbGxDaGVjayIsIiRkIiwiaXNSZWFkeSIsImV4aXN0aW5nIiwiaXNBbmltYXRpbmciLCJwYXVzZVNwaW5uZXIiLCJzdWJzY3JpcHRpb25zIiwiY3JlYXRlVG9rZW4iLCJmblJlZiIsImZ1bmN0aW9uSGFzaCIsImxvZ1N1YnMiLCJzdWJzQXJyYXkiLCJwYWlyIiwidG9rZW5PYmoiLCJjYW5jZWxTdWIiLCJwb3BwZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInVhIiwiaXNVQ0Jyb3dzZXIiLCJpc0lPUyIsInBsYXRmb3JtIiwiTVNTdHJlYW0iLCJkZWZhdWx0UHJvcHMiLCJhMTF5IiwiYWxsb3dIVE1MIiwiYW5pbWF0ZUZpbGwiLCJhbmltYXRpb24iLCJhcHBlbmRUbyIsImFyaWEiLCJhcnJvd1R5cGUiLCJib3VuZGFyeSIsImRlbGF5IiwiZmxpcEJlaGF2aW9yIiwiZmxpcE9uVXBkYXRlIiwiZm9sbG93Q3Vyc29yIiwiaGlkZU9uQ2xpY2siLCJpZ25vcmVBdHRyaWJ1dGVzIiwiaW5lcnRpYSIsImludGVyYWN0aXZlIiwiaW50ZXJhY3RpdmVCb3JkZXIiLCJpbnRlcmFjdGl2ZURlYm91bmNlIiwibGF6eSIsIm1heFdpZHRoIiwibXVsdGlwbGUiLCJvbkhpZGRlbiIsIm9uSGlkZSIsIm9uTW91bnQiLCJvblNob3ciLCJvblNob3duIiwicG9wcGVyT3B0aW9ucyIsInJvbGUiLCJzaG93T25Jbml0Iiwic3RpY2t5IiwidGhlbWUiLCJ0b3VjaCIsInRvdWNoSG9sZCIsInRyaWdnZXIiLCJ1cGRhdGVEdXJhdGlvbiIsIndhaXQiLCJ6SW5kZXgiLCJQT1BQRVJfSU5TVEFOQ0VfREVQRU5ERU5DSUVTIiwiZWxlbWVudFByb3RvIiwibWF0Y2hlcyIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiYXJyYXlGcm9tIiwiY2xvc2VzdCIsInBhcmVudFNlbGVjdG9yIiwiY2xvc2VzdENhbGxiYWNrIiwiUEFTU0lWRSIsIlBBRERJTkciLCJQTEFDRU1FTlRfQVRUUklCVVRFIiwiT1VUX09GX0JPVU5EQVJJRVNfQVRUUklCVVRFIiwiSU9TX0NMQVNTIiwiQUNUSVZFX0NMQVNTIiwiUE9QUEVSX1NFTEVDVE9SIiwiVE9PTFRJUF9TRUxFQ1RPUiIsIkNPTlRFTlRfU0VMRUNUT1IiLCJCQUNLRFJPUF9TRUxFQ1RPUiIsIkFSUk9XX1NFTEVDVE9SIiwiUk9VTkRfQVJST1dfU0VMRUNUT1IiLCJnZXRWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsIm1zIiwidGltZW91dElkIiwiX2FyZ3VtZW50cyIsImNsZWFyVGltZW91dCIsImdldE1vZGlmaWVyIiwiaXNTaW5ndWxhciIsImV2YWx1YXRlVmFsdWUiLCJhcmdzIiwic2V0RmxpcE1vZGlmaWVyRW5hYmxlZCIsImRpdiIsInNldFRyYW5zaXRpb25EdXJhdGlvbiIsImVscyIsInNldFZpc2liaWxpdHlTdGF0ZSIsImV2YWx1YXRlUHJvcHMiLCJvdXQiLCJ2YWx1ZUFzU3RyaW5nIiwiZ2V0RGF0YUF0dHJpYnV0ZU9wdGlvbnMiLCJ2YWxpZGF0ZU9wdGlvbnMiLCJvcHRpb24iLCJzZXRJbm5lckhUTUwiLCJzZXRDb250ZW50IiwiY29udGVudEVsIiwiZ2V0Q2hpbGRyZW4iLCJ0b29sdGlwIiwiYmFja2Ryb3AiLCJhZGRJbmVydGlhIiwiY3JlYXRlQXJyb3dFbGVtZW50IiwiY3JlYXRlQmFja2Ryb3BFbGVtZW50IiwiYWRkSW50ZXJhY3RpdmUiLCJ1cGRhdGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIiLCJsaXN0ZW5lciIsImV2ZW50TmFtZSIsIndlYmtpdFRyYW5zaXRpb24iLCJnZXRCYXNpY1BsYWNlbWVudCIsImZ1bGxQbGFjZW1lbnQiLCJ1cGRhdGVUaGVtZSIsInRoZW1lTmFtZSIsImhpZGVBbGwiLCJjaGVja0hpZGVPbkNsaWNrIiwiZXhjbHVkZSIsImlzVXNpbmdUb3VjaCIsIm9uRG9jdW1lbnRUb3VjaCIsInBlcmZvcm1hbmNlIiwib25Eb2N1bWVudE1vdXNlTW92ZSIsImxhc3RNb3VzZU1vdmVUaW1lIiwibm93Iiwib25Eb2N1bWVudENsaWNrIiwiaXNDbGlja1RyaWdnZXIiLCJjbGVhckRlbGF5VGltZW91dHMiLCJvbldpbmRvd0JsdXIiLCJhY3RpdmVFbGVtZW50IiwiaWRDb3VudGVyIiwiY3JlYXRlVGlwcHkiLCJjb2xsZWN0aW9uUHJvcHMiLCJsYXN0VHJpZ2dlckV2ZW50VHlwZSIsImxhc3RNb3VzZU1vdmVFdmVudCIsInNob3dUaW1lb3V0SWQiLCJoaWRlVGltZW91dElkIiwiYW5pbWF0aW9uRnJhbWVJZCIsImN1cnJlbnRQYXJlbnROb2RlIiwicHJldmlvdXNQbGFjZW1lbnQiLCJjdXJyZW50VHJhbnNpdGlvbkVuZExpc3RlbmVyIiwiaXNTY2hlZHVsZWRUb1Nob3ciLCJ3YXNWaXNpYmxlRHVyaW5nUHJldmlvdXNVcGRhdGUiLCJsaXN0ZW5lcnMiLCJkZWJvdW5jZWRPbk1vdXNlTW92ZSIsIm9uTW91c2VNb3ZlIiwiY3JlYXRlUG9wcGVyRWxlbWVudCIsInBvcHBlckNoaWxkcmVuIiwicG9wcGVySW5zdGFuY2UiLCJpc0VuYWJsZWQiLCJpc1Zpc2libGUiLCJpc01vdW50ZWQiLCJpc1Nob3duIiwic2V0Iiwic2hvdyIsImVuYWJsZSIsImRpc2FibGUiLCJkZXN0cm95VGFyZ2V0SW5zdGFuY2VzIiwicmVtb3ZlVHJpZ2dlcnNGcm9tUmVmZXJlbmNlIiwiY2hpbGQiLCJhZGRUcmlnZ2Vyc1RvUmVmZXJlbmNlIiwiY3JlYXRlUG9wcGVySW5zdGFuY2UiLCJzY2hlZHVsZVNob3ciLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVGb2xsb3dDdXJzb3JMaXN0ZW5lciIsInBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IiLCJjbGVhbnVwT2xkTW91c2VMaXN0ZW5lcnMiLCJzY2hlZHVsZUhpZGUiLCJnZXRUcmFuc2l0aW9uYWJsZUVsZW1lbnRzIiwiaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IiLCJvblRyYW5zaXRpb25FbmQiLCJldmVudFR5cGUiLCJoYW5kbGVyIiwib25UcmlnZ2VyIiwib25Nb3VzZUxlYXZlIiwib25EZWxlZ2F0ZVNob3ciLCJvbkRlbGVnYXRlSGlkZSIsIm9uQmx1ciIsIl9sYXN0TW91c2VNb3ZlRXZlbnQiLCJjbGllbnRYIiwiY2xpZW50WSIsImlzVmVydGljYWxQbGFjZW1lbnQiLCJpc0hvcml6b250YWxQbGFjZW1lbnQiLCJpc0hvcml6b250YWwiLCJpc0V2ZW50TGlzdGVuZXJTdG9wcGVkIiwiTW91c2VFdmVudCIsInJlZmVyZW5jZVRoZUN1cnNvcklzT3ZlciIsImlzQ3Vyc29yT3ZlclBvcHBlciIsImlzQ3Vyc29yT3ZlclJlZmVyZW5jZSIsInBvcHBlclBsYWNlbWVudCIsImV4Y2VlZHNUb3AiLCJleGNlZWRzQm90dG9tIiwiZXhjZWVkc0xlZnQiLCJleGNlZWRzUmlnaHQiLCJpc0N1cnNvck91dHNpZGVJbnRlcmFjdGl2ZUJvcmRlciIsInJlbGF0ZWRUYXJnZXQiLCJzdXBwb3J0c1RvdWNoIiwiaXNUb3VjaEV2ZW50IiwiX2luc3RhbmNlJHBvcHBlckNoaWxkIiwicHJldmVudE92ZXJmbG93TW9kaWZpZXIiLCJhcHBseU11dGF0aW9ucyIsImJhc2ljUGxhY2VtZW50IiwiY29tcHV0ZWRQYWRkaW5nIiwidGFyZ2V0RWwiLCJjcmVhdGVEZWxlZ2F0ZUNoaWxkVGlwcHkiLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJfZ2V0Q2hpbGRyZW4iLCJyZXBsYWNlQ2hpbGQiLCJyZW1vdmVJbnRlcmFjdGl2ZSIsInJlbW92ZUluZXJ0aWEiLCJ1cGRhdGVQb3BwZXJFbGVtZW50IiwidmlzaWJpbGl0eSIsInRyYW5zaXRpb25hYmxlRWxlbWVudHMiLCJzaG91bGRFbmFibGVMaXN0ZW5lcnMiLCJtYXJnaW4iLCJyZWZsb3ciLCJhZnRlclBvcHBlclBvc2l0aW9uVXBkYXRlcyIsIm1vdW50IiwidHJhbnNpdGlvbkRlbGF5IiwidXBkYXRlUG9zaXRpb24iLCJvblRyYW5zaXRpb25lZEluIiwib25UcmFuc2l0aW9uZWRPdXQiLCJnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kIiwidGlwcHkiLCJ0YXJnZXRzIiwidmlydHVhbFJlZmVyZW5jZSIsInBvbHlmaWxscyIsImlzVmlydHVhbCIsImNsYXNzTmFtZXMiLCJwb2x5ZmlsbEVsZW1lbnRQcm90b3R5cGVQcm9wZXJ0aWVzIiwiaW5zdGFuY2VzIiwiTm9kZUxpc3QiLCJnZXRBcnJheU9mRWxlbWVudHMiLCJkZWZhdWx0cyIsInNldERlZmF1bHRzIiwicGFydGlhbERlZmF1bHRzIiwiZ3JvdXAiLCJfcmVmJGRlbGF5IiwiX3JlZiRkdXJhdGlvbiIsImlzQW55VGlwcHlPcGVuIiwiX29yaWdpbmFsUHJvcHMiLCJ1cGRhdGVJbnN0YW5jZXMiLCJzZXRJc0FueVRpcHB5T3BlbiIsImhlYWQiLCJmaXJzdENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiaW5qZWN0Q1NTIiwiRnVuY3Rpb24iLCJfUm91dGVyIiwicm91dGVyT3B0aW9ucyIsInJvdXRlciIsIlJvdXRlciIsImRpc2FibGVIb3Zlck9uVG91Y2giLCJoYXNIb3ZlckNsYXNzIiwibGFzdFRvdWNoVGltZSIsImVuYWJsZUhvdmVyIiwiY29tcG9uZW50IiwiX29wdGlvbnMiLCJfdHlwZW9mIiwiZW5jb2RlIiwiZGVjb2RlIiwic3RhdGVPYmoiLCJoYXNoU3RhdGUiLCJkZWNvZGVIYXNoIiwidmlld1Byb21pc2VzIiwiYWxsIiwiaGFzaENoYW5nZSIsInNldFN0YXRlT2JqIiwicmVwbGFjZVN0YXRlIiwiaGlzdG9yeSIsImhhc2hTdHJpbmciXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0Es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QkNBckJ4bUMsRUFBQUQsUUFBQSxxNkNDQUFDLEVBQUFELFFBQUEsdzRCQ0FBQyxFQUFBRCxRQUFBIiwiZmlsZSI6ImpzL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuIiwiLyogZ2xvYmFsIGRhdGFMYXllciAqL1xuZXhwb3J0IGZ1bmN0aW9uIEdUTVB1c2goZXZlbnRMYWJlbCkge1xuICAgIGlmIChkYXRhTGF5ZXIpIHtcbiAgICAgICAgZGF0YUxheWVyLnB1c2goeyAnZXZlbnQnOiAnSW50ZXJhY3RpdmUgQ2xpY2snLCAnZXZlbnREYXRhJzogZXZlbnRMYWJlbCB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaFdpbmRvd1Jlc2l6ZShTKSB7IC8vIG5lZWQgdG8gcGFzcyBpbiB0aGUgU3RhdGVNb2R1bGVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCByZXNpemVUaHJvdHRsZXIsIGZhbHNlKTtcblxuICAgIHZhciByZXNpemVUaW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gcmVzaXplVGhyb3R0bGVyKCkgeyAvLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3Jlc2l6ZSNzZXRUaW1lb3V0XG4gICAgICAgIC8vIGlnbm9yZSByZXNpemUgZXZlbnRzIGFzIGxvbmcgYXMgYW4gYWN0dWFsUmVzaXplSGFuZGxlciBleGVjdXRpb24gaXMgaW4gdGhlIHF1ZXVlXG4gICAgICAgIGlmICghcmVzaXplVGltZW91dCkge1xuICAgICAgICAgICAgcmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYWN0dWFsUmVzaXplSGFuZGxlcigpO1xuICAgICAgICAgICAgICAgIHJlc2l6ZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgfSwgMzUwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFjdHVhbFJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAgIFxuICAgICAgICBTLnNldFN0YXRlKCdyZXNpemUnLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XSk7XG4gICAgfVxufVxuZXhwb3J0IGNvbnN0IEZhZGVJblRleHQgPSAoZnVuY3Rpb24oKXtcbiAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUuZmFkZU91dENvbnRlbnQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCduby1vcGFjaXR5Jyk7XG4gICAgfTtcbiAgICBIVE1MRWxlbWVudC5wcm90b3R5cGUuZmFkZUluQ29udGVudCA9IGZ1bmN0aW9uKGNvbnRlbnQsIHMpe1xuICAgICAgICB2YXIgZHVyYXRpb25TID0gcyB8fCAwO1xuICAgICAgICBpZiAoIHMgKXtcbiAgICAgICAgICAgIHRoaXMuc3R5bGUudHJhbnNpdGlvbiA9ICdvcGFjaXR5ICcgKyBzICsgJ3MgZWFzZS1pbi1vdXQnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uU3RyID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcykuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNpdGlvbi1kdXJhdGlvbicpIHx8IGR1cmF0aW9uUyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHBhcnNlRmxvYXQoZHVyYXRpb25TdHIpICogMTAwMDtcbiAgICAgICAgICAgIHRoaXMuZmFkZU91dENvbnRlbnQoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ25vLW9wYWNpdHknKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICB9KTtcbiAgICB9O1xufSkoKTtcbmV4cG9ydCBjb25zdCBTdHJpbmdIZWxwZXJzID0gKGZ1bmN0aW9uKCl7XG4gICAgU3RyaW5nLnByb3RvdHlwZS5jbGVhblN0cmluZyA9IGZ1bmN0aW9uKCkgeyAvLyBsb3dlcmNhc2UgYW5kIHJlbW92ZSBwdW5jdHVhdGlvbiBhbmQgcmVwbGFjZSBzcGFjZXMgd2l0aCBoeXBoZW5zOyBkZWxldGUgcHVuY3R1YXRpb25cbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvWyAvXS9nLCctJykucmVwbGFjZSgvWydcIuKAneKAmeKAnOKAmCwuIT87KCkmOl0vZywnJykudG9Mb3dlckNhc2UoKTtcbiAgICB9O1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS5yZW1vdmVVbmRlcnNjb3JlcyA9IGZ1bmN0aW9uKCkgeyBcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvXy9nLCcgJyk7XG4gICAgfTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUudW5kb0NhbWVsQ2FzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oW0EtWl0pL2csICcgJDEnKS50b0xvd2VyQ2FzZSgpO1xuICAgIH07XG5cbiAgICBTdHJpbmcucHJvdG90eXBlLnRydW5jID0gU3RyaW5nLnByb3RvdHlwZS50cnVuYyB8fCAvLyBodCBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTE5OTQyMFxuICAgICAgICAgZnVuY3Rpb24oIG4sIHVzZVdvcmRCb3VuZGFyeSApe1xuICAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA8PSBuKSB7IHJldHVybiB0aGlzOyB9XG4gICAgICAgICAgICAgdmFyIHN1YlN0cmluZyA9IHRoaXMuc3Vic3RyKDAsIG4tMSk7XG4gICAgICAgICAgICAgcmV0dXJuICh1c2VXb3JkQm91bmRhcnkgXG4gICAgICAgICAgICAgICAgPyBzdWJTdHJpbmcuc3Vic3RyKDAsIHN1YlN0cmluZy5sYXN0SW5kZXhPZignICcpKSBcbiAgICAgICAgICAgICAgICA6IHN1YlN0cmluZykgKyBcIi4uLlwiO1xuICAgICAgICAgIH07XG5cbiAgICBTdHJpbmcucHJvdG90eXBlLmhhc2hDb2RlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaGFzaCA9IDAsIGksIGNocjtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaHIgICA9IHRoaXMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNocjtcbiAgICAgICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNoO1xuICAgIH07XG59KSgpXG5cbmV4cG9ydCBjb25zdCBET01IZWxwZXJzID0ge1xuIGM6ICAocykgPT4ge1xuICAgICBcbiAgICAgaWYgKCBzLmluZGV4T2YoJy4nKSAhPT0gLTEgfHwgcy5pbmRleE9mKCcjJykgIT09IC0xICl7XG4gICAgICAgICBsZXQgY2xhc3NTdHJpbmdzID0gcy5tYXRjaCgvXFwuKFteIy5dKikvZykgfHwgW107XG4gICAgICAgICBsZXQgaWRTdHJpbmcgPSBzLm1hdGNoKC8jKFteLl0qKS8pO1xuICAgICAgICAgbGV0IGVsU3RyaW5nID0gcy5tYXRjaCgvXihbXi4jXSspLyk7XG4gICAgICAgICBcbiAgICAgICAgIFxuICAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbFN0cmluZ1swXSk7XG4gICAgICAgICBjbGFzc1N0cmluZ3MuZm9yRWFjaChrbGFzcyA9PiB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGtsYXNzLnJlcGxhY2UoJy4nLCcnKSk7XG4gICAgICAgICB9KTtcbiAgICAgICAgIGlmICggaWRTdHJpbmcgIT09IG51bGwgKXtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZFN0cmluZ1sxXSk7XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gZWw7XG4gICAgIH1cbiAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQocyk7XG4gfSxcbiBxOiAgKHMpID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocyksXG4gcWE6IChzKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHMpXG59XG4iLCJjb25zdCBQdWJTdWIgPSByZXF1aXJlKCdwdWJzdWItanMnKTtcbmNvbnN0IHN0YXRlID0ge307XG5cbi8vYXJyYXkuY29tcGFyZShvdGhlckFycmF5KSAvL0hUIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYyMjkxOTcvaG93LXRvLWtub3ctaWYtdHdvLWFycmF5cy1oYXZlLXRoZS1zYW1lLXZhbHVlc1xuQXJyYXkucHJvdG90eXBlLmNvbXBhcmUgPSBBcnJheS5wcm90b3R5cGUuY29tcGFyZSB8fCBmdW5jdGlvbih0ZXN0QXJyKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoICE9IHRlc3RBcnIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwICYmIHRlc3RBcnIubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICBjb25zb2xlLmxvZyhcImluIGNvbXBhcmVcIik7XG4gICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXN0QXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzW2ldICE9PSB0ZXN0QXJyW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfbG9nU3RhdGUoKXtcbiAgICBjb25zb2xlLmxvZyhzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIF9nZXRTdGF0ZShwcm9wZXJ0eSl7XG4gICAgcmV0dXJuICggc3RhdGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQgKSA/IHN0YXRlW3Byb3BlcnR5XVswXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX2dldFByZXZpb3VzU3RhdGUocHJvcGVydHkpe1xuICAgIHJldHVybiAoIHN0YXRlW3Byb3BlcnR5XSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlW3Byb3BlcnR5XVsxXSAhPT0gdW5kZWZpbmVkICkgPyBzdGF0ZVtwcm9wZXJ0eV1bMV0gOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF9zZXRTdGF0ZShrZXksdmFsdWUpIHsgXG5cbiAgICBpZiAoIHN0YXRlW2tleV0gPT09IHVuZGVmaW5lZCkgeyAvLyBpZSBmaXJzdCB0aW1lIHN0YXRlIHByb3BlcnR5IGlzIGJlaW5nIGRlZmluZWRcbiAgICAgICAgc3RhdGVba2V5XSA9IFt2YWx1ZV07XG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKGtleSwgdmFsdWUpO1xuICAgICAgICBfbG9nU3RhdGUoKTtcbiAgICB9IGVsc2UgeyAvLyBub3QgdGhlIGZpcnN0IHRpbWUgdGhlIHByb3BlcnR5IGlzIGJlaW5nIGRlZmluZWRcbiAgICAvL0lmIGl0J3MgYSBzdHJpbmcgb3IgYXJyYXkgYW5kIHZhbHVlcyBhcmUgdGhlIHNhbWUsIHN0YXRlQ2hhbmdlZD1GYWxzZStcbiAgICAgICAgdmFyIHN0YXRlQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHN0YXRlQ2hhbmdlZCA9IChzdGF0ZVtrZXldWzBdICE9PSB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgQXJyYXkuaXNBcnJheShzdGF0ZVtrZXldWzBdKSkge1xuICAgICAgICAgICAgc3RhdGVDaGFuZ2VkID0gIXZhbHVlLmNvbXBhcmUoc3RhdGVba2V5XVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZUNoYW5nZWQgPSB0cnVlOyAvL2Fzc3VtZSBpdCdzIGNoYW5nZWQgaWYgd2UgY2FuJ3QgdmVyaWZ5XG4gICAgICAgIH0gICAgICAgICAgICAgIFxuICAgICAgICAvL09ubHkgcHVibGlzaCBpZiB3ZSd2ZSBjaGFuZ2VkIHN0YXRlXG4gICAgICAgIGlmICggc3RhdGVDaGFuZ2VkICkgeyBcbiAgICAgICAgICAgIHN0YXRlW2tleV0udW5zaGlmdCh2YWx1ZSk7XG4gICAgICAgICAgICBQdWJTdWIucHVibGlzaChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIF9sb2dTdGF0ZSgpO1xuICAgICAgICAgICAgaWYgKCBzdGF0ZVtrZXldLmxlbmd0aCA+IDIgKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVba2V5XS5sZW5ndGggPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnRzLnN0YXRlTW9kdWxlID0ge1xuICAgIGxvZ1N0YXRlOiBfbG9nU3RhdGUsXG4gICAgZ2V0U3RhdGU6IF9nZXRTdGF0ZSxcbiAgICBnZXRQcmV2aW91c1N0YXRlOiBfZ2V0UHJldmlvdXNTdGF0ZSxcbiAgICBzZXRTdGF0ZTogX3NldFN0YXRlXG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEwLDIwMTEsMjAxMiwyMDEzLDIwMTQgTW9yZ2FuIFJvZGVyaWNrIGh0dHA6Ly9yb2Rlcmljay5ka1xuICogTGljZW5zZTogTUlUIC0gaHR0cDovL21yZ25yZHJjay5taXQtbGljZW5zZS5vcmdcbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbXJvZGVyaWNrL1B1YlN1YkpTXG4gKi9cblxuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgUHViU3ViID0ge307XG4gICAgcm9vdC5QdWJTdWIgPSBQdWJTdWI7XG5cbiAgICB2YXIgZGVmaW5lID0gcm9vdC5kZWZpbmU7XG5cbiAgICBmYWN0b3J5KFB1YlN1Yik7XG5cbiAgICAvLyBBTUQgc3VwcG9ydFxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpe1xuICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBQdWJTdWI7IH0pO1xuXG4gICAgICAgIC8vIENvbW1vbkpTIGFuZCBOb2RlLmpzIG1vZHVsZSBzdXBwb3J0XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpe1xuICAgICAgICBpZiAobW9kdWxlICE9PSB1bmRlZmluZWQgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IFB1YlN1YjsgLy8gTm9kZS5qcyBzcGVjaWZpYyBgbW9kdWxlLmV4cG9ydHNgXG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0cy5QdWJTdWIgPSBQdWJTdWI7IC8vIENvbW1vbkpTIG1vZHVsZSAxLjEuMSBzcGVjXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFB1YlN1YjsgLy8gQ29tbW9uSlNcbiAgICB9XG5cbn0oKCB0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cgKSB8fCB0aGlzLCBmdW5jdGlvbiAoUHViU3ViKXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgbWVzc2FnZXMgPSB7fSxcbiAgICAgICAgbGFzdFVpZCA9IC0xO1xuXG4gICAgZnVuY3Rpb24gaGFzS2V5cyhvYmope1xuICAgICAgICB2YXIga2V5O1xuXG4gICAgICAgIGZvciAoa2V5IGluIG9iail7XG4gICAgICAgICAgICBpZiAoIG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpICl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHRocm93cyB0aGUgcGFzc2VkIGV4Y2VwdGlvbiwgZm9yIHVzZSBhcyBhcmd1bWVudCBmb3Igc2V0VGltZW91dFxuICAgICAqIEBhbGlhcyB0aHJvd0V4Y2VwdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IGV4IEFuIEVycm9yIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm93RXhjZXB0aW9uKCBleCApe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcmVUaHJvd0V4Y2VwdGlvbigpe1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIoIG1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgfSBjYXRjaCggZXggKXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIHRocm93RXhjZXB0aW9uKCBleCApLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgc3Vic2NyaWJlciggbWVzc2FnZSwgZGF0YSApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGl2ZXJNZXNzYWdlKCBvcmlnaW5hbE1lc3NhZ2UsIG1hdGNoZWRNZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHZhciBzdWJzY3JpYmVycyA9IG1lc3NhZ2VzW21hdGNoZWRNZXNzYWdlXSxcbiAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyID0gaW1tZWRpYXRlRXhjZXB0aW9ucyA/IGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMgOiBjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyxcbiAgICAgICAgICAgIHM7XG5cbiAgICAgICAgaWYgKCAhbWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIG1hdGNoZWRNZXNzYWdlICkgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHMgaW4gc3Vic2NyaWJlcnMpe1xuICAgICAgICAgICAgaWYgKCBzdWJzY3JpYmVycy5oYXNPd25Qcm9wZXJ0eShzKSl7XG4gICAgICAgICAgICAgICAgY2FsbFN1YnNjcmliZXIoIHN1YnNjcmliZXJzW3NdLCBvcmlnaW5hbE1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGl2ZXJOYW1lc3BhY2VkKCl7XG4gICAgICAgICAgICB2YXIgdG9waWMgPSBTdHJpbmcoIG1lc3NhZ2UgKSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcblxuICAgICAgICAgICAgLy8gZGVsaXZlciB0aGUgbWVzc2FnZSBhcyBpdCBpcyBub3dcbiAgICAgICAgICAgIGRlbGl2ZXJNZXNzYWdlKG1lc3NhZ2UsIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyB0cmltIHRoZSBoaWVyYXJjaHkgYW5kIGRlbGl2ZXIgbWVzc2FnZSB0byBlYWNoIGxldmVsXG4gICAgICAgICAgICB3aGlsZSggcG9zaXRpb24gIT09IC0xICl7XG4gICAgICAgICAgICAgICAgdG9waWMgPSB0b3BpYy5zdWJzdHIoIDAsIHBvc2l0aW9uICk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICAgICAgICAgIGRlbGl2ZXJNZXNzYWdlKCBtZXNzYWdlLCB0b3BpYywgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lc3NhZ2VIYXNTdWJzY3JpYmVycyggbWVzc2FnZSApe1xuICAgICAgICB2YXIgdG9waWMgPSBTdHJpbmcoIG1lc3NhZ2UgKSxcbiAgICAgICAgICAgIGZvdW5kID0gQm9vbGVhbihtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggdG9waWMgKSAmJiBoYXNLZXlzKG1lc3NhZ2VzW3RvcGljXSkpLFxuICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG5cbiAgICAgICAgd2hpbGUgKCAhZm91bmQgJiYgcG9zaXRpb24gIT09IC0xICl7XG4gICAgICAgICAgICB0b3BpYyA9IHRvcGljLnN1YnN0ciggMCwgcG9zaXRpb24gKTtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoICcuJyApO1xuICAgICAgICAgICAgZm91bmQgPSBCb29sZWFuKG1lc3NhZ2VzLmhhc093blByb3BlcnR5KCB0b3BpYyApICYmIGhhc0tleXMobWVzc2FnZXNbdG9waWNdKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgc3luYywgaW1tZWRpYXRlRXhjZXB0aW9ucyApe1xuICAgICAgICBtZXNzYWdlID0gKHR5cGVvZiBtZXNzYWdlID09PSAnc3ltYm9sJykgPyBtZXNzYWdlLnRvU3RyaW5nKCkgOiBtZXNzYWdlO1xuXG4gICAgICAgIHZhciBkZWxpdmVyID0gY3JlYXRlRGVsaXZlcnlGdW5jdGlvbiggbWVzc2FnZSwgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApLFxuICAgICAgICAgICAgaGFzU3Vic2NyaWJlcnMgPSBtZXNzYWdlSGFzU3Vic2NyaWJlcnMoIG1lc3NhZ2UgKTtcblxuICAgICAgICBpZiAoICFoYXNTdWJzY3JpYmVycyApe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBzeW5jID09PSB0cnVlICl7XG4gICAgICAgICAgICBkZWxpdmVyKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCBkZWxpdmVyLCAwICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIHRoZSBtZXNzYWdlLCBwYXNzaW5nIHRoZSBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAYWxpYXMgcHVibGlzaFxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gcHVibGlzaFxuICAgICAqIEBwYXJhbSB7fSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgdG8gc3Vic2NyaWJlcnNcbiAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9XG4gICAgICovXG4gICAgUHViU3ViLnB1Ymxpc2ggPSBmdW5jdGlvbiggbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICByZXR1cm4gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgZmFsc2UsIFB1YlN1Yi5pbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2hlcyB0aGUgdGhlIG1lc3NhZ2Ugc3luY2hyb25vdXNseSwgcGFzc2luZyB0aGUgZGF0YSB0byBpdCdzIHN1YnNjcmliZXJzXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHB1Ymxpc2hTeW5jXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBwdWJsaXNoXG4gICAgICogQHBhcmFtIHt9IGRhdGEgVGhlIGRhdGEgdG8gcGFzcyB0byBzdWJzY3JpYmVyc1xuICAgICAqIEByZXR1cm4geyBCb29sZWFuIH1cbiAgICAgKi9cbiAgICBQdWJTdWIucHVibGlzaFN5bmMgPSBmdW5jdGlvbiggbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICByZXR1cm4gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgdHJ1ZSwgUHViU3ViLmltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0aGUgcGFzc2VkIGZ1bmN0aW9uIHRvIHRoZSBwYXNzZWQgbWVzc2FnZS4gRXZlcnkgcmV0dXJuZWQgdG9rZW4gaXMgdW5pcXVlIGFuZCBzaG91bGQgYmUgc3RvcmVkIGlmIHlvdSBuZWVkIHRvIHVuc3Vic2NyaWJlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHN1YnNjcmliZVxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gc3Vic2NyaWJlIHRvXG4gICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gYSBuZXcgbWVzc2FnZSBpcyBwdWJsaXNoZWRcbiAgICAgKiBAcmV0dXJuIHsgU3RyaW5nIH1cbiAgICAgKi9cbiAgICBQdWJTdWIuc3Vic2NyaWJlID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGZ1bmMgKXtcbiAgICAgICAgaWYgKCB0eXBlb2YgZnVuYyAhPT0gJ2Z1bmN0aW9uJyl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBtZXNzYWdlID0gKHR5cGVvZiBtZXNzYWdlID09PSAnc3ltYm9sJykgPyBtZXNzYWdlLnRvU3RyaW5nKCkgOiBtZXNzYWdlO1xuXG4gICAgICAgIC8vIG1lc3NhZ2UgaXMgbm90IHJlZ2lzdGVyZWQgeWV0XG4gICAgICAgIGlmICggIW1lc3NhZ2VzLmhhc093blByb3BlcnR5KCBtZXNzYWdlICkgKXtcbiAgICAgICAgICAgIG1lc3NhZ2VzW21lc3NhZ2VdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmb3JjaW5nIHRva2VuIGFzIFN0cmluZywgdG8gYWxsb3cgZm9yIGZ1dHVyZSBleHBhbnNpb25zIHdpdGhvdXQgYnJlYWtpbmcgdXNhZ2VcbiAgICAgICAgLy8gYW5kIGFsbG93IGZvciBlYXN5IHVzZSBhcyBrZXkgbmFtZXMgZm9yIHRoZSAnbWVzc2FnZXMnIG9iamVjdFxuICAgICAgICB2YXIgdG9rZW4gPSAndWlkXycgKyBTdHJpbmcoKytsYXN0VWlkKTtcbiAgICAgICAgbWVzc2FnZXNbbWVzc2FnZV1bdG9rZW5dID0gZnVuYztcbiAgICAgICAgXG4gICAgICAgIC8vIHJldHVybiB0b2tlbiBmb3IgdW5zdWJzY3JpYmluZ1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2Ugb25jZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzdWJzY3JpYmUgdG9cbiAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhIG5ldyBtZXNzYWdlIGlzIHB1Ymxpc2hlZFxuICAgICAqIEByZXR1cm4geyBQdWJTdWIgfVxuICAgICAqL1xuICAgIFB1YlN1Yi5zdWJzY3JpYmVPbmNlID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGZ1bmMgKXtcbiAgICAgICAgdmFyIHRva2VuID0gUHViU3ViLnN1YnNjcmliZSggbWVzc2FnZSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIGJlZm9yZSBmdW5jIGFwcGx5LCB1bnN1YnNjcmliZSBtZXNzYWdlXG4gICAgICAgICAgICBQdWJTdWIudW5zdWJzY3JpYmUoIHRva2VuICk7XG4gICAgICAgICAgICBmdW5jLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQdWJTdWI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgc3Vic2NyaXB0aW9uc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyQWxsU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyQWxsU3Vic2NyaXB0aW9ucygpe1xuICAgICAgICBtZXNzYWdlcyA9IHt9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBzdWJzY3JpcHRpb25zIGJ5IHRoZSB0b3BpY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyU3Vic2NyaXB0aW9ucyh0b3BpYyl7XG4gICAgICAgIHZhciBtO1xuICAgICAgICBmb3IgKG0gaW4gbWVzc2FnZXMpe1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2VzLmhhc093blByb3BlcnR5KG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDApe1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlc1ttXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHN1YnNjcmlwdGlvbnNcbiAgICAgKlxuICAgICAqIC0gV2hlbiBwYXNzZWQgYSB0b2tlbiwgcmVtb3ZlcyBhIHNwZWNpZmljIHN1YnNjcmlwdGlvbi5cbiAgICAgKlxuXHQgKiAtIFdoZW4gcGFzc2VkIGEgZnVuY3Rpb24sIHJlbW92ZXMgYWxsIHN1YnNjcmlwdGlvbnMgZm9yIHRoYXQgZnVuY3Rpb25cbiAgICAgKlxuXHQgKiAtIFdoZW4gcGFzc2VkIGEgdG9waWMsIHJlbW92ZXMgYWxsIHN1YnNjcmlwdGlvbnMgZm9yIHRoYXQgdG9waWMgKGhpZXJhcmNoeSlcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcHVibGljXG4gICAgICogQGFsaWFzIHN1YnNjcmliZU9uY2VcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfCBGdW5jdGlvbiB9IHZhbHVlIEEgdG9rZW4sIGZ1bmN0aW9uIG9yIHRvcGljIHRvIHVuc3Vic2NyaWJlIGZyb21cbiAgICAgKiBAZXhhbXBsZSAvLyBVbnN1YnNjcmliaW5nIHdpdGggYSB0b2tlblxuICAgICAqIHZhciB0b2tlbiA9IFB1YlN1Yi5zdWJzY3JpYmUoJ215dG9waWMnLCBteUZ1bmMpO1xuICAgICAqIFB1YlN1Yi51bnN1YnNjcmliZSh0b2tlbik7XG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyB3aXRoIGEgZnVuY3Rpb25cbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUobXlGdW5jKTtcbiAgICAgKiBAZXhhbXBsZSAvLyBVbnN1YnNjcmliaW5nIGZyb20gYSB0b3BpY1xuICAgICAqIFB1YlN1Yi51bnN1YnNjcmliZSgnbXl0b3BpYycpO1xuICAgICAqL1xuICAgIFB1YlN1Yi51bnN1YnNjcmliZSA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgdmFyIGRlc2NlbmRhbnRUb3BpY0V4aXN0cyA9IGZ1bmN0aW9uKHRvcGljKSB7XG4gICAgICAgICAgICAgICAgdmFyIG07XG4gICAgICAgICAgICAgICAgZm9yICggbSBpbiBtZXNzYWdlcyApe1xuICAgICAgICAgICAgICAgICAgICBpZiAoIG1lc3NhZ2VzLmhhc093blByb3BlcnR5KG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDAgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgZGVzY2VuZGFudCBvZiB0aGUgdG9waWMgZXhpc3RzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNUb3BpYyAgICA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgKCBtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgfHwgZGVzY2VuZGFudFRvcGljRXhpc3RzKHZhbHVlKSApLFxuICAgICAgICAgICAgaXNUb2tlbiAgICA9ICFpc1RvcGljICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycsXG4gICAgICAgICAgICBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nLFxuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2UsXG4gICAgICAgICAgICBtLCBtZXNzYWdlLCB0O1xuXG4gICAgICAgIGlmIChpc1RvcGljKXtcbiAgICAgICAgICAgIFB1YlN1Yi5jbGVhclN1YnNjcmlwdGlvbnModmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICggbSBpbiBtZXNzYWdlcyApe1xuICAgICAgICAgICAgaWYgKCBtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggbSApICl7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzW21dO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBpc1Rva2VuICYmIG1lc3NhZ2VbdmFsdWVdICl7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlW3ZhbHVlXTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRva2VucyBhcmUgdW5pcXVlLCBzbyB3ZSBjYW4ganVzdCBzdG9wIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdCBpbiBtZXNzYWdlICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5oYXNPd25Qcm9wZXJ0eSh0KSAmJiBtZXNzYWdlW3RdID09PSB2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VbdF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn0pKTtcbiIsIi8qKiFcbiAqIEBmaWxlT3ZlcnZpZXcgS2lja2FzcyBsaWJyYXJ5IHRvIGNyZWF0ZSBhbmQgcGxhY2UgcG9wcGVycyBuZWFyIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50cy5cbiAqIEB2ZXJzaW9uIDEuMTUuMFxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNiBGZWRlcmljbyBaaXZvbG8gYW5kIGNvbnRyaWJ1dG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKi9cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgbG9uZ2VyVGltZW91dEJyb3dzZXJzID0gWydFZGdlJywgJ1RyaWRlbnQnLCAnRmlyZWZveCddO1xudmFyIHRpbWVvdXREdXJhdGlvbiA9IDA7XG5mb3IgKHZhciBpID0gMDsgaSA8IGxvbmdlclRpbWVvdXRCcm93c2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICB0aW1lb3V0RHVyYXRpb24gPSAxO1xuICAgIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gZmFsc2U7XG4gICAgICBmbigpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBjc3MgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbiAgcmV0dXJuIHByb3BlcnR5ID8gY3NzW3Byb3BlcnR5XSA6IGNzcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQuaG9zdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY3JvbGxpbmcgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdFxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIHN3aXRjaCAoZWxlbWVudC5ub2RlTmFtZSkge1xuICAgIGNhc2UgJ0hUTUwnOlxuICAgIGNhc2UgJ0JPRFknOlxuICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5O1xuICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICByZXR1cm4gZWxlbWVudC5ib2R5O1xuICB9XG5cbiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG5cbiAgdmFyIF9nZXRTdHlsZUNvbXB1dGVkUHJvcCA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1k7XG5cbiAgaWYgKC8oYXV0b3xzY3JvbGx8b3ZlcmxheSkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG52YXIgaXNJRTExID0gaXNCcm93c2VyICYmICEhKHdpbmRvdy5NU0lucHV0TWV0aG9kQ29udGV4dCAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGlzSUUxMCA9IGlzQnJvd3NlciAmJiAvTVNJRSAxMC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBicm93c2VyIGlzIEludGVybmV0IEV4cGxvcmVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGlzSUVcbiAqL1xuZnVuY3Rpb24gaXNJRSh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxMSkge1xuICAgIHJldHVybiBpc0lFMTE7XG4gIH1cbiAgaWYgKHZlcnNpb24gPT09IDEwKSB7XG4gICAgcmV0dXJuIGlzSUUxMDtcbiAgfVxuICByZXR1cm4gaXNJRTExIHx8IGlzSUUxMDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvZmZzZXQgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICB2YXIgbm9PZmZzZXRQYXJlbnQgPSBpc0lFKDEwKSA/IGRvY3VtZW50LmJvZHkgOiBudWxsO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCB8fCBudWxsO1xuICAvLyBTa2lwIGhpZGRlbiBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGFuIG9mZnNldFBhcmVudFxuICB3aGlsZSAob2Zmc2V0UGFyZW50ID09PSBub09mZnNldFBhcmVudCAmJiBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykge1xuICAgIG9mZnNldFBhcmVudCA9IChlbGVtZW50ID0gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDtcbiAgfVxuXG4gIHZhciBub2RlTmFtZSA9IG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQubm9kZU5hbWU7XG5cbiAgaWYgKCFub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyAub2Zmc2V0UGFyZW50IHdpbGwgcmV0dXJuIHRoZSBjbG9zZXN0IFRILCBURCBvciBUQUJMRSBpbiBjYXNlXG4gIC8vIG5vIG9mZnNldFBhcmVudCBpcyBwcmVzZW50LCBJIGhhdGUgdGhpcyBqb2IuLi5cbiAgaWYgKFsnVEgnLCAnVEQnLCAnVEFCTEUnXS5pbmRleE9mKG9mZnNldFBhcmVudC5ub2RlTmFtZSkgIT09IC0xICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShvZmZzZXRQYXJlbnQsICdwb3NpdGlvbicpID09PSAnc3RhdGljJykge1xuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQ7XG59XG5cbmZ1bmN0aW9uIGlzT2Zmc2V0Q29udGFpbmVyKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbm9kZU5hbWUgPT09ICdIVE1MJyB8fCBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkgPT09IGVsZW1lbnQ7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIHJvb3Qgbm9kZSAoZG9jdW1lbnQsIHNoYWRvd0RPTSByb290KSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBub2RlXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcm9vdCBub2RlXG4gKi9cbmZ1bmN0aW9uIGdldFJvb3Qobm9kZSkge1xuICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGdldFJvb3Qobm9kZS5wYXJlbnROb2RlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBvZmZzZXQgcGFyZW50IGNvbW1vbiB0byB0aGUgdHdvIHByb3ZpZGVkIG5vZGVzXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQxXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQyXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gY29tbW9uIG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZWxlbWVudDIpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudDEgfHwgIWVsZW1lbnQxLm5vZGVUeXBlIHx8ICFlbGVtZW50MiB8fCAhZWxlbWVudDIubm9kZVR5cGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gSGVyZSB3ZSBtYWtlIHN1cmUgdG8gZ2l2ZSBhcyBcInN0YXJ0XCIgdGhlIGVsZW1lbnQgdGhhdCBjb21lcyBmaXJzdCBpbiB0aGUgRE9NXG4gIHZhciBvcmRlciA9IGVsZW1lbnQxLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQyKSAmIE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HO1xuICB2YXIgc3RhcnQgPSBvcmRlciA/IGVsZW1lbnQxIDogZWxlbWVudDI7XG4gIHZhciBlbmQgPSBvcmRlciA/IGVsZW1lbnQyIDogZWxlbWVudDE7XG5cbiAgLy8gR2V0IGNvbW1vbiBhbmNlc3RvciBjb250YWluZXJcbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsIDApO1xuICByYW5nZS5zZXRFbmQoZW5kLCAwKTtcbiAgdmFyIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG5cbiAgLy8gQm90aCBub2RlcyBhcmUgaW5zaWRlICNkb2N1bWVudFxuXG4gIGlmIChlbGVtZW50MSAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgJiYgZWxlbWVudDIgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIHx8IHN0YXJ0LmNvbnRhaW5zKGVuZCkpIHtcbiAgICBpZiAoaXNPZmZzZXRDb250YWluZXIoY29tbW9uQW5jZXN0b3JDb250YWluZXIpKSB7XG4gICAgICByZXR1cm4gY29tbW9uQW5jZXN0b3JDb250YWluZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChjb21tb25BbmNlc3RvckNvbnRhaW5lcik7XG4gIH1cblxuICAvLyBvbmUgb2YgdGhlIG5vZGVzIGlzIGluc2lkZSBzaGFkb3dET00sIGZpbmQgd2hpY2ggb25lXG4gIHZhciBlbGVtZW50MXJvb3QgPSBnZXRSb290KGVsZW1lbnQxKTtcbiAgaWYgKGVsZW1lbnQxcm9vdC5ob3N0KSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDFyb290Lmhvc3QsIGVsZW1lbnQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MSwgZ2V0Um9vdChlbGVtZW50MikuaG9zdCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzY3JvbGwgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQgaW4gdGhlIGdpdmVuIHNpZGUgKHRvcCBhbmQgbGVmdClcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtTdHJpbmd9IHNpZGUgYHRvcGAgb3IgYGxlZnRgXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBhbW91bnQgb2Ygc2Nyb2xsZWQgcGl4ZWxzXG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbChlbGVtZW50KSB7XG4gIHZhciBzaWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAndG9wJztcblxuICB2YXIgdXBwZXJTaWRlID0gc2lkZSA9PT0gJ3RvcCcgPyAnc2Nyb2xsVG9wJyA6ICdzY3JvbGxMZWZ0JztcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcblxuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHZhciBzY3JvbGxpbmdFbGVtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgaHRtbDtcbiAgICByZXR1cm4gc2Nyb2xsaW5nRWxlbWVudFt1cHBlclNpZGVdO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRbdXBwZXJTaWRlXTtcbn1cblxuLypcbiAqIFN1bSBvciBzdWJ0cmFjdCB0aGUgZWxlbWVudCBzY3JvbGwgdmFsdWVzIChsZWZ0IGFuZCB0b3ApIGZyb20gYSBnaXZlbiByZWN0IG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHJlY3QgLSBSZWN0IG9iamVjdCB5b3Ugd2FudCB0byBjaGFuZ2VcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCBmcm9tIHRoZSBmdW5jdGlvbiByZWFkcyB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHBhcmFtIHtCb29sZWFufSBzdWJ0cmFjdCAtIHNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIHN1YnRyYWN0IHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY3QgLSBUaGUgbW9kaWZpZXIgcmVjdCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gaW5jbHVkZVNjcm9sbChyZWN0LCBlbGVtZW50KSB7XG4gIHZhciBzdWJ0cmFjdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gIHZhciBtb2RpZmllciA9IHN1YnRyYWN0ID8gLTEgOiAxO1xuICByZWN0LnRvcCArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5ib3R0b20gKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QubGVmdCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZXR1cm4gcmVjdDtcbn1cblxuLypcbiAqIEhlbHBlciB0byBkZXRlY3QgYm9yZGVycyBvZiBhIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Q1NTU3R5bGVEZWNsYXJhdGlvbn0gc3R5bGVzXG4gKiBSZXN1bHQgb2YgYGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eWAgb24gdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBheGlzIC0gYHhgIG9yIGB5YFxuICogQHJldHVybiB7bnVtYmVyfSBib3JkZXJzIC0gVGhlIGJvcmRlcnMgc2l6ZSBvZiB0aGUgZ2l2ZW4gYXhpc1xuICovXG5cbmZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcywgYXhpcykge1xuICB2YXIgc2lkZUEgPSBheGlzID09PSAneCcgPyAnTGVmdCcgOiAnVG9wJztcbiAgdmFyIHNpZGVCID0gc2lkZUEgPT09ICdMZWZ0JyA/ICdSaWdodCcgOiAnQm90dG9tJztcblxuICByZXR1cm4gcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQSArICdXaWR0aCddLCAxMCkgKyBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVCICsgJ1dpZHRoJ10sIDEwKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2l6ZShheGlzLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSB7XG4gIHJldHVybiBNYXRoLm1heChib2R5WydvZmZzZXQnICsgYXhpc10sIGJvZHlbJ3Njcm9sbCcgKyBheGlzXSwgaHRtbFsnY2xpZW50JyArIGF4aXNdLCBodG1sWydvZmZzZXQnICsgYXhpc10sIGh0bWxbJ3Njcm9sbCcgKyBheGlzXSwgaXNJRSgxMCkgPyBwYXJzZUludChodG1sWydvZmZzZXQnICsgYXhpc10pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdUb3AnIDogJ0xlZnQnKV0pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldKSA6IDApO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTaXplcyhkb2N1bWVudCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSUUoMTApICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFNpemUoJ0hlaWdodCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICAgIHdpZHRoOiBnZXRTaXplKCdXaWR0aCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpXG4gIH07XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywge1xuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgdHJ5IHtcbiAgICBpZiAoaXNJRSgxMCkpIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoZWxlbWVudC5vd25lckRvY3VtZW50KSA6IHt9O1xuICB2YXIgd2lkdGggPSBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC5yaWdodCAtIHJlc3VsdC5sZWZ0O1xuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5ib3R0b20gLSByZXN1bHQudG9wO1xuXG4gIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIGlzSUUxMCA9IGlzSUUoMTApO1xuICB2YXIgaXNIVE1MID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCc7XG4gIHZhciBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGNoaWxkcmVuKTtcblxuICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIHZhciBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoLCAxMCk7XG4gIHZhciBib3JkZXJMZWZ0V2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5ib3JkZXJMZWZ0V2lkdGgsIDEwKTtcblxuICAvLyBJbiBjYXNlcyB3aGVyZSB0aGUgcGFyZW50IGlzIGZpeGVkLCB3ZSBtdXN0IGlnbm9yZSBuZWdhdGl2ZSBzY3JvbGwgaW4gb2Zmc2V0IGNhbGNcbiAgaWYgKGZpeGVkUG9zaXRpb24gJiYgaXNIVE1MKSB7XG4gICAgcGFyZW50UmVjdC50b3AgPSBNYXRoLm1heChwYXJlbnRSZWN0LnRvcCwgMCk7XG4gICAgcGFyZW50UmVjdC5sZWZ0ID0gTWF0aC5tYXgocGFyZW50UmVjdC5sZWZ0LCAwKTtcbiAgfVxuICB2YXIgb2Zmc2V0cyA9IGdldENsaWVudFJlY3Qoe1xuICAgIHRvcDogY2hpbGRyZW5SZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wIC0gYm9yZGVyVG9wV2lkdGgsXG4gICAgbGVmdDogY2hpbGRyZW5SZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgLSBib3JkZXJMZWZ0V2lkdGgsXG4gICAgd2lkdGg6IGNoaWxkcmVuUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IGNoaWxkcmVuUmVjdC5oZWlnaHRcbiAgfSk7XG4gIG9mZnNldHMubWFyZ2luVG9wID0gMDtcbiAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gMDtcblxuICAvLyBTdWJ0cmFjdCBtYXJnaW5zIG9mIGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGl0J3MgYmVpbmcgdXNlZCBhcyBwYXJlbnRcbiAgLy8gd2UgZG8gdGhpcyBvbmx5IG9uIEhUTUwgYmVjYXVzZSBpdCdzIHRoZSBvbmx5IGVsZW1lbnQgdGhhdCBiZWhhdmVzXG4gIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluXG4gIC8vIHRoZSBib3ggb2YgdGhlIGRvY3VtZW50RWxlbWVudCwgaW4gdGhlIG90aGVyIGNhc2VzIG5vdC5cbiAgaWYgKCFpc0lFMTAgJiYgaXNIVE1MKSB7XG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCwgMTApO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCwgMTApO1xuXG4gICAgb2Zmc2V0cy50b3AgLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5ib3R0b20gLT0gYm9yZGVyVG9wV2lkdGggLSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5sZWZ0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG4gICAgb2Zmc2V0cy5yaWdodCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuXG4gICAgLy8gQXR0YWNoIG1hcmdpblRvcCBhbmQgbWFyZ2luTGVmdCBiZWNhdXNlIGluIHNvbWUgY2lyY3Vtc3RhbmNlcyB3ZSBtYXkgbmVlZCB0aGVtXG4gICAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XG4gICAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gbWFyZ2luTGVmdDtcbiAgfVxuXG4gIGlmIChpc0lFMTAgJiYgIWZpeGVkUG9zaXRpb24gPyBwYXJlbnQuY29udGFpbnMoc2Nyb2xsUGFyZW50KSA6IHBhcmVudCA9PT0gc2Nyb2xsUGFyZW50ICYmIHNjcm9sbFBhcmVudC5ub2RlTmFtZSAhPT0gJ0JPRFknKSB7XG4gICAgb2Zmc2V0cyA9IGluY2x1ZGVTY3JvbGwob2Zmc2V0cywgcGFyZW50KTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUoZWxlbWVudCkge1xuICB2YXIgZXhjbHVkZVNjcm9sbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGh0bWwgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgcmVsYXRpdmVPZmZzZXQgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoZWxlbWVudCwgaHRtbCk7XG4gIHZhciB3aWR0aCA9IE1hdGgubWF4KGh0bWwuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICB2YXIgaGVpZ2h0ID0gTWF0aC5tYXgoaHRtbC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcblxuICB2YXIgc2Nyb2xsVG9wID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCkgOiAwO1xuICB2YXIgc2Nyb2xsTGVmdCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwsICdsZWZ0JykgOiAwO1xuXG4gIHZhciBvZmZzZXQgPSB7XG4gICAgdG9wOiBzY3JvbGxUb3AgLSByZWxhdGl2ZU9mZnNldC50b3AgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5Ub3AsXG4gICAgbGVmdDogc2Nyb2xsTGVmdCAtIHJlbGF0aXZlT2Zmc2V0LmxlZnQgKyByZWxhdGl2ZU9mZnNldC5tYXJnaW5MZWZ0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KG9mZnNldCk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGVsZW1lbnQgaXMgZml4ZWQgb3IgaXMgaW5zaWRlIGEgZml4ZWQgcGFyZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gY3VzdG9tQ29udGFpbmVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvIFwiaXNGaXhlZD9cIlxuICovXG5mdW5jdGlvbiBpc0ZpeGVkKGVsZW1lbnQpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsICdwb3NpdGlvbicpID09PSAnZml4ZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIHBhcmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGlzRml4ZWQocGFyZW50Tm9kZSk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGZpcnN0IHBhcmVudCBvZiBhbiBlbGVtZW50IHRoYXQgaGFzIGEgdHJhbnNmb3JtZWQgcHJvcGVydHkgZGVmaW5lZFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gZmlyc3QgdHJhbnNmb3JtZWQgcGFyZW50IG9yIGRvY3VtZW50RWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50IHx8ICFlbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgaXNJRSgpKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgZWwgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIHdoaWxlIChlbCAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWwsICd0cmFuc2Zvcm0nKSA9PT0gJ25vbmUnKSB7XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBlbCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59XG5cbi8qKlxuICogQ29tcHV0ZWQgdGhlIGJvdW5kYXJpZXMgbGltaXRzIGFuZCByZXR1cm4gdGhlbVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudCAtIEVsZW1lbnQgdXNlZCB0byBkZWZpbmUgdGhlIGJvdW5kYXJpZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZml4ZWRQb3NpdGlvbiAtIElzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIHRoZSBib3VuZGFyaWVzXG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuXG4gIHZhciBib3VuZGFyaWVzID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTtcblxuICAvLyBIYW5kbGUgdmlld3BvcnQgY2FzZVxuICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd2aWV3cG9ydCcpIHtcbiAgICBib3VuZGFyaWVzID0gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gSGFuZGxlIG90aGVyIGNhc2VzIGJhc2VkIG9uIERPTSBlbGVtZW50IHVzZWQgYXMgYm91bmRhcmllc1xuICAgIHZhciBib3VuZGFyaWVzTm9kZSA9IHZvaWQgMDtcbiAgICBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKHJlZmVyZW5jZSkpO1xuICAgICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3dpbmRvdycpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IGJvdW5kYXJpZXNFbGVtZW50O1xuICAgIH1cblxuICAgIHZhciBvZmZzZXRzID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGJvdW5kYXJpZXNOb2RlLCBvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuXG4gICAgLy8gSW4gY2FzZSBvZiBIVE1MLCB3ZSBuZWVkIGEgZGlmZmVyZW50IGNvbXB1dGF0aW9uXG4gICAgaWYgKGJvdW5kYXJpZXNOb2RlLm5vZGVOYW1lID09PSAnSFRNTCcgJiYgIWlzRml4ZWQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgdmFyIF9nZXRXaW5kb3dTaXplcyA9IGdldFdpbmRvd1NpemVzKHBvcHBlci5vd25lckRvY3VtZW50KSxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0V2luZG93U2l6ZXMuaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoID0gX2dldFdpbmRvd1NpemVzLndpZHRoO1xuXG4gICAgICBib3VuZGFyaWVzLnRvcCArPSBvZmZzZXRzLnRvcCAtIG9mZnNldHMubWFyZ2luVG9wO1xuICAgICAgYm91bmRhcmllcy5ib3R0b20gPSBoZWlnaHQgKyBvZmZzZXRzLnRvcDtcbiAgICAgIGJvdW5kYXJpZXMubGVmdCArPSBvZmZzZXRzLmxlZnQgLSBvZmZzZXRzLm1hcmdpbkxlZnQ7XG4gICAgICBib3VuZGFyaWVzLnJpZ2h0ID0gd2lkdGggKyBvZmZzZXRzLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGZvciBhbGwgdGhlIG90aGVyIERPTSBlbGVtZW50cywgdGhpcyBvbmUgaXMgZ29vZFxuICAgICAgYm91bmRhcmllcyA9IG9mZnNldHM7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHBhZGRpbmdzXG4gIHBhZGRpbmcgPSBwYWRkaW5nIHx8IDA7XG4gIHZhciBpc1BhZGRpbmdOdW1iZXIgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ251bWJlcic7XG4gIGJvdW5kYXJpZXMubGVmdCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5sZWZ0IHx8IDA7XG4gIGJvdW5kYXJpZXMudG9wICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnRvcCB8fCAwO1xuICBib3VuZGFyaWVzLnJpZ2h0IC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnJpZ2h0IHx8IDA7XG4gIGJvdW5kYXJpZXMuYm90dG9tIC09IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmJvdHRvbSB8fCAwO1xuXG4gIHJldHVybiBib3VuZGFyaWVzO1xufVxuXG5mdW5jdGlvbiBnZXRBcmVhKF9yZWYpIHtcbiAgdmFyIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gIHJldHVybiB3aWR0aCAqIGhlaWdodDtcbn1cblxuLyoqXG4gKiBVdGlsaXR5IHVzZWQgdG8gdHJhbnNmb3JtIHRoZSBgYXV0b2AgcGxhY2VtZW50IHRvIHRoZSBwbGFjZW1lbnQgd2l0aCBtb3JlXG4gKiBhdmFpbGFibGUgc3BhY2UuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChwbGFjZW1lbnQsIHJlZlJlY3QsIHBvcHBlciwgcmVmZXJlbmNlLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgcGFkZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDtcblxuICBpZiAocGxhY2VtZW50LmluZGV4T2YoJ2F1dG8nKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50O1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCk7XG5cbiAgdmFyIHJlY3RzID0ge1xuICAgIHRvcDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlZlJlY3QudG9wIC0gYm91bmRhcmllcy50b3BcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy5yaWdodCAtIHJlZlJlY3QucmlnaHQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmJvdHRvbSAtIHJlZlJlY3QuYm90dG9tXG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICB3aWR0aDogcmVmUmVjdC5sZWZ0IC0gYm91bmRhcmllcy5sZWZ0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH1cbiAgfTtcblxuICB2YXIgc29ydGVkQXJlYXMgPSBPYmplY3Qua2V5cyhyZWN0cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAga2V5OiBrZXlcbiAgICB9LCByZWN0c1trZXldLCB7XG4gICAgICBhcmVhOiBnZXRBcmVhKHJlY3RzW2tleV0pXG4gICAgfSk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYi5hcmVhIC0gYS5hcmVhO1xuICB9KTtcblxuICB2YXIgZmlsdGVyZWRBcmVhcyA9IHNvcnRlZEFyZWFzLmZpbHRlcihmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgd2lkdGggPSBfcmVmMi53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gX3JlZjIuaGVpZ2h0O1xuICAgIHJldHVybiB3aWR0aCA+PSBwb3BwZXIuY2xpZW50V2lkdGggJiYgaGVpZ2h0ID49IHBvcHBlci5jbGllbnRIZWlnaHQ7XG4gIH0pO1xuXG4gIHZhciBjb21wdXRlZFBsYWNlbWVudCA9IGZpbHRlcmVkQXJlYXMubGVuZ3RoID4gMCA/IGZpbHRlcmVkQXJlYXNbMF0ua2V5IDogc29ydGVkQXJlYXNbMF0ua2V5O1xuXG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICByZXR1cm4gY29tcHV0ZWRQbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtFbGVtZW50fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtFbGVtZW50fSBmaXhlZFBvc2l0aW9uIC0gaXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG5cbiAgdmFyIGNvbW1vbk9mZnNldFBhcmVudCA9IGZpeGVkUG9zaXRpb24gPyBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KHBvcHBlcikgOiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KHBvcHBlciwgcmVmZXJlbmNlKTtcbiAgcmV0dXJuIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShyZWZlcmVuY2UsIGNvbW1vbk9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvdXRlciBzaXplcyBvZiB0aGUgZ2l2ZW4gZWxlbWVudCAob2Zmc2V0IHNpemUgKyBtYXJnaW5zKVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyB3aWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0T3V0ZXJTaXplcyhlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgdmFyIHggPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3AgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Cb3R0b20gfHwgMCk7XG4gIHZhciB5ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblJpZ2h0IHx8IDApO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIHdpZHRoOiBlbGVtZW50Lm9mZnNldFdpZHRoICsgeSxcbiAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgeFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IG9mIHRoZSBnaXZlbiBvbmVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50XG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICB2YXIgaGFzaCA9IHsgbGVmdDogJ3JpZ2h0JywgcmlnaHQ6ICdsZWZ0JywgYm90dG9tOiAndG9wJywgdG9wOiAnYm90dG9tJyB9O1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSBDU1MgcG9zaXRpb24gdGhlIFBvcHBlciB3aWxsIGdldCBhcHBsaWVkXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzIC0gdGhlIHJlZmVyZW5jZSBvZmZzZXRzICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7U3RyaW5nfSBwbGFjZW1lbnQgLSBvbmUgb2YgdGhlIHZhbGlkIHBsYWNlbWVudCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzIC0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9mZnNldHMgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXJcbiAqL1xuZnVuY3Rpb24gZ2V0UG9wcGVyT2Zmc2V0cyhwb3BwZXIsIHJlZmVyZW5jZU9mZnNldHMsIHBsYWNlbWVudCkge1xuICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICAvLyBHZXQgcG9wcGVyIG5vZGUgc2l6ZXNcbiAgdmFyIHBvcHBlclJlY3QgPSBnZXRPdXRlclNpemVzKHBvcHBlcik7XG5cbiAgLy8gQWRkIHBvc2l0aW9uLCB3aWR0aCBhbmQgaGVpZ2h0IHRvIG91ciBvZmZzZXRzIG9iamVjdFxuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHtcbiAgICB3aWR0aDogcG9wcGVyUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHBvcHBlclJlY3QuaGVpZ2h0XG4gIH07XG5cbiAgLy8gZGVwZW5kaW5nIGJ5IHRoZSBwb3BwZXIgcGxhY2VtZW50IHdlIGhhdmUgdG8gY29tcHV0ZSBpdHMgb2Zmc2V0cyBzbGlnaHRseSBkaWZmZXJlbnRseVxuICB2YXIgaXNIb3JpeiA9IFsncmlnaHQnLCAnbGVmdCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBtYWluU2lkZSA9IGlzSG9yaXogPyAndG9wJyA6ICdsZWZ0JztcbiAgdmFyIHNlY29uZGFyeVNpZGUgPSBpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzZWNvbmRhcnlNZWFzdXJlbWVudCA9ICFpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIHBvcHBlck9mZnNldHNbbWFpblNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1ttYWluU2lkZV0gKyByZWZlcmVuY2VPZmZzZXRzW21lYXN1cmVtZW50XSAvIDIgLSBwb3BwZXJSZWN0W21lYXN1cmVtZW50XSAvIDI7XG4gIGlmIChwbGFjZW1lbnQgPT09IHNlY29uZGFyeVNpZGUpIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSAtIHBvcHBlclJlY3Rbc2Vjb25kYXJ5TWVhc3VyZW1lbnRdO1xuICB9IGVsc2Uge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW2dldE9wcG9zaXRlUGxhY2VtZW50KHNlY29uZGFyeVNpZGUpXTtcbiAgfVxuXG4gIHJldHVybiBwb3BwZXJPZmZzZXRzO1xufVxuXG4vKipcbiAqIE1pbWljcyB0aGUgYGZpbmRgIG1ldGhvZCBvZiBBcnJheVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kKGFyciwgY2hlY2spIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kIGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICByZXR1cm4gYXJyLmZpbmQoY2hlY2spO1xuICB9XG5cbiAgLy8gdXNlIGBmaWx0ZXJgIHRvIG9idGFpbiB0aGUgc2FtZSBiZWhhdmlvciBvZiBgZmluZGBcbiAgcmV0dXJuIGFyci5maWx0ZXIoY2hlY2spWzBdO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIG1hdGNoaW5nIG9iamVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBcnJheX0gYXJyXG4gKiBAYXJndW1lbnQgcHJvcFxuICogQGFyZ3VtZW50IHZhbHVlXG4gKiBAcmV0dXJucyBpbmRleCBvciAtMVxuICovXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBwcm9wLCB2YWx1ZSkge1xuICAvLyB1c2UgbmF0aXZlIGZpbmRJbmRleCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gYXJyLmZpbmRJbmRleChmdW5jdGlvbiAoY3VyKSB7XG4gICAgICByZXR1cm4gY3VyW3Byb3BdID09PSB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHVzZSBgZmluZGAgKyBgaW5kZXhPZmAgaWYgYGZpbmRJbmRleGAgaXNuJ3Qgc3VwcG9ydGVkXG4gIHZhciBtYXRjaCA9IGZpbmQoYXJyLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9ialtwcm9wXSA9PT0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gYXJyLmluZGV4T2YobWF0Y2gpO1xufVxuXG4vKipcbiAqIExvb3AgdHJvdWdoIHRoZSBsaXN0IG9mIG1vZGlmaWVycyBhbmQgcnVuIHRoZW0gaW4gb3JkZXIsXG4gKiBlYWNoIG9mIHRoZW0gd2lsbCB0aGVuIGVkaXQgdGhlIGRhdGEgb2JqZWN0LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmRzIC0gT3B0aW9uYWwgbW9kaWZpZXIgbmFtZSB1c2VkIGFzIHN0b3BwZXJcbiAqIEByZXR1cm5zIHtkYXRhT2JqZWN0fVxuICovXG5mdW5jdGlvbiBydW5Nb2RpZmllcnMobW9kaWZpZXJzLCBkYXRhLCBlbmRzKSB7XG4gIHZhciBtb2RpZmllcnNUb1J1biA9IGVuZHMgPT09IHVuZGVmaW5lZCA/IG1vZGlmaWVycyA6IG1vZGlmaWVycy5zbGljZSgwLCBmaW5kSW5kZXgobW9kaWZpZXJzLCAnbmFtZScsIGVuZHMpKTtcblxuICBtb2RpZmllcnNUb1J1bi5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmIChtb2RpZmllclsnZnVuY3Rpb24nXSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgIGNvbnNvbGUud2FybignYG1vZGlmaWVyLmZ1bmN0aW9uYCBpcyBkZXByZWNhdGVkLCB1c2UgYG1vZGlmaWVyLmZuYCEnKTtcbiAgICB9XG4gICAgdmFyIGZuID0gbW9kaWZpZXJbJ2Z1bmN0aW9uJ10gfHwgbW9kaWZpZXIuZm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgaWYgKG1vZGlmaWVyLmVuYWJsZWQgJiYgaXNGdW5jdGlvbihmbikpIHtcbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIHRvIG9mZnNldHMgdG8gbWFrZSB0aGVtIGEgY29tcGxldGUgY2xpZW50UmVjdCBvYmplY3RcbiAgICAgIC8vIHdlIGRvIHRoaXMgYmVmb3JlIGVhY2ggbW9kaWZpZXIgdG8gbWFrZSBzdXJlIHRoZSBwcmV2aW91cyBvbmUgZG9lc24ndFxuICAgICAgLy8gbWVzcyB3aXRoIHRoZXNlIHZhbHVlc1xuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnBvcHBlcik7XG4gICAgICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucmVmZXJlbmNlKTtcblxuICAgICAgZGF0YSA9IGZuKGRhdGEsIG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIsIGNvbXB1dGluZyB0aGUgbmV3IG9mZnNldHMgYW5kIGFwcGx5aW5nXG4gKiB0aGUgbmV3IHN0eWxlLjxiciAvPlxuICogUHJlZmVyIGBzY2hlZHVsZVVwZGF0ZWAgb3ZlciBgdXBkYXRlYCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgLy8gaWYgcG9wcGVyIGlzIGRlc3Ryb3llZCwgZG9uJ3QgcGVyZm9ybSBhbnkgZnVydGhlciB1cGRhdGVcbiAgaWYgKHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGF0YSA9IHtcbiAgICBpbnN0YW5jZTogdGhpcyxcbiAgICBzdHlsZXM6IHt9LFxuICAgIGFycm93U3R5bGVzOiB7fSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBmbGlwcGVkOiBmYWxzZSxcbiAgICBvZmZzZXRzOiB7fVxuICB9O1xuXG4gIC8vIGNvbXB1dGUgcmVmZXJlbmNlIGVsZW1lbnQgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyh0aGlzLnN0YXRlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgZGF0YS5wbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudCh0aGlzLm9wdGlvbnMucGxhY2VtZW50LCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCB0aGlzLnBvcHBlciwgdGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO1xuXG4gIC8vIHN0b3JlIHRoZSBjb21wdXRlZCBwbGFjZW1lbnQgaW5zaWRlIGBvcmlnaW5hbFBsYWNlbWVudGBcbiAgZGF0YS5vcmlnaW5hbFBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuXG4gIGRhdGEucG9zaXRpb25GaXhlZCA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkO1xuXG4gIC8vIGNvbXB1dGUgdGhlIHBvcHBlciBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRQb3BwZXJPZmZzZXRzKHRoaXMucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlci5wb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZSc7XG5cbiAgLy8gcnVuIHRoZSBtb2RpZmllcnNcbiAgZGF0YSA9IHJ1bk1vZGlmaWVycyh0aGlzLm1vZGlmaWVycywgZGF0YSk7XG5cbiAgLy8gdGhlIGZpcnN0IGB1cGRhdGVgIHdpbGwgY2FsbCBgb25DcmVhdGVgIGNhbGxiYWNrXG4gIC8vIHRoZSBvdGhlciBvbmVzIHdpbGwgY2FsbCBgb25VcGRhdGVgIGNhbGxiYWNrXG4gIGlmICghdGhpcy5zdGF0ZS5pc0NyZWF0ZWQpIHtcbiAgICB0aGlzLnN0YXRlLmlzQ3JlYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zLm9uQ3JlYXRlKGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZShkYXRhKTtcbiAgfVxufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGlzIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllckVuYWJsZWQobW9kaWZpZXJzLCBtb2RpZmllck5hbWUpIHtcbiAgcmV0dXJuIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgIGVuYWJsZWQgPSBfcmVmLmVuYWJsZWQ7XG4gICAgcmV0dXJuIGVuYWJsZWQgJiYgbmFtZSA9PT0gbW9kaWZpZXJOYW1lO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHByZWZpeGVkIHN1cHBvcnRlZCBwcm9wZXJ0eSBuYW1lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHkgKGNhbWVsQ2FzZSlcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHByZWZpeGVkIHByb3BlcnR5IChjYW1lbENhc2Ugb3IgUGFzY2FsQ2FzZSwgZGVwZW5kaW5nIG9uIHRoZSB2ZW5kb3IgcHJlZml4KVxuICovXG5mdW5jdGlvbiBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUocHJvcGVydHkpIHtcbiAgdmFyIHByZWZpeGVzID0gW2ZhbHNlLCAnbXMnLCAnV2Via2l0JywgJ01veicsICdPJ107XG4gIHZhciB1cHBlclByb3AgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJlZml4ID0gcHJlZml4ZXNbaV07XG4gICAgdmFyIHRvQ2hlY2sgPSBwcmVmaXggPyAnJyArIHByZWZpeCArIHVwcGVyUHJvcCA6IHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZVt0b0NoZWNrXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0b0NoZWNrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBEZXN0cm95cyB0aGUgcG9wcGVyLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkZXN0cm95KCkge1xuICB0aGlzLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcblxuICAvLyB0b3VjaCBET00gb25seSBpZiBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgaXMgZW5hYmxlZFxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQodGhpcy5tb2RpZmllcnMsICdhcHBseVN0eWxlJykpIHtcbiAgICB0aGlzLnBvcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50Jyk7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS50b3AgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUucmlnaHQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5ib3R0b20gPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS53aWxsQ2hhbmdlID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGVbZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKV0gPSAnJztcbiAgfVxuXG4gIHRoaXMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgLy8gcmVtb3ZlIHRoZSBwb3BwZXIgaWYgdXNlciBleHBsaWNpdHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgYG9uVXBkYXRlYCBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTnVtZXJpYyhuKSB7XG4gIHJldHVybiBuICE9PSAnJyAmJiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5cbi8qKlxuICogU2V0IHRoZSBzdHlsZSB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBzdHlsZSB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdW5pdCA9ICcnO1xuICAgIC8vIGFkZCB1bml0IGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljIGFuZCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PSAtMSAmJiBpc051bWVyaWMoc3R5bGVzW3Byb3BdKSkge1xuICAgICAgdW5pdCA9ICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGF0dHJpYnV0ZXMgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgYXR0cmlidXRlcyB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFBvcHBlci5qcyBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGVPbkxvYWQocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgc3RhdGUpIHtcbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIHZhciByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIHZhciBwbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChvcHRpb25zLnBsYWNlbWVudCwgcmVmZXJlbmNlT2Zmc2V0cywgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnLCBwbGFjZW1lbnQpO1xuXG4gIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2VcbiAgLy8gd2l0aG91dCB0aGUgcG9zaXRpb24gYXBwbGllZCB3ZSBjYW4ndCBndWFyYW50ZWUgY29ycmVjdCBjb21wdXRhdGlvbnNcbiAgc2V0U3R5bGVzKHBvcHBlciwgeyBwb3NpdGlvbjogb3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZScgfSk7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IHNob3VsZFJvdW5kIC0gSWYgdGhlIG9mZnNldHMgc2hvdWxkIGJlIHJvdW5kZWQgYXQgYWxsXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcG9wcGVyJ3MgcG9zaXRpb24gb2Zmc2V0cyByb3VuZGVkXG4gKlxuICogVGhlIHRhbGUgb2YgcGl4ZWwtcGVyZmVjdCBwb3NpdGlvbmluZy4gSXQncyBzdGlsbCBub3QgMTAwJSBwZXJmZWN0LCBidXQgYXNcbiAqIGdvb2QgYXMgaXQgY2FuIGJlIHdpdGhpbiByZWFzb24uXG4gKiBEaXNjdXNzaW9uIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL3B1bGwvNzE1XG4gKlxuICogTG93IERQSSBzY3JlZW5zIGNhdXNlIGEgcG9wcGVyIHRvIGJlIGJsdXJyeSBpZiBub3QgdXNpbmcgZnVsbCBwaXhlbHMgKFNhZmFyaVxuICogYXMgd2VsbCBvbiBIaWdoIERQSSBzY3JlZW5zKS5cbiAqXG4gKiBGaXJlZm94IHByZWZlcnMgbm8gcm91bmRpbmcgZm9yIHBvc2l0aW9uaW5nIGFuZCBkb2VzIG5vdCBoYXZlIGJsdXJyaW5lc3Mgb25cbiAqIGhpZ2ggRFBJIHNjcmVlbnMuXG4gKlxuICogT25seSBob3Jpem9udGFsIHBsYWNlbWVudCBhbmQgbGVmdC9yaWdodCB2YWx1ZXMgbmVlZCB0byBiZSBjb25zaWRlcmVkLlxuICovXG5mdW5jdGlvbiBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCBzaG91bGRSb3VuZCkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciByb3VuZCA9IE1hdGgucm91bmQsXG4gICAgICBmbG9vciA9IE1hdGguZmxvb3I7XG5cbiAgdmFyIG5vUm91bmQgPSBmdW5jdGlvbiBub1JvdW5kKHYpIHtcbiAgICByZXR1cm4gdjtcbiAgfTtcblxuICB2YXIgcmVmZXJlbmNlV2lkdGggPSByb3VuZChyZWZlcmVuY2Uud2lkdGgpO1xuICB2YXIgcG9wcGVyV2lkdGggPSByb3VuZChwb3BwZXIud2lkdGgpO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihkYXRhLnBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgaXNWYXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5pbmRleE9mKCctJykgIT09IC0xO1xuICB2YXIgc2FtZVdpZHRoUGFyaXR5ID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSBwb3BwZXJXaWR0aCAlIDI7XG4gIHZhciBib3RoT2RkV2lkdGggPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IDEgJiYgcG9wcGVyV2lkdGggJSAyID09PSAxO1xuXG4gIHZhciBob3Jpem9udGFsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IGlzVmVydGljYWwgfHwgaXNWYXJpYXRpb24gfHwgc2FtZVdpZHRoUGFyaXR5ID8gcm91bmQgOiBmbG9vcjtcbiAgdmFyIHZlcnRpY2FsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IHJvdW5kO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogaG9yaXpvbnRhbFRvSW50ZWdlcihib3RoT2RkV2lkdGggJiYgIWlzVmFyaWF0aW9uICYmIHNob3VsZFJvdW5kID8gcG9wcGVyLmxlZnQgLSAxIDogcG9wcGVyLmxlZnQpLFxuICAgIHRvcDogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIuYm90dG9tKSxcbiAgICByaWdodDogaG9yaXpvbnRhbFRvSW50ZWdlcihwb3BwZXIucmlnaHQpXG4gIH07XG59XG5cbnZhciBpc0ZpcmVmb3ggPSBpc0Jyb3dzZXIgJiYgL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnO1xuICB9KS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnKTtcbiAgfVxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uXG4gIH07XG5cbiAgdmFyIG9mZnNldHMgPSBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA8IDIgfHwgIWlzRmlyZWZveCk7XG5cbiAgdmFyIHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgc2lkZUIgPSB5ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAvLyBpZiBncHVBY2NlbGVyYXRpb24gaXMgc2V0IHRvIGB0cnVlYCBhbmQgdHJhbnNmb3JtIGlzIHN1cHBvcnRlZCxcbiAgLy8gIHdlIHVzZSBgdHJhbnNsYXRlM2RgIHRvIGFwcGx5IHRoZSBwb3NpdGlvbiB0byB0aGUgcG9wcGVyIHdlXG4gIC8vIGF1dG9tYXRpY2FsbHkgdXNlIHRoZSBzdXBwb3J0ZWQgcHJlZml4ZWQgdmVyc2lvbiBpZiBuZWVkZWRcbiAgdmFyIHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIHZhciBsZWZ0ID0gdm9pZCAwLFxuICAgICAgdG9wID0gdm9pZCAwO1xuICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7XG4gICAgLy8gd2hlbiBvZmZzZXRQYXJlbnQgaXMgPGh0bWw+IHRoZSBwb3NpdGlvbmluZyBpcyByZWxhdGl2ZSB0byB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gKGV4Y2x1ZGluZyB0aGUgc2Nyb2xsYmFyKVxuICAgIC8vIGFuZCBub3QgdGhlIGJvdHRvbSBvZiB0aGUgaHRtbCBlbGVtZW50XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0cy50b3A7XG4gIH1cbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudC5jbGllbnRXaWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50UmVjdC53aWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7XG4gIH0pO1xuXG4gIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyO1xuICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcbiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJztcbiAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XG5cbiAgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29ya1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXJcbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXG4gICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlXG4gICAgaWYgKCFkYXRhLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnO1xuICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVuY3Rpb25cbiAgLy9cblxuICAvLyB0b3AvbGVmdCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUgPCBwb3BwZXJbc2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09IHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpO1xuICB9XG4gIC8vIGJvdHRvbS9yaWdodCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdICs9IHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcbiAgfVxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIHZhciBjZW50ZXIgPSByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbGVuXSAvIDIgLSBhcnJvd0VsZW1lbnRTaXplIC8gMjtcblxuICAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHNcbiAgLy8gdGFrZSBwb3BwZXIgbWFyZ2luIGluIGFjY291bnQgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHRoaXMgaW5mbyBhdmFpbGFibGVcbiAgdmFyIGNzcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbJ21hcmdpbicgKyBzaWRlQ2FwaXRhbGl6ZWRdLCAxMCk7XG4gIHZhciBwb3BwZXJCb3JkZXJTaWRlID0gcGFyc2VGbG9hdChjc3NbJ2JvcmRlcicgKyBzaWRlQ2FwaXRhbGl6ZWQgKyAnV2lkdGgnXSwgMTApO1xuICB2YXIgc2lkZVZhbHVlID0gY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xuICBpZiAodmFyaWF0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiAnc3RhcnQnO1xuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAnZW5kJztcbiAgfVxuICByZXR1cm4gdmFyaWF0aW9uO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgYWNjZXB0ZWQgcGxhY2VtZW50cyB0byB1c2UgYXMgdmFsdWVzIG9mIHRoZSBgcGxhY2VtZW50YCBvcHRpb24uPGJyIC8+XG4gKiBWYWxpZCBwbGFjZW1lbnRzIGFyZTpcbiAqIC0gYGF1dG9gXG4gKiAtIGB0b3BgXG4gKiAtIGByaWdodGBcbiAqIC0gYGJvdHRvbWBcbiAqIC0gYGxlZnRgXG4gKlxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XG4gKiAtIGAtc3RhcnRgXG4gKiAtIGAtZW5kYFxuICpcbiAqIFZhcmlhdGlvbnMgYXJlIGludGVycHJldGVkIGVhc2lseSBpZiB5b3UgdGhpbmsgb2YgdGhlbSBhcyB0aGUgbGVmdCB0byByaWdodFxuICogd3JpdHRlbiBsYW5ndWFnZXMuIEhvcml6b250YWxseSAoYHRvcGAgYW5kIGBib3R0b21gKSwgYHN0YXJ0YCBpcyBsZWZ0IGFuZCBgZW5kYFxuICogaXMgcmlnaHQuPGJyIC8+XG4gKiBWZXJ0aWNhbGx5IChgbGVmdGAgYW5kIGByaWdodGApLCBgc3RhcnRgIGlzIHRvcCBhbmQgYGVuZGAgaXMgYm90dG9tLlxuICpcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxuICogLSBgdG9wLWVuZGAgKG9uIHRvcCBvZiByZWZlcmVuY2UsIHJpZ2h0IGFsaWduZWQpXG4gKiAtIGByaWdodC1zdGFydGAgKG9uIHJpZ2h0IG9mIHJlZmVyZW5jZSwgdG9wIGFsaWduZWQpXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxuICogLSBgYXV0by1lbmRgIChvbiB0aGUgc2lkZSB3aXRoIG1vcmUgc3BhY2UgYXZhaWxhYmxlLCBhbGlnbm1lbnQgZGVwZW5kcyBieSBwbGFjZW1lbnQpXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge0FycmF5fVxuICogQGVudW0ge1N0cmluZ31cbiAqIEByZWFkb25seVxuICogQG1ldGhvZCBwbGFjZW1lbnRzXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBwbGFjZW1lbnRzID0gWydhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYXV0by1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCcsICd0b3AtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3JpZ2h0LWVuZCcsICdib3R0b20tZW5kJywgJ2JvdHRvbScsICdib3R0b20tc3RhcnQnLCAnbGVmdC1lbmQnLCAnbGVmdCcsICdsZWZ0LXN0YXJ0J107XG5cbi8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYFxudmFyIHZhbGlkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuc2xpY2UoMyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHNcbiAqIGNsb2Nrd2lzZSAob3IgY291bnRlci1jbG9ja3dpc2UpLlxuICpcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxuICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlXG4gKiBAcmV0dXJucyB7QXJyYXl9IHBsYWNlbWVudHMgaW5jbHVkaW5nIHRoZWlyIHZhcmlhdGlvbnNcbiAqL1xuZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCkge1xuICB2YXIgY291bnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTtcbiAgdmFyIGFyciA9IHZhbGlkUGxhY2VtZW50cy5zbGljZShpbmRleCArIDEpLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTtcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xufVxuXG52YXIgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJ1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykge1xuICAvLyBpZiBgaW5uZXJgIG1vZGlmaWVyIGlzIGVuYWJsZWQsIHdlIGNhbid0IHVzZSB0aGUgYGZsaXBgIG1vZGlmaWVyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2lubmVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGlmIChkYXRhLmZsaXBwZWQgJiYgZGF0YS5wbGFjZW1lbnQgPT09IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQpIHtcbiAgICAvLyBzZWVtcyBsaWtlIGZsaXAgaXMgdHJ5aW5nIHRvIGxvb3AsIHByb2JhYmx5IHRoZXJlJ3Mgbm90IGVub3VnaCBzcGFjZSBvbiBhbnkgb2YgdGhlIGZsaXBwYWJsZSBzaWRlc1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJztcblxuICB2YXIgZmxpcE9yZGVyID0gW107XG5cbiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7XG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcbiAgICAgIGZsaXBPcmRlciA9IFtwbGFjZW1lbnQsIHBsYWNlbWVudE9wcG9zaXRlXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZsaXBPcmRlciA9IG9wdGlvbnMuYmVoYXZpb3I7XG4gIH1cblxuICBmbGlwT3JkZXIuZm9yRWFjaChmdW5jdGlvbiAoc3RlcCwgaW5kZXgpIHtcbiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgICBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG4gICAgdmFyIHJlZk9mZnNldHMgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuXG4gICAgLy8gdXNpbmcgZmxvb3IgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgbWF5IGNvbnRhaW4gZGVjaW1hbHMgd2UgYXJlIG5vdCBnb2luZyB0byBjb25zaWRlciBoZXJlXG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICB2YXIgb3ZlcmxhcHNSZWYgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKHJlZk9mZnNldHMubGVmdCkgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihyZWZPZmZzZXRzLnJpZ2h0KSB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKHJlZk9mZnNldHMudG9wKSB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKHJlZk9mZnNldHMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NMZWZ0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKGJvdW5kYXJpZXMubGVmdCk7XG4gICAgdmFyIG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTtcbiAgICB2YXIgb3ZlcmZsb3dzVG9wID0gZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IoYm91bmRhcmllcy50b3ApO1xuICAgIHZhciBvdmVyZmxvd3NCb3R0b20gPSBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihib3VuZGFyaWVzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzQm91bmRhcmllcyA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tO1xuXG4gICAgLy8gZmxpcCB0aGUgdmFyaWF0aW9uIGlmIHJlcXVpcmVkXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb25CeVJlZiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcG9wcGVyIGNvbnRlbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXNcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9uc0J5Q29udGVudCAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0xlZnQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0JvdHRvbSB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1RvcCk7XG5cbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9IGZsaXBwZWRWYXJpYXRpb25CeVJlZiB8fCBmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50O1xuXG4gICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXG4gICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlO1xuXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xuICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgICAgdmFyaWF0aW9uID0gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xuXG4gICAgICAvLyB0aGlzIG9iamVjdCBjb250YWlucyBgcG9zaXRpb25gLCB3ZSB3YW50IHRvIHByZXNlcnZlIGl0IGFsb25nIHdpdGhcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHByb3BlcnR5IHdlIG1heSBhZGQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMucG9wcGVyLCBnZXRQb3BwZXJPZmZzZXRzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCkpO1xuXG4gICAgICBkYXRhID0gcnVuTW9kaWZpZXJzKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBkYXRhLCAnZmxpcCcpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pIC0gcG9wcGVyW21lYXN1cmVtZW50XTtcbiAgfVxuICBpZiAocG9wcGVyW29wU2lkZV0gPiBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsdWUgKyB1bml0IGludG8gYSBweCB2YWx1ZSBudW1iZXJcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nXG4gKiBAYXJndW1lbnQge1N0cmluZ30gbWVhc3VyZW1lbnQgLSBgaGVpZ2h0YCBvciBgd2lkdGhgXG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEByZXR1cm5zIHtOdW1iZXJ8U3RyaW5nfVxuICogVmFsdWUgaW4gcGl4ZWxzLCBvciBvcmlnaW5hbCBzdHJpbmcgaWYgbm8gdmFsdWVzIHdlcmUgZXh0cmFjdGVkXG4gKi9cbmZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgdmFyIHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKTtcbiAgdmFyIHZhbHVlID0gK3NwbGl0WzFdO1xuICB2YXIgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICB2YXIgZWxlbWVudCA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7XG4gICAgcmV0dXJuIHJlY3RbbWVhc3VyZW1lbnRdIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3ZoJyB8fCB1bml0ID09PSAndncnKSB7XG4gICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydFxuICAgIHZhciBzaXplID0gdm9pZCAwO1xuICAgIGlmICh1bml0ID09PSAndmgnKSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZVxuICAgIC8vIGlmIGlzIGFuIGltcGxpY2l0IHVuaXQsIGl0J3MgcHgsIGFuZCB3ZSByZXR1cm4ganVzdCB0aGUgdmFsdWVcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBgb2Zmc2V0YCBzdHJpbmcgdG8gZXh0cmFwb2xhdGUgYHhgIGFuZCBgeWAgbnVtZXJpYyBvZmZzZXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IG9mZnNldFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gYmFzZVBsYWNlbWVudFxuICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cywgYmFzZVBsYWNlbWVudCkge1xuICB2YXIgb2Zmc2V0cyA9IFswLCAwXTtcblxuICAvLyBVc2UgaGVpZ2h0IGlmIHBsYWNlbWVudCBpcyBsZWZ0IG9yIHJpZ2h0IGFuZCBpbmRleCBpcyAwIG90aGVyd2lzZSB1c2Ugd2lkdGhcbiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZVxuICAvLyB3aWxsIHVzZSB0aGUgb3RoZXIgb25lXG4gIHZhciB1c2VIZWlnaHQgPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHNcbiAgLy8gVGhlIHJlZ2V4IGFkZHJlc3NlcyB2YWx1ZXMgd2l0aCB0aGUgcGx1cyBvciBtaW51cyBzaWduIGluIGZyb250ICgrMTAsIC0yMCwgZXRjKVxuICB2YXIgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy50cmltKCk7XG4gIH0pO1xuXG4gIC8vIERldGVjdCBpZiB0aGUgb2Zmc2V0IHN0cmluZyBjb250YWlucyBhIHBhaXIgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIG9uZVxuICAvLyB0aGV5IGNvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYSBvciBzcGFjZVxuICB2YXIgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKGZpbmQoZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTE7XG4gIH0pKTtcblxuICBpZiAoZnJhZ21lbnRzW2RpdmlkZXJdICYmIGZyYWdtZW50c1tkaXZpZGVyXS5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgY29uc29sZS53YXJuKCdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJyk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICB2YXIgc3BsaXRSZWdleCA9IC9cXHMqLFxccyp8XFxzKy87XG4gIHZhciBvcHMgPSBkaXZpZGVyICE9PSAtMSA/IFtmcmFnbWVudHMuc2xpY2UoMCwgZGl2aWRlcikuY29uY2F0KFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMF1dKSwgW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVsxXV0uY29uY2F0KGZyYWdtZW50cy5zbGljZShkaXZpZGVyICsgMSkpXSA6IFtmcmFnbWVudHNdO1xuXG4gIC8vIENvbnZlcnQgdGhlIHZhbHVlcyB3aXRoIHVuaXRzIHRvIGFic29sdXRlIHBpeGVscyB0byBhbGxvdyBvdXIgY29tcHV0YXRpb25zXG4gIG9wcyA9IG9wcy5tYXAoZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXJcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSAoaW5kZXggPT09IDEgPyAhdXNlSGVpZ2h0IDogdXNlSGVpZ2h0KSA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gb3BcbiAgICAvLyBUaGlzIGFnZ3JlZ2F0ZXMgYW55IGArYCBvciBgLWAgc2lnbiB0aGF0IGFyZW4ndCBjb25zaWRlcmVkIG9wZXJhdG9yc1xuICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV1cbiAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZiAoYVthLmxlbmd0aCAtIDFdID09PSAnJyAmJiBbJysnLCAnLSddLmluZGV4T2YoYikgIT09IC0xKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgIH1cbiAgICB9LCBbXSlcbiAgICAvLyBIZXJlIHdlIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZXMgaW50byBudW1iZXIgdmFsdWVzIChpbiBweClcbiAgICAubWFwKGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHJldHVybiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBMb29wIHRyb3VnaCB0aGUgb2Zmc2V0cyBhcnJheXMgYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbnNcbiAgb3BzLmZvckVhY2goZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4Mikge1xuICAgICAgaWYgKGlzTnVtZXJpYyhmcmFnKSkge1xuICAgICAgICBvZmZzZXRzW2luZGV4XSArPSBmcmFnICogKG9wW2luZGV4MiAtIDFdID09PSAnLScgPyAtMSA6IDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQGFyZ3VtZW50IHtOdW1iZXJ8U3RyaW5nfSBvcHRpb25zLm9mZnNldD0wXG4gKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHtcbiAgdmFyIG9mZnNldCA9IF9yZWYub2Zmc2V0O1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQsXG4gICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIHZhciBvZmZzZXRzID0gdm9pZCAwO1xuICBpZiAoaXNOdW1lcmljKCtvZmZzZXQpKSB7XG4gICAgb2Zmc2V0cyA9IFsrb2Zmc2V0LCAwXTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRzID0gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYmFzZVBsYWNlbWVudCk7XG4gIH1cblxuICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTtcbiAgfVxuXG4gIGRhdGEucG9wcGVyID0gcG9wcGVyO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuXG4gIC8vIElmIG9mZnNldFBhcmVudCBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIHJlYWxseSB3YW50IHRvXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xuICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuXG4gIGlmIChkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSA9PT0gYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XG4gIH1cblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzZXRzIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBkb2N1bWVudCBzaXplIGNhbiBiZSBjYWxjdWxhdGVkIGV4Y2x1ZGluZ1xuICAvLyB0aGUgc2l6ZSBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgaXRzZWxmXG4gIHZhciB0cmFuc2Zvcm1Qcm9wID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcbiAgdmFyIHBvcHBlclN0eWxlcyA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnN0eWxlOyAvLyBhc3NpZ25tZW50IHRvIGhlbHAgbWluaWZpY2F0aW9uXG4gIHZhciB0b3AgPSBwb3BwZXJTdHlsZXMudG9wLFxuICAgICAgbGVmdCA9IHBvcHBlclN0eWxlcy5sZWZ0LFxuICAgICAgdHJhbnNmb3JtID0gcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdO1xuXG4gIHBvcHBlclN0eWxlcy50b3AgPSAnJztcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSAnJztcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gJyc7XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzdG9yZXMgdGhlIG9yaWdpbmFsIHN0eWxlIHByb3BlcnRpZXMgYWZ0ZXIgdGhlIG9mZnNldHMgaGF2ZSBiZWVuIGNvbXB1dGVkXG4gIHBvcHBlclN0eWxlcy50b3AgPSB0b3A7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gbGVmdDtcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtO1xuXG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XG5cbiAgdmFyIG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgdmFyIGNoZWNrID0ge1xuICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JztcbiAgICBwb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGVja1tzaWRlXShwbGFjZW1lbnQpKTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyO1xuXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHtcbiAgICAgIHN0YXJ0OiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdKSxcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKVxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciByZWZSZWN0ID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdwcmV2ZW50T3ZlcmZsb3cnO1xuICB9KS5ib3VuZGFyaWVzO1xuXG4gIGlmIChyZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fCByZWZSZWN0LmxlZnQgPiBib3VuZC5yaWdodCB8fCByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fCByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdCkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBpbm5lcihkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xuXG4gIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID0gcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC0gKHN1YnRyYWN0TGVuZ3RoID8gcG9wcGVyW2lzSG9yaXogPyAnd2lkdGgnIDogJ2hlaWdodCddIDogMCk7XG5cbiAgZGF0YS5wbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChwb3BwZXIpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cbiAqIFRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZSwgdGhpcyBtZWFucyB0aGF0IHlvdSBtdXN0XG4gKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuXG4gKlxuICogQGZ1bmN0aW9uIE1vZGlmaWVyRm5cbiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5cbi8qKlxuICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz5cbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcbiAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS5cbiAqXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cbiAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLlxuICogQG5hbWVzcGFjZSBtb2RpZmllcnNcbiAqL1xudmFyIG1vZGlmaWVycyA9IHtcbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gc2hpZnQgdGhlIHBvcHBlciBvbiB0aGUgc3RhcnQgb3IgZW5kIG9mIGl0cyByZWZlcmVuY2VcbiAgICogZWxlbWVudC48YnIgLz5cbiAgICogSXQgd2lsbCByZWFkIHRoZSB2YXJpYXRpb24gb2YgdGhlIGBwbGFjZW1lbnRgIHByb3BlcnR5LjxiciAvPlxuICAgKiBJdCBjYW4gYmUgb25lIGVpdGhlciBgLWVuZGAgb3IgYC1zdGFydGAuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBzaGlmdDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0xMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDEwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHNoaWZ0XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy5cbiAgICpcbiAgICogSXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHVuaXRzOlxuICAgKiAtIGBweGAgb3IgdW5pdC1sZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBgaGVpZ2h0YC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcbiAgICogYXMgYFN0cmluZ2AgZGl2aWRlZCBieSBhIGNvbW1hIG9yIG9uZSAob3IgbW9yZSkgd2hpdGUgc3BhY2VzLjxiciAvPlxuICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmVcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cbiAgICogQWRkaXRpb25hbGx5LCBpdCBhY2NlcHRzIGFkZGl0aW9ucyBhbmQgc3VidHJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzLlxuICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC5cbiAgICpcbiAgICogVmFsaWQgZXhhbXBsZXMgYXJlOlxuICAgKiBgYGBcbiAgICogMTBcbiAgICogJzEwJSdcbiAgICogJzEwLCAxMCdcbiAgICogJzEwJSwgMTAnXG4gICAqICcxMCArIDEwJSdcbiAgICogJzEwIC0gNXZoICsgMyUnXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXG4gICAqIGBgYFxuICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcFxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxuICAgKiA+IFlvdSBjYW4gcmVhZCBtb3JlIG9uIHRoaXMgYXQgdGhpcyBbaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgb2Zmc2V0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTIwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogb2Zmc2V0LFxuICAgIC8qKiBAcHJvcCB7TnVtYmVyfFN0cmluZ30gb2Zmc2V0PTBcbiAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBvZmZzZXQ6IDBcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBwcmV2ZW50IHRoZSBwb3BwZXIgZnJvbSBiZWluZyBwb3NpdGlvbmVkIG91dHNpZGUgdGhlIGJvdW5kYXJ5LlxuICAgKlxuICAgKiBBIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIuIFRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGFsd2F5cyBoYXMgYSBsaXR0bGUgcGFkZGluZ1xuICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXJcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXG4gICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllci4gQ2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCxcbiAgICAgKiBgdmlld3BvcnRgIG9yIGFueSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHJlZmVyZW5jZSBhbmQgaXRzIHBvcHBlciBzdGF5IG5lYXIgZWFjaCBvdGhlclxuICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEVzcGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzXG4gICAqIGVuYWJsZWQgYW5kIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGl0IHBvaW50cyB0byBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEl0IGNhcmVzIG9ubHkgYWJvdXQgdGhlIGZpcnN0IGF4aXMuIFlvdSBjYW4gc3RpbGwgaGF2ZSBwb3BwZXJzIHdpdGggbWFyZ2luXG4gICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAga2VlcFRvZ2V0aGVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTQwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNDAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjoga2VlcFRvZ2V0aGVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2VcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgb3V0ZXIgc2l6ZSBvZiB0aGUgYGFycm93RWxlbWVudGAgbm9kZSB0byBkZXRlY3QgaG93IG1hbnlcbiAgICogcGl4ZWxzIG9mIGNvbmp1bmN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XSdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBmbGlwIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQgd2hlbiBpdCBzdGFydHMgdG8gb3ZlcmxhcCBpdHNcbiAgICogcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICpcbiAgICogKipOT1RFOioqIHRoaXMgbW9kaWZpZXIgd2lsbCBpbnRlcnJ1cHQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlIGFuZCB3aWxsXG4gICAqIHJlc3RhcnQgaXQgaWYgaXQgZGV0ZWN0cyB0aGUgbmVlZCB0byBmbGlwIHRoZSBwbGFjZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBmbGlwOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTYwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogZmxpcCxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEFycmF5fSBiZWhhdmlvcj0nZmxpcCdcbiAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZlxuICAgICAqIGBmbGlwYCwgYGNsb2Nrd2lzZWAsIGBjb3VudGVyY2xvY2t3aXNlYCBvciBhbiBhcnJheSB3aXRoIGEgbGlzdCBvZiB2YWxpZFxuICAgICAqIHBsYWNlbWVudHMgKHdpdGggb3B0aW9uYWwgdmFyaWF0aW9ucylcbiAgICAgKi9cbiAgICBiZWhhdmlvcjogJ2ZsaXAnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0ndmlld3BvcnQnXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbi5cbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllc1xuICAgICAqIChleGNlcHQgaWYgYGtlZXBUb2dldGhlcmAgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0JyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZmxpcFZhcmlhdGlvbnM9ZmFsc2VcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgc3dpdGNoIHBsYWNlbWVudCB2YXJpYXRpb24gYmV0d2VlbiBgLXN0YXJ0YCBhbmQgYC1lbmRgIHdoZW5cbiAgICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmxhcHMgaXRzIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uczogZmFsc2UsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zQnlDb250ZW50PWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHBvcHBlciBlbGVtZW50IG92ZXJsYXBzIGl0cyByZWZlcmVuY2UgYm91bmRhcmllcy5cbiAgICAgKlxuICAgICAqIFRoZSBvcmlnaW5hbCBwbGFjZW1lbnQgc2hvdWxkIGhhdmUgYSBzZXQgdmFyaWF0aW9uLlxuICAgICAqL1xuICAgIGZsaXBWYXJpYXRpb25zQnlDb250ZW50OiBmYWxzZVxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2JvdHRvbSddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgYm90dG9tYFxuICAgICAqL1xuICAgIHg6ICdib3R0b20nLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdsZWZ0J11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGByaWdodGBcbiAgICAgKi9cbiAgICB5OiAncmlnaHQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGNvbXB1dGVkIHN0eWxlcyB0byB0aGUgcG9wcGVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgYXJlIGxpbWl0ZWQgdG8gdGhpcyBtb2RpZmllci4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZVxuICAgKiB5b3Ugd2FudCB0byBpbnRlZ3JhdGUgUG9wcGVyLmpzIGluc2lkZSBhIGZyYW1ld29yayBvciB2aWV3IGxpYnJhcnkgYW5kIHlvdVxuICAgKiB3YW50IHRvIGRlbGVnYXRlIGFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgdG8gaXQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3UgZGlzYWJsZSB0aGlzIG1vZGlmaWVyLCB5b3UgbXVzdCBtYWtlIHN1cmUgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIGhhcyBpdHMgcG9zaXRpb24gc2V0IHRvIGBhYnNvbHV0ZWAgYmVmb3JlIFBvcHBlci5qcyBjYW4gZG8gaXRzIHdvcmshXG4gICAqXG4gICAqIEp1c3QgZGlzYWJsZSB0aGlzIG1vZGlmaWVyIGFuZCBkZWZpbmUgeW91ciBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWRcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb24gdXNlZCBieSBQb3BwZXIuanMuXG4gKiBUaGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXG4gKiBAbmFtZSBkYXRhT2JqZWN0XG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCBQbGFjZW1lbnQgb3JpZ2luYWxseSBkZWZpbmVkIG9uIGluaXRcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50c1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5wb3BwZXIgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDBcbiAqL1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+XG4gKiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWVcbiAqIHN0cnVjdHVyZSBvZiB0aGUgYG9wdGlvbnNgIG9iamVjdCwgYXMgdGhlIDNyZCBhcmd1bWVudC4gRm9yIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50LlxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcblxuICAvKipcbiAgICogU2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3Ugd2FudCBwb3BwZXIgdG8gcG9zaXRpb24gaXQgc2VsZiBpbiAnZml4ZWQnIG1vZGVcbiAgICogQHByb3Age0Jvb2xlYW59IHBvc2l0aW9uRml4ZWQ9ZmFsc2VcbiAgICovXG4gIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZW50cyAocmVzaXplLCBzY3JvbGwpIGFyZSBpbml0aWFsbHkgZW5hYmxlZC5cbiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZVxuICAgKi9cbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSByZW1vdmUgdGhlIHBvcHBlciB3aGVuXG4gICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcmVtb3ZlT25EZXN0cm95PWZhbHNlXG4gICAqL1xuICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uQ3JlYXRlfVxuICAgKi9cbiAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZC4gVGhpcyBjYWxsYmFjayBpcyBub3QgY2FsbGVkXG4gICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50XG4gICAqIHVwZGF0ZXMuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uVXBkYXRlfVxuICAgKi9cbiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuXG4gICAqIFRoZXkgcHJvdmlkZSBtb3N0IG9mIHRoZSBmdW5jdGlvbmFsaXRpZXMgb2YgUG9wcGVyLmpzLlxuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZS5cbiAgICogQGNsYXNzIFBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgLyBYTUwgZWxlbWVudCB1c2VkIGFzIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBhbiB1cGRhdGUuIEl0IHdpbGwgcnVuIG9uIHRoZSBuZXh0IFVJIHVwZGF0ZSBhdmFpbGFibGUuXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZVVwZGF0ZVxuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLlxuICAgICAqIFN0YXJ0aW5nIGZyb20gdmVyc2lvbiAxLjcsIHRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHlvdVxuICAgICAqIGluY2x1ZGUgYHBvcHBlci11dGlscy5qc2AgYmVmb3JlIGBwb3BwZXIuanNgLlxuICAgICAqXG4gICAgICogKipERVBSRUNBVElPTioqOiBUaGlzIHdheSB0byBhY2Nlc3MgUG9wcGVyVXRpbHMgaXMgZGVwcmVjYXRlZFxuICAgICAqIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjIhIFVzZSB0aGUgUG9wcGVyVXRpbHMgbW9kdWxlIGRpcmVjdGx5IGluc3RlYWQuXG4gICAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3RcbiAgICAgKiBndWFyYW50ZWUgdGhlbSB0byBmb2xsb3cgc2VtdmVyLiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrIVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjhcbiAgICAgKiBAbWVtYmVyIFV0aWxzXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG4gIH1dKTtcbiAgcmV0dXJuIFBvcHBlcjtcbn0oKTtcblxuLyoqXG4gKiBUaGUgYHJlZmVyZW5jZU9iamVjdGAgaXMgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGNvbXBhdGlibGUgd2l0aCBQb3BwZXIuanNcbiAqIGFuZCBsZXRzIHlvdSB1c2UgaXQgYXMgcmVwbGFjZW1lbnQgb2YgYSByZWFsIERPTSBub2RlLjxiciAvPlxuICogWW91IGNhbiB1c2UgdGhpcyBtZXRob2QgdG8gcG9zaXRpb24gYSBwb3BwZXIgcmVsYXRpdmVseSB0byBhIHNldCBvZiBjb29yZGluYXRlc1xuICogaW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIERPTSBub2RlIHRvIHVzZSBhcyByZWZlcmVuY2UuXG4gKlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZmVyZW5jZU9iamVjdCwgcG9wcGVyTm9kZSk7XG4gKiBgYGBcbiAqXG4gKiBOQjogVGhpcyBmZWF0dXJlIGlzbid0IHN1cHBvcnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMC5cbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuXG5cblBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5Qb3BwZXIucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwiLyogZ2xvYmFsIHByb2Nlc3MgKi9cbi8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwidmFyc0lnbm9yZVBhdHRlcm5cIjogXCJTdHJpbmdIZWxwZXJzfEZhZGVJblRleHRcIiB9XSovIC8vYWxsb3cgU3RyaW5nSGVscGVycyB0byBiZSBpcG9ydGVkIChkZWZpbmVkKSBhbmQgbm90IGJlaW5nIGV4cGxpY2l0bHkgY2FsbGVkXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIHdpdGhvdXQgdHJpZ2dlcmluZyBlc2xpbnQgZXJyb3JcbmltcG9ydCB7IFN0cmluZ0hlbHBlcnMsIEZhZGVJblRleHQgfSBmcm9tICdAVXRpbHMnOyAvLyBzdHJpbmcgaGVscGVycyBpcyBhbiBJSUZFXG5pbXBvcnQgQUJYQXBwIGZyb20gJy4vYWJ4LmpzJztcbmltcG9ydCAnLi9jc3Mvc3R5bGVzLnNjc3MnO1xuXG5cbmNvbnN0IGNvbnRhaW5lciA9ICcjcGV3LWFwcCc7XG5jb25zdCBBcHAgPSBuZXcgQUJYQXBwKGNvbnRhaW5lciwgeyAvLyBTdGF0ZURlYnQgZXh0ZW5kcyBQQ1RBcHAtanMuIFBDVEFwcC1qcydzIGNvbnN0cnVjdG9yIG1ldGhvZCBpcyBjYWxsZWQsIHAxIGNvbnRhaXVuZXIsIHAyIG9wdGlvbnNcblx0bmVlZHNSb3V0ZXI6IGZhbHNlXG59KTtcbmlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgd2luZG93LklTX1BSRVJFTkRFUklORyApeyAvLyBwcm9jZXNzIGRldmVsb3BtZW50IG1lYW5zIHVzaW5nIFdlYlBhY2sgZGV2IHNlcnZlci4gd2luZG93IGlzIHByZXJlbmRlcmluZyBtZWFucyBpblxuXHRBcHAucHJlcmVuZGVyKCk7XG59XG5BcHAuaW5pdCgpOyIsIi8qIGdsb2JhbCBQVUJMSUNQQVRIIHByb2Nlc3MgKi9cbi8vdXRpbHNcbi8vaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMtY29sbGVjdGlvbic7XG5pbXBvcnQgUGFwYSBmcm9tICdwYXBhcGFyc2UnO1xuaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuLy9pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG5pbXBvcnQgeyBwdWJsaXNoV2luZG93UmVzaXplIH0gZnJvbSAnQFV0aWxzJztcblxuLy9kYXRhICggQ1NWcyBsb2FkZWQgYnkgZmlsZS1sb2FkZXIgZm9yIHVzZSBieSBQYXBhcGFyc2UgYXQgYnVpbGQgYW5kIHJ1bnRpbWUuIHRoYXQncyBzZXQgaW4gd2VicGFjay5jb21tb24uanMgKVxuaW1wb3J0IGRhdGEgZnJvbSAnLi9kYXRhL2FieC1kYXRhLmNzdic7XG5cbi8vdmlld3NcbmltcG9ydCBWaXpWaWV3IGZyb20gJy4vdmlld3Mvdml6LXZpZXcvJztcbi8vaW1wb3J0IEZpZnR5U3RhdGVWaWV3IGZyb20gJy4vdmlld3MvZmlmdHktc3RhdGUvJztcblxuLy8gYXBwIHByb3RvdHlwZVxuaW1wb3J0IFBDVEFwcCBmcm9tICdAQXBwJztcblxuLy9zdGF0aWMgY29udGVudFxuaW1wb3J0IHNlY3Rpb25zIGZyb20gJy4vcGFydGlhbHMvc2VjdGlvbnMuaHRtbCc7XG5pbXBvcnQgaW50cm8gZnJvbSAnLi9wYXJ0aWFscy9pbnRyby5tZCc7XG5pbXBvcnQgbm90ZXMgZnJvbSAnLi9wYXJ0aWFscy9ub3Rlcy5tZCc7XG5cblxucHVibGlzaFdpbmRvd1Jlc2l6ZShTKTsgLy8gaW5pdGlhbGl6ZSBwdWJsaXNoIHdpbmRvdyByZXNpemUgd2l0aCBTdGF0ZU1PZHVsZSBhcyBwYXJhbS9cblxuY29uc3QgbW9kZWwgPSB7XG4gICAgXG4gICAgLy8gYW55IHN0YXRpYyBkYXRhIHNob3VsZCBiZSBtYWRlIHByb3BlcnRpZXMgb2YgdGhlIG1vZGVsIG5vd1xuICAgIFxufTtcblxuY29uc3Qgdmlld3MgPSBbXTsgLy8gdmlld3MgZ2V0IHB1c2ggIG5seSBhZnRlciBtb2RlbCBpcyBmdWxseSByZWFkeSwgd2l0aCBhbnkgcnVudGltZSBkYXRhIGxvYWRlZFxuY29uc3Qgc3RhcnRZZWFyID0gMjAxNDtcblxuZnVuY3Rpb24gZ2V0UnVudGltZURhdGEoKXtcbiAgICB2YXIgcHVibGljUGF0aCA9ICcnO1xuICAgIGlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiAhd2luZG93LklTX1BSRVJFTkRFUklORyApeyAvLyBwcm9kdWN0aW9uIGJ1aWxkIG5lZWRzIHRvIGtub3cgdGhlIHB1YmxpYyBwYXRoIG9mIGFzc2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgZGV2IGFuZCBwcmV2aWV3LCBhc3NldHMgYXJlIGEgY2hpbGQgb2Ygcm9vdDsgZm9yIGJ1aWxkIHRoZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJlIGluIHNvbWUgZGlzdGFudCBwYXRoIG9uIHNpdGVjb3JlXG4gICAgICAgIHB1YmxpY1BhdGggPSBQVUJMSUNQQVRIOyAvLyBUT0RPOiBzZXQgUFVCTElDUEFUSCB1c2luZyBkZWZpbmUgcGx1Z2luIGluIHdlYnBhY2suYnVpbGQuanNcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdmFyIGFwcENvbnRhaW5lciA9IHRoaXMuZWw7XG4gICAgICAgIFBhcGEucGFyc2UocHVibGljUGF0aCArIGRhdGEsIHtcbiAgICAgICAgICAgIGRvd25sb2FkOiB0cnVlLFxuICAgICAgICAgICAgZHluYW1pY1R5cGluZzogdHJ1ZSxcbiAgICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICAgIGZhc3RNb2RlOiBmYWxzZSwgLy8gc3RyaW5nIGVzY2FwZXMgbmVlZGVkIHRvIHBhcnNlIHNyaW5naWZpZWQgYXJyYXlzIHdpdGggY29tbWFzXG4gICAgICAgICAgICBza2lwRW1wdHlMaW5lczogdHJ1ZSxcbiAgICAgICAgICAgIGJlZm9yZUZpcnN0Q2h1bmsoY2h1bmspeyAvLyBvbiBwcmVyZW5kZXIsIGRvIHNpbXBsZSBoYXNoIG9mIENTViBjb250ZW50cyBhbmQgYXBwZW5kIGFzIGF0dHJpYnV0ZSBvZiB0aGUgYXBwIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF0IHJ1bnRpbWUsIGRvIHNhbWUgaGFzaCBvZiBjc3YgY29udGVudHMgYW5kIGNvbXBhcmUgdG8gb3JpZ2luYWwuIGlmIGhhc2hlcyBtYXRjaCwgYXBwIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250aW51ZSBub3JtYWxseS4gaWYgbWlzbWF0Y2hlZCwgYXBwIHdpbGwgcmVyZW5kZXIgYWxsIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIG5ldyBkYXRhLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIGZvciBgaG90YCB1cGRhdGluZyBvZiB0aGUgbWFpbiBkYXRhIGZpbGUgd2l0aG91dCByZWJ1aWxkaW5nIHRoZSBkaXN0LyBmb2xkZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYG1vZGVsLmlzTWlzbWF0Y2hgIHdpbGwgYmUgc2V0IHRvIGB0cnVlYCBhbmQgdGhlIHByZXJlbmRlcmluZyBmdW5jdGlvbnMgd2lsbCBjaGVjayB0aGF0IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHJlc3BvbmQgYWNjb3JkaW5nbHlcblxuICAgICAgICAgICAgICAgIHZhciBkYXRhSGFzaCA9IGNodW5rLmhhc2hDb2RlKCk7IC8vIGhhc2hDb2RlIGlzIGhlbHBlciBmdW5jdGlvbiBmcm9tIHV0aWxzLCBpbXBvcnRlZCBhbmQgSUlGRSdkIGluIGluZGV4LmpzXG4gICAgICAgICAgICAgICAgaWYgKCB3aW5kb3cuSVNfUFJFUkVOREVSSU5HICl7XG4gICAgICAgICAgICAgICAgICAgIGFwcENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1oYXNoJywgZGF0YUhhc2gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnICYmIGRhdGFIYXNoLnRvU3RyaW5nKCkgIT09IGFwcENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1oYXNoJykgKXtcbiAgICAgICAgICAgICAgICAgICAgYXBwQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS1kYXRhLW1pc21hdGNoJyx0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhdGEgbWlzbWF0Y2gnKTtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuaXNNaXNtYXRjaGVkID0gdHJ1ZTsgLy8gc2V0IHNvIHRoYXQgY29tcG9uZW50cyBjYW4gYWNjZXNzIHRoaXMgdmFsdWUgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiByZXNwb25zZSA9PiB7IC8vIGFycm93IGZ1bmN0aW9uIGhlcmUgdG8ga2VlcCBgdGhpc2AgY29udGV4dCBhcyBTdGF0ZURlYnRcbiAgICAgICAgICAgICAgICB2aWV3cy5sZW5ndGggPSAwOyAgXG4gICAgICAgICAgICAgICAgbW9kZWwueWVhcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIG51bWJlciBvZiB5ZWFycyBpbiBkYXRhLiByZWxpZXMgb24gYWxsIHJvd3MgaGF2aW5nIHRoZSBzYW1lIG51bWJlclxuICAgICAgICAgICAgICAgIHZhciBsb29wV2hpbGUgPSB0cnVlLFxuICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcblxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhcnJheSBvZiB5ZWFycyBwcmVzZW50IGluIHRoZSBkYXRhLCBzdGFydGluZyB3aXRoIHN0YXJ0WWVhciBkZWZpbmVkIGFib3ZlXG4gICAgICAgICAgICAgICAgd2hpbGUgKCBsb29wV2hpbGUgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCByZXNwb25zZS5kYXRhWzBdLmhhc093blByb3BlcnR5KHN0YXJ0WWVhciArIGluZGV4KSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnllYXJzLnB1c2goc3RhcnRZZWFyICsgaW5kZXgpOyAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9vcFdoaWxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrK1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtb2RlbC51bm5lc3RlZERhdGEgPSByZXNwb25zZS5kYXRhLm1hcChkID0+IHsgLy8gdHVybiBlYWNoIHN0cmluZyB2YWx1ZSBsaWtlIFwiMS0xZFwiIGludG8gYW4gYXJyYXkgLCBbMSwxZF1cbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9ICdkcnVnLScgKyBkLmlkO1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC55ZWFycy5mb3JFYWNoKHllYXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZFt5ZWFyXSA9IFswLDFdLm1hcChvYnNlcnZhdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBwYXJzZUludChkW3llYXJdLnNwbGl0KCctJylbb2JzZXJ2YXRpb25dKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNjb250aW51ZWQ6ICggZFt5ZWFyXS5zcGxpdCgnLScpW29ic2VydmF0aW9uXS50b1N0cmluZygpLmluZGV4T2YoJ2QnKSAhPT0gLTEgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1vZGVsLmRhdGEgPSBtb2RlbC55ZWFycy5tYXAoeWVhciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb25zOiBbMCwxXS5tYXAob2JzZXJ2YXRpb24gPT4geyAvLyBlYWNoIHllYXIgaGFzIHR3byBvYnNlcnZhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzEsIDIsIDMsIDQsIDVdLm1hcChwaGFzZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhhc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IG1vZGVsLnVubmVzdGVkRGF0YS5maWx0ZXIoZCA9PiBkW3llYXJdW29ic2VydmF0aW9uXS5jb2x1bW4gPT09IHBoYXNlKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobW9kZWwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUxlbmd0aHMgPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNjb250aW51ZWRMZW5ndGhzID0gW107XG4gICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgbWF4aW11bSBudW1iZXIgb2Ygbm9uZGlzY29udGludWVkIGRydWdzIGluIG9uZSBjb2x1bW4gYXQgYW55IHRpbWUuIHNpZGUgZWZmZWN0IHB1c2hlcyBcbiAgICAgICAgICAgICAgICAvLyBudW1iZXIgb2YgZGlzY29udGludWVkIGRydWdzIHRvIGFycmF5IGZvciBtYXggdGJkIGxhdGVyXG4gICAgICAgICAgICAgICAgLy8gdGhlc2UgdmFsdWVzIHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hlbiBzdGFja2VkIGRydWdzIG5lZWQgdG8gYmUgY29sbGFwc2VkIGRvd25cbiAgICAgICAgICAgICAgICAvLyBmb3Igc21hbGxlciBzY3JlZW5zXG4gICAgICAgICAgICAgICAgbW9kZWwuZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkLm9ic2VydmF0aW9ucy5mb3JFYWNoKChvYnMsaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzLmZvckVhY2gocGhhc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUxlbmd0aHMucHVzaChwaGFzZS52YWx1ZXMuZmlsdGVyKGRydWcgPT4gZHJ1Z1tkLnllYXJdW2ldLmlzRGlzY29udGludWVkICE9PSB0cnVlKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvbnRpbnVlZExlbmd0aHMucHVzaChwaGFzZS52YWx1ZXMuZmlsdGVyKGRydWcgPT4gZHJ1Z1tkLnllYXJdW2ldLmlzRGlzY29udGludWVkID09PSB0cnVlKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1vZGVsLm1heEFjdGl2ZSA9IE1hdGgubWF4KC4uLmFjdGl2ZUxlbmd0aHMpO1xuICAgICAgICAgICAgICAgIG1vZGVsLm1heERpc2NvbnRpbnVlZCA9IE1hdGgubWF4KC4uLmRpc2NvbnRpbnVlZExlbmd0aHMpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1vZGVsKTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8qIHB1c2ggdmlld3Mgbm93IHRoYXQgbW9kZWwgaXMgY29tcGxldGUgKi9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2aWV3cy5wdXNoKFxuICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KG1vZGVsLCBWaXpWaWV3LCAnZGl2I3Zpei12aWV3Jywge3JlbmRlclRvU2VsZWN0b3I6ICcjYWJ4LXZpc3VhbGl6YXRpb24nLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXN9KVxuICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuY3JlYXRlQ29tcG9uZW50KG1vZGVsLCBGaWZ0eVN0YXRlVmlldywgJ2RpdiNmaWZ0eS1zdGF0ZS12aWV3Jywge3JlbmRlclRvU2VsZWN0b3I6ICcjc2VjdGlvbi1zdGF0ZXMgLmpzLWlubmVyLWNvbnRlbnQnLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXN9KSAgXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFCWEFwcCBleHRlbmRzIFBDVEFwcCB7XG4gICAgcHJlcmVuZGVyKCl7XG5cbiAgICAgICAgLy9pbmRzZXJ0IGFueSBzdGF0aWMgY29udGVudCBoZXJlXG4gICAgICAgIHRoaXMuZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBzZWN0aW9ucyk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbnRybycpLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGludHJvICk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhYngtbm90ZXMnKS5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBub3RlcyApO1xuICAgICAgICAvL3RoaXMud2FzUHJlcmVuZGVyZWQgPSBmYWxzZTtcbiAgICAgICAgZ2V0UnVudGltZURhdGEuY2FsbCh0aGlzKS50aGVuKCgpID0+IHsgLy8gYmluZCBTdGF0ZURlYnQgYXMgY29udGV4dCBgdGhpc2AgZm9yIGdldFJ1bnRpbWVEYXRhIHNvIHRoYXQgaXQgY2FuIGFjY2Vlc3MgdGhpcy5lbCwgZXRjXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codmlldyk7XG4gICAgICAgICAgLyogPyAqLyAgICAgIHZpZXcuY29udGFpbmVyLmFwcGVuZENoaWxkKHZpZXcuZWwpOyAvLyBkaWZmZXJlbnQgaGVyZSBmcm9tIENhcGVUb3duOiB2aWV3cyBhcmVuJ3QgYXBwZW5kZWQgdG8gYXBwIGNvbnRhaW5lcjsgc29tZSBzdGF0aWMgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyBwcmVzZW50IGFscmVhZHkuIHZpZXdzIGFwcGVuZGVkIHRvICp0aGVpciogY29udGFpbmVyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvL3RoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3JlbmRlcmVkJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIHN1cGVyLmluaXQoKTtcbiAgICAgICAvLyB0aGlzLmF0dGFjaFNlY3Rpb25PcGVuQ2xvc2UoKTtcbiAgICAgICAgZ2V0UnVudGltZURhdGEuY2FsbCh0aGlzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICAgICAgICAgICB2aWV3LmluaXQodGhpcyk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4vKiAgICAgICAgaWYgKCBtb2R1bGUuaG90ICl7XG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBtb2R1bGUuaG90LmFjY2VwdCgnLi92aWV3cy9zdGF0ZS1jb21wYXJpc29uJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhY2NlcHQhJywgYXJndW1lbnRzLCB0aGF0KTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VjdGlvbi1jb21wYXJpc29uIC5qcy1pbm5lci1jb250ZW50JykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gdGhhdC5jcmVhdGVDb21wb25lbnQobW9kZWwsIENvbXBhcmlzb25WaWV3LCAnZGl2I2NvbXBhcmlzb24tdmlldycsIHtyZW5kZXJUb1NlbGVjdG9yOiAnI3NlY3Rpb24tY29tcGFyaXNvbiAuanMtaW5uZXItY29udGVudCcsIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IHRydWV9KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQuY29udGFpbmVyLmFwcGVuZENoaWxkKHJlcGxhY2VtZW50LmVsKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gKi9cbiAgICB9XG59IiwiLyogQGxpY2Vuc2VcblBhcGEgUGFyc2VcbnY0LjYuM1xuaHR0cHM6Ly9naXRodWIuY29tL21ob2x0L1BhcGFQYXJzZVxuTGljZW5zZTogTUlUXG4qL1xuQXJyYXkuaXNBcnJheXx8KEFycmF5LmlzQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSksZnVuY3Rpb24oZSx0KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPXQoKTplLlBhcGE9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHMsZSxmPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09Zj9mOnt9LG49IWYuZG9jdW1lbnQmJiEhZi5wb3N0TWVzc2FnZSxvPW4mJi8oXFw/fCYpcGFwYXdvcmtlcig9fCZ8JCkvLnRlc3QoZi5sb2NhdGlvbi5zZWFyY2gpLGE9ITEsaD17fSx1PTAsaz17cGFyc2U6ZnVuY3Rpb24oZSx0KXt2YXIgcj0odD10fHx7fSkuZHluYW1pY1R5cGluZ3x8ITE7eihyKSYmKHQuZHluYW1pY1R5cGluZ0Z1bmN0aW9uPXIscj17fSk7aWYodC5keW5hbWljVHlwaW5nPXIsdC50cmFuc2Zvcm09ISF6KHQudHJhbnNmb3JtKSYmdC50cmFuc2Zvcm0sdC53b3JrZXImJmsuV09SS0VSU19TVVBQT1JURUQpe3ZhciBpPWZ1bmN0aW9uKCl7aWYoIWsuV09SS0VSU19TVVBQT1JURUQpcmV0dXJuITE7aWYoIWEmJm51bGw9PT1rLlNDUklQVF9QQVRIKXRocm93IG5ldyBFcnJvcihcIlNjcmlwdCBwYXRoIGNhbm5vdCBiZSBkZXRlcm1pbmVkIGF1dG9tYXRpY2FsbHkgd2hlbiBQYXBhIFBhcnNlIGlzIGxvYWRlZCBhc3luY2hyb25vdXNseS4gWW91IG5lZWQgdG8gc2V0IFBhcGEuU0NSSVBUX1BBVEggbWFudWFsbHkuXCIpO3ZhciBlPWsuU0NSSVBUX1BBVEh8fHM7ZSs9KC0xIT09ZS5pbmRleE9mKFwiP1wiKT9cIiZcIjpcIj9cIikrXCJwYXBhd29ya2VyXCI7dmFyIHQ9bmV3IGYuV29ya2VyKGUpO3JldHVybiB0Lm9ubWVzc2FnZT1tLHQuaWQ9dSsrLGhbdC5pZF09dH0oKTtyZXR1cm4gaS51c2VyU3RlcD10LnN0ZXAsaS51c2VyQ2h1bms9dC5jaHVuayxpLnVzZXJDb21wbGV0ZT10LmNvbXBsZXRlLGkudXNlckVycm9yPXQuZXJyb3IsdC5zdGVwPXoodC5zdGVwKSx0LmNodW5rPXoodC5jaHVuayksdC5jb21wbGV0ZT16KHQuY29tcGxldGUpLHQuZXJyb3I9eih0LmVycm9yKSxkZWxldGUgdC53b3JrZXIsdm9pZCBpLnBvc3RNZXNzYWdlKHtpbnB1dDplLGNvbmZpZzp0LHdvcmtlcklkOmkuaWR9KX12YXIgbj1udWxsO2suTk9ERV9TVFJFQU1fSU5QVVQsXCJzdHJpbmdcIj09dHlwZW9mIGU/bj10LmRvd25sb2FkP25ldyBjKHQpOm5ldyBfKHQpOiEwPT09ZS5yZWFkYWJsZSYmeihlLnJlYWQpJiZ6KGUub24pP249bmV3IGcodCk6KGYuRmlsZSYmZSBpbnN0YW5jZW9mIEZpbGV8fGUgaW5zdGFuY2VvZiBPYmplY3QpJiYobj1uZXcgcCh0KSk7cmV0dXJuIG4uc3RyZWFtKGUpfSx1bnBhcnNlOmZ1bmN0aW9uKGUsdCl7dmFyIGk9ITEsZz0hMCxtPVwiLFwiLHk9XCJcXHJcXG5cIixuPSdcIicscj0hMTshZnVuY3Rpb24oKXtpZihcIm9iamVjdFwiIT10eXBlb2YgdClyZXR1cm47XCJzdHJpbmdcIiE9dHlwZW9mIHQuZGVsaW1pdGVyfHxrLkJBRF9ERUxJTUlURVJTLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4tMSE9PXQuZGVsaW1pdGVyLmluZGV4T2YoZSl9KS5sZW5ndGh8fChtPXQuZGVsaW1pdGVyKTsoXCJib29sZWFuXCI9PXR5cGVvZiB0LnF1b3Rlc3x8QXJyYXkuaXNBcnJheSh0LnF1b3RlcykpJiYoaT10LnF1b3Rlcyk7XCJib29sZWFuXCIhPXR5cGVvZiB0LnNraXBFbXB0eUxpbmVzJiZcInN0cmluZ1wiIT10eXBlb2YgdC5za2lwRW1wdHlMaW5lc3x8KHI9dC5za2lwRW1wdHlMaW5lcyk7XCJzdHJpbmdcIj09dHlwZW9mIHQubmV3bGluZSYmKHk9dC5uZXdsaW5lKTtcInN0cmluZ1wiPT10eXBlb2YgdC5xdW90ZUNoYXImJihuPXQucXVvdGVDaGFyKTtcImJvb2xlYW5cIj09dHlwZW9mIHQuaGVhZGVyJiYoZz10LmhlYWRlcil9KCk7dmFyIHM9bmV3IFJlZ0V4cChNKG4pLFwiZ1wiKTtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9SlNPTi5wYXJzZShlKSk7aWYoQXJyYXkuaXNBcnJheShlKSl7aWYoIWUubGVuZ3RofHxBcnJheS5pc0FycmF5KGVbMF0pKXJldHVybiBvKG51bGwsZSxyKTtpZihcIm9iamVjdFwiPT10eXBlb2YgZVswXSlyZXR1cm4gbyhhKGVbMF0pLGUscil9ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYoZS5kYXRhPUpTT04ucGFyc2UoZS5kYXRhKSksQXJyYXkuaXNBcnJheShlLmRhdGEpJiYoZS5maWVsZHN8fChlLmZpZWxkcz1lLm1ldGEmJmUubWV0YS5maWVsZHMpLGUuZmllbGRzfHwoZS5maWVsZHM9QXJyYXkuaXNBcnJheShlLmRhdGFbMF0pP2UuZmllbGRzOmEoZS5kYXRhWzBdKSksQXJyYXkuaXNBcnJheShlLmRhdGFbMF0pfHxcIm9iamVjdFwiPT10eXBlb2YgZS5kYXRhWzBdfHwoZS5kYXRhPVtlLmRhdGFdKSksbyhlLmZpZWxkc3x8W10sZS5kYXRhfHxbXSxyKTt0aHJvd1wiZXhjZXB0aW9uOiBVbmFibGUgdG8gc2VyaWFsaXplIHVucmVjb2duaXplZCBpbnB1dFwiO2Z1bmN0aW9uIGEoZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUpcmV0dXJuW107dmFyIHQ9W107Zm9yKHZhciByIGluIGUpdC5wdXNoKHIpO3JldHVybiB0fWZ1bmN0aW9uIG8oZSx0LHIpe3ZhciBpPVwiXCI7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPUpTT04ucGFyc2UoZSkpLFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1KU09OLnBhcnNlKHQpKTt2YXIgbj1BcnJheS5pc0FycmF5KGUpJiYwPGUubGVuZ3RoLHM9IUFycmF5LmlzQXJyYXkodFswXSk7aWYobiYmZyl7Zm9yKHZhciBhPTA7YTxlLmxlbmd0aDthKyspMDxhJiYoaSs9bSksaSs9dihlW2FdLGEpOzA8dC5sZW5ndGgmJihpKz15KX1mb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIGg9bj9lLmxlbmd0aDp0W29dLmxlbmd0aCx1PSExLGY9bj8wPT09T2JqZWN0LmtleXModFtvXSkubGVuZ3RoOjA9PT10W29dLmxlbmd0aDtpZihyJiYhbiYmKHU9XCJncmVlZHlcIj09PXI/XCJcIj09PXRbb10uam9pbihcIlwiKS50cmltKCk6MT09PXRbb10ubGVuZ3RoJiYwPT09dFtvXVswXS5sZW5ndGgpLFwiZ3JlZWR5XCI9PT1yJiZuKXtmb3IodmFyIGQ9W10sbD0wO2w8aDtsKyspe3ZhciBjPXM/ZVtsXTpsO2QucHVzaCh0W29dW2NdKX11PVwiXCI9PT1kLmpvaW4oXCJcIikudHJpbSgpfWlmKCF1KXtmb3IodmFyIHA9MDtwPGg7cCsrKXswPHAmJiFmJiYoaSs9bSk7dmFyIF89biYmcz9lW3BdOnA7aSs9dih0W29dW19dLHApfW88dC5sZW5ndGgtMSYmKCFyfHwwPGgmJiFmKSYmKGkrPXkpfX1yZXR1cm4gaX1mdW5jdGlvbiB2KGUsdCl7aWYobnVsbD09ZSlyZXR1cm5cIlwiO2lmKGUuY29uc3RydWN0b3I9PT1EYXRlKXJldHVybiBKU09OLnN0cmluZ2lmeShlKS5zbGljZSgxLDI1KTtlPWUudG9TdHJpbmcoKS5yZXBsYWNlKHMsbituKTt2YXIgcj1cImJvb2xlYW5cIj09dHlwZW9mIGkmJml8fEFycmF5LmlzQXJyYXkoaSkmJmlbdF18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspaWYoLTE8ZS5pbmRleE9mKHRbcl0pKXJldHVybiEwO3JldHVybiExfShlLGsuQkFEX0RFTElNSVRFUlMpfHwtMTxlLmluZGV4T2YobSl8fFwiIFwiPT09ZS5jaGFyQXQoMCl8fFwiIFwiPT09ZS5jaGFyQXQoZS5sZW5ndGgtMSk7cmV0dXJuIHI/bitlK246ZX19fTtpZihrLlJFQ09SRF9TRVA9U3RyaW5nLmZyb21DaGFyQ29kZSgzMCksay5VTklUX1NFUD1TdHJpbmcuZnJvbUNoYXJDb2RlKDMxKSxrLkJZVEVfT1JERVJfTUFSSz1cIlxcdWZlZmZcIixrLkJBRF9ERUxJTUlURVJTPVtcIlxcclwiLFwiXFxuXCIsJ1wiJyxrLkJZVEVfT1JERVJfTUFSS10say5XT1JLRVJTX1NVUFBPUlRFRD0hbiYmISFmLldvcmtlcixrLlNDUklQVF9QQVRIPW51bGwsay5OT0RFX1NUUkVBTV9JTlBVVD0xLGsuTG9jYWxDaHVua1NpemU9MTA0ODU3NjAsay5SZW1vdGVDaHVua1NpemU9NTI0Mjg4MCxrLkRlZmF1bHREZWxpbWl0ZXI9XCIsXCIsay5QYXJzZXI9dixrLlBhcnNlckhhbmRsZT1yLGsuTmV0d29ya1N0cmVhbWVyPWMsay5GaWxlU3RyZWFtZXI9cCxrLlN0cmluZ1N0cmVhbWVyPV8say5SZWFkYWJsZVN0cmVhbVN0cmVhbWVyPWcsZi5qUXVlcnkpe3ZhciBkPWYualF1ZXJ5O2QuZm4ucGFyc2U9ZnVuY3Rpb24obyl7dmFyIHI9by5jb25maWd8fHt9LGg9W107cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtpZighKFwiSU5QVVRcIj09PWQodGhpcykucHJvcChcInRhZ05hbWVcIikudG9VcHBlckNhc2UoKSYmXCJmaWxlXCI9PT1kKHRoaXMpLmF0dHIoXCJ0eXBlXCIpLnRvTG93ZXJDYXNlKCkmJmYuRmlsZVJlYWRlcil8fCF0aGlzLmZpbGVzfHwwPT09dGhpcy5maWxlcy5sZW5ndGgpcmV0dXJuITA7Zm9yKHZhciB0PTA7dDx0aGlzLmZpbGVzLmxlbmd0aDt0KyspaC5wdXNoKHtmaWxlOnRoaXMuZmlsZXNbdF0saW5wdXRFbGVtOnRoaXMsaW5zdGFuY2VDb25maWc6ZC5leHRlbmQoe30scil9KX0pLGUoKSx0aGlzO2Z1bmN0aW9uIGUoKXtpZigwIT09aC5sZW5ndGgpe3ZhciBlLHQscixpLG49aFswXTtpZih6KG8uYmVmb3JlKSl7dmFyIHM9by5iZWZvcmUobi5maWxlLG4uaW5wdXRFbGVtKTtpZihcIm9iamVjdFwiPT10eXBlb2Ygcyl7aWYoXCJhYm9ydFwiPT09cy5hY3Rpb24pcmV0dXJuIGU9XCJBYm9ydEVycm9yXCIsdD1uLmZpbGUscj1uLmlucHV0RWxlbSxpPXMucmVhc29uLHZvaWQoeihvLmVycm9yKSYmby5lcnJvcih7bmFtZTplfSx0LHIsaSkpO2lmKFwic2tpcFwiPT09cy5hY3Rpb24pcmV0dXJuIHZvaWQgdSgpO1wib2JqZWN0XCI9PXR5cGVvZiBzLmNvbmZpZyYmKG4uaW5zdGFuY2VDb25maWc9ZC5leHRlbmQobi5pbnN0YW5jZUNvbmZpZyxzLmNvbmZpZykpfWVsc2UgaWYoXCJza2lwXCI9PT1zKXJldHVybiB2b2lkIHUoKX12YXIgYT1uLmluc3RhbmNlQ29uZmlnLmNvbXBsZXRlO24uaW5zdGFuY2VDb25maWcuY29tcGxldGU9ZnVuY3Rpb24oZSl7eihhKSYmYShlLG4uZmlsZSxuLmlucHV0RWxlbSksdSgpfSxrLnBhcnNlKG4uZmlsZSxuLmluc3RhbmNlQ29uZmlnKX1lbHNlIHooby5jb21wbGV0ZSkmJm8uY29tcGxldGUoKX1mdW5jdGlvbiB1KCl7aC5zcGxpY2UoMCwxKSxlKCl9fX1mdW5jdGlvbiBsKGUpe3RoaXMuX2hhbmRsZT1udWxsLHRoaXMuX2ZpbmlzaGVkPSExLHRoaXMuX2NvbXBsZXRlZD0hMSx0aGlzLl9pbnB1dD1udWxsLHRoaXMuX2Jhc2VJbmRleD0wLHRoaXMuX3BhcnRpYWxMaW5lPVwiXCIsdGhpcy5fcm93Q291bnQ9MCx0aGlzLl9zdGFydD0wLHRoaXMuX25leHRDaHVuaz1udWxsLHRoaXMuaXNGaXJzdENodW5rPSEwLHRoaXMuX2NvbXBsZXRlUmVzdWx0cz17ZGF0YTpbXSxlcnJvcnM6W10sbWV0YTp7fX0sZnVuY3Rpb24oZSl7dmFyIHQ9RShlKTt0LmNodW5rU2l6ZT1wYXJzZUludCh0LmNodW5rU2l6ZSksZS5zdGVwfHxlLmNodW5rfHwodC5jaHVua1NpemU9bnVsbCk7dGhpcy5faGFuZGxlPW5ldyByKHQpLCh0aGlzLl9oYW5kbGUuc3RyZWFtZXI9dGhpcykuX2NvbmZpZz10fS5jYWxsKHRoaXMsZSksdGhpcy5wYXJzZUNodW5rPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5pc0ZpcnN0Q2h1bmsmJnoodGhpcy5fY29uZmlnLmJlZm9yZUZpcnN0Q2h1bmspKXt2YXIgcj10aGlzLl9jb25maWcuYmVmb3JlRmlyc3RDaHVuayhlKTt2b2lkIDAhPT1yJiYoZT1yKX10aGlzLmlzRmlyc3RDaHVuaz0hMTt2YXIgaT10aGlzLl9wYXJ0aWFsTGluZStlO3RoaXMuX3BhcnRpYWxMaW5lPVwiXCI7dmFyIG49dGhpcy5faGFuZGxlLnBhcnNlKGksdGhpcy5fYmFzZUluZGV4LCF0aGlzLl9maW5pc2hlZCk7aWYoIXRoaXMuX2hhbmRsZS5wYXVzZWQoKSYmIXRoaXMuX2hhbmRsZS5hYm9ydGVkKCkpe3ZhciBzPW4ubWV0YS5jdXJzb3I7dGhpcy5fZmluaXNoZWR8fCh0aGlzLl9wYXJ0aWFsTGluZT1pLnN1YnN0cmluZyhzLXRoaXMuX2Jhc2VJbmRleCksdGhpcy5fYmFzZUluZGV4PXMpLG4mJm4uZGF0YSYmKHRoaXMuX3Jvd0NvdW50Kz1uLmRhdGEubGVuZ3RoKTt2YXIgYT10aGlzLl9maW5pc2hlZHx8dGhpcy5fY29uZmlnLnByZXZpZXcmJnRoaXMuX3Jvd0NvdW50Pj10aGlzLl9jb25maWcucHJldmlldztpZihvKWYucG9zdE1lc3NhZ2Uoe3Jlc3VsdHM6bix3b3JrZXJJZDprLldPUktFUl9JRCxmaW5pc2hlZDphfSk7ZWxzZSBpZih6KHRoaXMuX2NvbmZpZy5jaHVuaykmJiF0KXtpZih0aGlzLl9jb25maWcuY2h1bmsobix0aGlzLl9oYW5kbGUpLHRoaXMuX2hhbmRsZS5wYXVzZWQoKXx8dGhpcy5faGFuZGxlLmFib3J0ZWQoKSlyZXR1cm47bj12b2lkIDAsdGhpcy5fY29tcGxldGVSZXN1bHRzPXZvaWQgMH1yZXR1cm4gdGhpcy5fY29uZmlnLnN0ZXB8fHRoaXMuX2NvbmZpZy5jaHVua3x8KHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5kYXRhPXRoaXMuX2NvbXBsZXRlUmVzdWx0cy5kYXRhLmNvbmNhdChuLmRhdGEpLHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5lcnJvcnM9dGhpcy5fY29tcGxldGVSZXN1bHRzLmVycm9ycy5jb25jYXQobi5lcnJvcnMpLHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5tZXRhPW4ubWV0YSksdGhpcy5fY29tcGxldGVkfHwhYXx8IXoodGhpcy5fY29uZmlnLmNvbXBsZXRlKXx8biYmbi5tZXRhLmFib3J0ZWR8fCh0aGlzLl9jb25maWcuY29tcGxldGUodGhpcy5fY29tcGxldGVSZXN1bHRzLHRoaXMuX2lucHV0KSx0aGlzLl9jb21wbGV0ZWQ9ITApLGF8fG4mJm4ubWV0YS5wYXVzZWR8fHRoaXMuX25leHRDaHVuaygpLG59fSx0aGlzLl9zZW5kRXJyb3I9ZnVuY3Rpb24oZSl7eih0aGlzLl9jb25maWcuZXJyb3IpP3RoaXMuX2NvbmZpZy5lcnJvcihlKTpvJiZ0aGlzLl9jb25maWcuZXJyb3ImJmYucG9zdE1lc3NhZ2Uoe3dvcmtlcklkOmsuV09SS0VSX0lELGVycm9yOmUsZmluaXNoZWQ6ITF9KX19ZnVuY3Rpb24gYyhlKXt2YXIgaTsoZT1lfHx7fSkuY2h1bmtTaXplfHwoZS5jaHVua1NpemU9ay5SZW1vdGVDaHVua1NpemUpLGwuY2FsbCh0aGlzLGUpLHRoaXMuX25leHRDaHVuaz1uP2Z1bmN0aW9uKCl7dGhpcy5fcmVhZENodW5rKCksdGhpcy5fY2h1bmtMb2FkZWQoKX06ZnVuY3Rpb24oKXt0aGlzLl9yZWFkQ2h1bmsoKX0sdGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7dGhpcy5faW5wdXQ9ZSx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fcmVhZENodW5rPWZ1bmN0aW9uKCl7aWYodGhpcy5fZmluaXNoZWQpdGhpcy5fY2h1bmtMb2FkZWQoKTtlbHNle2lmKGk9bmV3IFhNTEh0dHBSZXF1ZXN0LHRoaXMuX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMmJihpLndpdGhDcmVkZW50aWFscz10aGlzLl9jb25maWcud2l0aENyZWRlbnRpYWxzKSxufHwoaS5vbmxvYWQ9dyh0aGlzLl9jaHVua0xvYWRlZCx0aGlzKSxpLm9uZXJyb3I9dyh0aGlzLl9jaHVua0Vycm9yLHRoaXMpKSxpLm9wZW4oXCJHRVRcIix0aGlzLl9pbnB1dCwhbiksdGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnMpe3ZhciBlPXRoaXMuX2NvbmZpZy5kb3dubG9hZFJlcXVlc3RIZWFkZXJzO2Zvcih2YXIgdCBpbiBlKWkuc2V0UmVxdWVzdEhlYWRlcih0LGVbdF0pfWlmKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpe3ZhciByPXRoaXMuX3N0YXJ0K3RoaXMuX2NvbmZpZy5jaHVua1NpemUtMTtpLnNldFJlcXVlc3RIZWFkZXIoXCJSYW5nZVwiLFwiYnl0ZXM9XCIrdGhpcy5fc3RhcnQrXCItXCIrciksaS5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLFwid2Via2l0LW5vLWNhY2hlXCIpfXRyeXtpLnNlbmQoKX1jYXRjaChlKXt0aGlzLl9jaHVua0Vycm9yKGUubWVzc2FnZSl9biYmMD09PWkuc3RhdHVzP3RoaXMuX2NodW5rRXJyb3IoKTp0aGlzLl9zdGFydCs9dGhpcy5fY29uZmlnLmNodW5rU2l6ZX19LHRoaXMuX2NodW5rTG9hZGVkPWZ1bmN0aW9uKCl7ND09PWkucmVhZHlTdGF0ZSYmKGkuc3RhdHVzPDIwMHx8NDAwPD1pLnN0YXR1cz90aGlzLl9jaHVua0Vycm9yKCk6KHRoaXMuX2ZpbmlzaGVkPSF0aGlzLl9jb25maWcuY2h1bmtTaXplfHx0aGlzLl9zdGFydD5mdW5jdGlvbihlKXt2YXIgdD1lLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1SYW5nZVwiKTtpZihudWxsPT09dClyZXR1cm4tMTtyZXR1cm4gcGFyc2VJbnQodC5zdWJzdHIodC5sYXN0SW5kZXhPZihcIi9cIikrMSkpfShpKSx0aGlzLnBhcnNlQ2h1bmsoaS5yZXNwb25zZVRleHQpKSl9LHRoaXMuX2NodW5rRXJyb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9aS5zdGF0dXNUZXh0fHxlO3RoaXMuX3NlbmRFcnJvcihuZXcgRXJyb3IodCkpfX1mdW5jdGlvbiBwKGUpe3ZhciBpLG47KGU9ZXx8e30pLmNodW5rU2l6ZXx8KGUuY2h1bmtTaXplPWsuTG9jYWxDaHVua1NpemUpLGwuY2FsbCh0aGlzLGUpO3ZhciBzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBGaWxlUmVhZGVyO3RoaXMuc3RyZWFtPWZ1bmN0aW9uKGUpe3RoaXMuX2lucHV0PWUsbj1lLnNsaWNlfHxlLndlYmtpdFNsaWNlfHxlLm1velNsaWNlLHM/KChpPW5ldyBGaWxlUmVhZGVyKS5vbmxvYWQ9dyh0aGlzLl9jaHVua0xvYWRlZCx0aGlzKSxpLm9uZXJyb3I9dyh0aGlzLl9jaHVua0Vycm9yLHRoaXMpKTppPW5ldyBGaWxlUmVhZGVyU3luYyx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fbmV4dENodW5rPWZ1bmN0aW9uKCl7dGhpcy5fZmluaXNoZWR8fHRoaXMuX2NvbmZpZy5wcmV2aWV3JiYhKHRoaXMuX3Jvd0NvdW50PHRoaXMuX2NvbmZpZy5wcmV2aWV3KXx8dGhpcy5fcmVhZENodW5rKCl9LHRoaXMuX3JlYWRDaHVuaz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX2lucHV0O2lmKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpe3ZhciB0PU1hdGgubWluKHRoaXMuX3N0YXJ0K3RoaXMuX2NvbmZpZy5jaHVua1NpemUsdGhpcy5faW5wdXQuc2l6ZSk7ZT1uLmNhbGwoZSx0aGlzLl9zdGFydCx0KX12YXIgcj1pLnJlYWRBc1RleHQoZSx0aGlzLl9jb25maWcuZW5jb2RpbmcpO3N8fHRoaXMuX2NodW5rTG9hZGVkKHt0YXJnZXQ6e3Jlc3VsdDpyfX0pfSx0aGlzLl9jaHVua0xvYWRlZD1mdW5jdGlvbihlKXt0aGlzLl9zdGFydCs9dGhpcy5fY29uZmlnLmNodW5rU2l6ZSx0aGlzLl9maW5pc2hlZD0hdGhpcy5fY29uZmlnLmNodW5rU2l6ZXx8dGhpcy5fc3RhcnQ+PXRoaXMuX2lucHV0LnNpemUsdGhpcy5wYXJzZUNodW5rKGUudGFyZ2V0LnJlc3VsdCl9LHRoaXMuX2NodW5rRXJyb3I9ZnVuY3Rpb24oKXt0aGlzLl9zZW5kRXJyb3IoaS5lcnJvcil9fWZ1bmN0aW9uIF8oZSl7dmFyIHI7bC5jYWxsKHRoaXMsZT1lfHx7fSksdGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7cmV0dXJuIHI9ZSx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fbmV4dENodW5rPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2ZpbmlzaGVkKXt2YXIgZT10aGlzLl9jb25maWcuY2h1bmtTaXplLHQ9ZT9yLnN1YnN0cigwLGUpOnI7cmV0dXJuIHI9ZT9yLnN1YnN0cihlKTpcIlwiLHRoaXMuX2ZpbmlzaGVkPSFyLHRoaXMucGFyc2VDaHVuayh0KX19fWZ1bmN0aW9uIGcoZSl7bC5jYWxsKHRoaXMsZT1lfHx7fSk7dmFyIHQ9W10scj0hMCxpPSExO3RoaXMucGF1c2U9ZnVuY3Rpb24oKXtsLnByb3RvdHlwZS5wYXVzZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5faW5wdXQucGF1c2UoKX0sdGhpcy5yZXN1bWU9ZnVuY3Rpb24oKXtsLnByb3RvdHlwZS5yZXN1bWUuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2lucHV0LnJlc3VtZSgpfSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXt0aGlzLl9pbnB1dD1lLHRoaXMuX2lucHV0Lm9uKFwiZGF0YVwiLHRoaXMuX3N0cmVhbURhdGEpLHRoaXMuX2lucHV0Lm9uKFwiZW5kXCIsdGhpcy5fc3RyZWFtRW5kKSx0aGlzLl9pbnB1dC5vbihcImVycm9yXCIsdGhpcy5fc3RyZWFtRXJyb3IpfSx0aGlzLl9jaGVja0lzRmluaXNoZWQ9ZnVuY3Rpb24oKXtpJiYxPT09dC5sZW5ndGgmJih0aGlzLl9maW5pc2hlZD0hMCl9LHRoaXMuX25leHRDaHVuaz1mdW5jdGlvbigpe3RoaXMuX2NoZWNrSXNGaW5pc2hlZCgpLHQubGVuZ3RoP3RoaXMucGFyc2VDaHVuayh0LnNoaWZ0KCkpOnI9ITB9LHRoaXMuX3N0cmVhbURhdGE9dyhmdW5jdGlvbihlKXt0cnl7dC5wdXNoKFwic3RyaW5nXCI9PXR5cGVvZiBlP2U6ZS50b1N0cmluZyh0aGlzLl9jb25maWcuZW5jb2RpbmcpKSxyJiYocj0hMSx0aGlzLl9jaGVja0lzRmluaXNoZWQoKSx0aGlzLnBhcnNlQ2h1bmsodC5zaGlmdCgpKSl9Y2F0Y2goZSl7dGhpcy5fc3RyZWFtRXJyb3IoZSl9fSx0aGlzKSx0aGlzLl9zdHJlYW1FcnJvcj13KGZ1bmN0aW9uKGUpe3RoaXMuX3N0cmVhbUNsZWFuVXAoKSx0aGlzLl9zZW5kRXJyb3IoZSl9LHRoaXMpLHRoaXMuX3N0cmVhbUVuZD13KGZ1bmN0aW9uKCl7dGhpcy5fc3RyZWFtQ2xlYW5VcCgpLGk9ITAsdGhpcy5fc3RyZWFtRGF0YShcIlwiKX0sdGhpcyksdGhpcy5fc3RyZWFtQ2xlYW5VcD13KGZ1bmN0aW9uKCl7dGhpcy5faW5wdXQucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsdGhpcy5fc3RyZWFtRGF0YSksdGhpcy5faW5wdXQucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIix0aGlzLl9zdHJlYW1FbmQpLHRoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIix0aGlzLl9zdHJlYW1FcnJvcil9LHRoaXMpfWZ1bmN0aW9uIHIoZyl7dmFyIGEsbyxoLGk9L15cXHMqLT8oXFxkKlxcLj9cXGQrfFxcZCtcXC4/XFxkKikoZVstK10/XFxkKyk/XFxzKiQvaSxuPS8oXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSl8KFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSl8KFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSkvLHQ9dGhpcyxyPTAscz0wLHU9ITEsZT0hMSxmPVtdLGQ9e2RhdGE6W10sZXJyb3JzOltdLG1ldGE6e319O2lmKHooZy5zdGVwKSl7dmFyIGw9Zy5zdGVwO2cuc3RlcD1mdW5jdGlvbihlKXtpZihkPWUscCgpKWMoKTtlbHNle2lmKGMoKSwwPT09ZC5kYXRhLmxlbmd0aClyZXR1cm47cis9ZS5kYXRhLmxlbmd0aCxnLnByZXZpZXcmJnI+Zy5wcmV2aWV3P28uYWJvcnQoKTpsKGQsdCl9fX1mdW5jdGlvbiBtKGUpe3JldHVyblwiZ3JlZWR5XCI9PT1nLnNraXBFbXB0eUxpbmVzP1wiXCI9PT1lLmpvaW4oXCJcIikudHJpbSgpOjE9PT1lLmxlbmd0aCYmMD09PWVbMF0ubGVuZ3RofWZ1bmN0aW9uIGMoKXtpZihkJiZoJiYoeShcIkRlbGltaXRlclwiLFwiVW5kZXRlY3RhYmxlRGVsaW1pdGVyXCIsXCJVbmFibGUgdG8gYXV0by1kZXRlY3QgZGVsaW1pdGluZyBjaGFyYWN0ZXI7IGRlZmF1bHRlZCB0byAnXCIray5EZWZhdWx0RGVsaW1pdGVyK1wiJ1wiKSxoPSExKSxnLnNraXBFbXB0eUxpbmVzKWZvcih2YXIgZT0wO2U8ZC5kYXRhLmxlbmd0aDtlKyspbShkLmRhdGFbZV0pJiZkLmRhdGEuc3BsaWNlKGUtLSwxKTtyZXR1cm4gcCgpJiZmdW5jdGlvbigpe2lmKCFkKXJldHVybjtmb3IodmFyIGU9MDtwKCkmJmU8ZC5kYXRhLmxlbmd0aDtlKyspZm9yKHZhciB0PTA7dDxkLmRhdGFbZV0ubGVuZ3RoO3QrKyl7dmFyIHI9ZC5kYXRhW2VdW3RdO2cudHJpbUhlYWRlcnMmJihyPXIudHJpbSgpKSxmLnB1c2gocil9ZC5kYXRhLnNwbGljZSgwLDEpfSgpLGZ1bmN0aW9uKCl7aWYoIWR8fCFnLmhlYWRlciYmIWcuZHluYW1pY1R5cGluZyYmIWcudHJhbnNmb3JtKXJldHVybiBkO2Zvcih2YXIgZT0wO2U8ZC5kYXRhLmxlbmd0aDtlKyspe3ZhciB0LHI9Zy5oZWFkZXI/e306W107Zm9yKHQ9MDt0PGQuZGF0YVtlXS5sZW5ndGg7dCsrKXt2YXIgaT10LG49ZC5kYXRhW2VdW3RdO2cuaGVhZGVyJiYoaT10Pj1mLmxlbmd0aD9cIl9fcGFyc2VkX2V4dHJhXCI6Zlt0XSksZy50cmFuc2Zvcm0mJihuPWcudHJhbnNmb3JtKG4saSkpLG49XyhpLG4pLFwiX19wYXJzZWRfZXh0cmFcIj09PWk/KHJbaV09cltpXXx8W10scltpXS5wdXNoKG4pKTpyW2ldPW59ZC5kYXRhW2VdPXIsZy5oZWFkZXImJih0PmYubGVuZ3RoP3koXCJGaWVsZE1pc21hdGNoXCIsXCJUb29NYW55RmllbGRzXCIsXCJUb28gbWFueSBmaWVsZHM6IGV4cGVjdGVkIFwiK2YubGVuZ3RoK1wiIGZpZWxkcyBidXQgcGFyc2VkIFwiK3QscytlKTp0PGYubGVuZ3RoJiZ5KFwiRmllbGRNaXNtYXRjaFwiLFwiVG9vRmV3RmllbGRzXCIsXCJUb28gZmV3IGZpZWxkczogZXhwZWN0ZWQgXCIrZi5sZW5ndGgrXCIgZmllbGRzIGJ1dCBwYXJzZWQgXCIrdCxzK2UpKX1nLmhlYWRlciYmZC5tZXRhJiYoZC5tZXRhLmZpZWxkcz1mKTtyZXR1cm4gcys9ZC5kYXRhLmxlbmd0aCxkfSgpfWZ1bmN0aW9uIHAoKXtyZXR1cm4gZy5oZWFkZXImJjA9PT1mLmxlbmd0aH1mdW5jdGlvbiBfKGUsdCl7cmV0dXJuIHI9ZSxnLmR5bmFtaWNUeXBpbmdGdW5jdGlvbiYmdm9pZCAwPT09Zy5keW5hbWljVHlwaW5nW3JdJiYoZy5keW5hbWljVHlwaW5nW3JdPWcuZHluYW1pY1R5cGluZ0Z1bmN0aW9uKHIpKSwhMD09PShnLmR5bmFtaWNUeXBpbmdbcl18fGcuZHluYW1pY1R5cGluZyk/XCJ0cnVlXCI9PT10fHxcIlRSVUVcIj09PXR8fFwiZmFsc2VcIiE9PXQmJlwiRkFMU0VcIiE9PXQmJihpLnRlc3QodCk/cGFyc2VGbG9hdCh0KTpuLnRlc3QodCk/bmV3IERhdGUodCk6XCJcIj09PXQ/bnVsbDp0KTp0O3ZhciByfWZ1bmN0aW9uIHkoZSx0LHIsaSl7ZC5lcnJvcnMucHVzaCh7dHlwZTplLGNvZGU6dCxtZXNzYWdlOnIscm93Oml9KX10aGlzLnBhcnNlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaT1nLnF1b3RlQ2hhcnx8J1wiJztpZihnLm5ld2xpbmV8fChnLm5ld2xpbmU9ZnVuY3Rpb24oZSx0KXtlPWUuc3Vic3RyKDAsMTA0ODU3Nik7dmFyIHI9bmV3IFJlZ0V4cChNKHQpK1wiKFteXSo/KVwiK00odCksXCJnbVwiKSxpPShlPWUucmVwbGFjZShyLFwiXCIpKS5zcGxpdChcIlxcclwiKSxuPWUuc3BsaXQoXCJcXG5cIikscz0xPG4ubGVuZ3RoJiZuWzBdLmxlbmd0aDxpWzBdLmxlbmd0aDtpZigxPT09aS5sZW5ndGh8fHMpcmV0dXJuXCJcXG5cIjtmb3IodmFyIGE9MCxvPTA7bzxpLmxlbmd0aDtvKyspXCJcXG5cIj09PWlbb11bMF0mJmErKztyZXR1cm4gYT49aS5sZW5ndGgvMj9cIlxcclxcblwiOlwiXFxyXCJ9KGUsaSkpLGg9ITEsZy5kZWxpbWl0ZXIpeihnLmRlbGltaXRlcikmJihnLmRlbGltaXRlcj1nLmRlbGltaXRlcihlKSxkLm1ldGEuZGVsaW1pdGVyPWcuZGVsaW1pdGVyKTtlbHNle3ZhciBuPWZ1bmN0aW9uKGUsdCxyLGkpe2Zvcih2YXIgbixzLGEsbz1bXCIsXCIsXCJcXHRcIixcInxcIixcIjtcIixrLlJFQ09SRF9TRVAsay5VTklUX1NFUF0saD0wO2g8by5sZW5ndGg7aCsrKXt2YXIgdT1vW2hdLGY9MCxkPTAsbD0wO2E9dm9pZCAwO2Zvcih2YXIgYz1uZXcgdih7Y29tbWVudHM6aSxkZWxpbWl0ZXI6dSxuZXdsaW5lOnQscHJldmlldzoxMH0pLnBhcnNlKGUpLHA9MDtwPGMuZGF0YS5sZW5ndGg7cCsrKWlmKHImJm0oYy5kYXRhW3BdKSlsKys7ZWxzZXt2YXIgXz1jLmRhdGFbcF0ubGVuZ3RoO2QrPV8sdm9pZCAwIT09YT8xPF8mJihmKz1NYXRoLmFicyhfLWEpLGE9Xyk6YT0wfTA8Yy5kYXRhLmxlbmd0aCYmKGQvPWMuZGF0YS5sZW5ndGgtbCksKHZvaWQgMD09PXN8fHM8ZikmJjEuOTk8ZCYmKHM9ZixuPXUpfXJldHVybntzdWNjZXNzZnVsOiEhKGcuZGVsaW1pdGVyPW4pLGJlc3REZWxpbWl0ZXI6bn19KGUsZy5uZXdsaW5lLGcuc2tpcEVtcHR5TGluZXMsZy5jb21tZW50cyk7bi5zdWNjZXNzZnVsP2cuZGVsaW1pdGVyPW4uYmVzdERlbGltaXRlcjooaD0hMCxnLmRlbGltaXRlcj1rLkRlZmF1bHREZWxpbWl0ZXIpLGQubWV0YS5kZWxpbWl0ZXI9Zy5kZWxpbWl0ZXJ9dmFyIHM9RShnKTtyZXR1cm4gZy5wcmV2aWV3JiZnLmhlYWRlciYmcy5wcmV2aWV3KyssYT1lLG89bmV3IHYocyksZD1vLnBhcnNlKGEsdCxyKSxjKCksdT97bWV0YTp7cGF1c2VkOiEwfX06ZHx8e21ldGE6e3BhdXNlZDohMX19fSx0aGlzLnBhdXNlZD1mdW5jdGlvbigpe3JldHVybiB1fSx0aGlzLnBhdXNlPWZ1bmN0aW9uKCl7dT0hMCxvLmFib3J0KCksYT1hLnN1YnN0cihvLmdldENoYXJJbmRleCgpKX0sdGhpcy5yZXN1bWU9ZnVuY3Rpb24oKXt1PSExLHQuc3RyZWFtZXIucGFyc2VDaHVuayhhLCEwKX0sdGhpcy5hYm9ydGVkPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LHRoaXMuYWJvcnQ9ZnVuY3Rpb24oKXtlPSEwLG8uYWJvcnQoKSxkLm1ldGEuYWJvcnRlZD0hMCx6KGcuY29tcGxldGUpJiZnLmNvbXBsZXRlKGQpLGE9XCJcIn19ZnVuY3Rpb24gTShlKXtyZXR1cm4gZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZyxcIlxcXFwkJlwiKX1mdW5jdGlvbiB2KGUpe3ZhciBTLE89KGU9ZXx8e30pLmRlbGltaXRlcix4PWUubmV3bGluZSxUPWUuY29tbWVudHMsST1lLnN0ZXAsQT1lLnByZXZpZXcsRD1lLmZhc3RNb2RlLEw9Uz12b2lkIDA9PT1lLnF1b3RlQ2hhcj8nXCInOmUucXVvdGVDaGFyO2lmKHZvaWQgMCE9PWUuZXNjYXBlQ2hhciYmKEw9ZS5lc2NhcGVDaGFyKSwoXCJzdHJpbmdcIiE9dHlwZW9mIE98fC0xPGsuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihPKSkmJihPPVwiLFwiKSxUPT09Tyl0aHJvd1wiQ29tbWVudCBjaGFyYWN0ZXIgc2FtZSBhcyBkZWxpbWl0ZXJcIjshMD09PVQ/VD1cIiNcIjooXCJzdHJpbmdcIiE9dHlwZW9mIFR8fC0xPGsuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihUKSkmJihUPSExKSxcIlxcblwiIT09eCYmXCJcXHJcIiE9PXgmJlwiXFxyXFxuXCIhPT14JiYoeD1cIlxcblwiKTt2YXIgUD0wLEY9ITE7dGhpcy5wYXJzZT1mdW5jdGlvbihpLHQscil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGkpdGhyb3dcIklucHV0IG11c3QgYmUgYSBzdHJpbmdcIjt2YXIgbj1pLmxlbmd0aCxlPU8ubGVuZ3RoLHM9eC5sZW5ndGgsYT1ULmxlbmd0aCxvPXooSSksaD1bXSx1PVtdLGY9W10sZD1QPTA7aWYoIWkpcmV0dXJuIEMoKTtpZihEfHwhMSE9PUQmJi0xPT09aS5pbmRleE9mKFMpKXtmb3IodmFyIGw9aS5zcGxpdCh4KSxjPTA7YzxsLmxlbmd0aDtjKyspe2lmKGY9bFtjXSxQKz1mLmxlbmd0aCxjIT09bC5sZW5ndGgtMSlQKz14Lmxlbmd0aDtlbHNlIGlmKHIpcmV0dXJuIEMoKTtpZighVHx8Zi5zdWJzdHIoMCxhKSE9PVQpe2lmKG8pe2lmKGg9W10sayhmLnNwbGl0KE8pKSxSKCksRilyZXR1cm4gQygpfWVsc2UgayhmLnNwbGl0KE8pKTtpZihBJiZBPD1jKXJldHVybiBoPWguc2xpY2UoMCxBKSxDKCEwKX19cmV0dXJuIEMoKX1mb3IodmFyIHAsXz1pLmluZGV4T2YoTyxQKSxnPWkuaW5kZXhPZih4LFApLG09bmV3IFJlZ0V4cChNKEwpK00oUyksXCJnXCIpOzspaWYoaVtQXSE9PVMpaWYoVCYmMD09PWYubGVuZ3RoJiZpLnN1YnN0cihQLGEpPT09VCl7aWYoLTE9PT1nKXJldHVybiBDKCk7UD1nK3MsZz1pLmluZGV4T2YoeCxQKSxfPWkuaW5kZXhPZihPLFApfWVsc2UgaWYoLTEhPT1fJiYoXzxnfHwtMT09PWcpKWYucHVzaChpLnN1YnN0cmluZyhQLF8pKSxQPV8rZSxfPWkuaW5kZXhPZihPLFApO2Vsc2V7aWYoLTE9PT1nKWJyZWFrO2lmKGYucHVzaChpLnN1YnN0cmluZyhQLGcpKSx3KGcrcyksbyYmKFIoKSxGKSlyZXR1cm4gQygpO2lmKEEmJmgubGVuZ3RoPj1BKXJldHVybiBDKCEwKX1lbHNlIGZvcihwPVAsUCsrOzspe2lmKC0xPT09KHA9aS5pbmRleE9mKFMscCsxKSkpcmV0dXJuIHJ8fHUucHVzaCh7dHlwZTpcIlF1b3Rlc1wiLGNvZGU6XCJNaXNzaW5nUXVvdGVzXCIsbWVzc2FnZTpcIlF1b3RlZCBmaWVsZCB1bnRlcm1pbmF0ZWRcIixyb3c6aC5sZW5ndGgsaW5kZXg6UH0pLEUoKTtpZihwPT09bi0xKXJldHVybiBFKGkuc3Vic3RyaW5nKFAscCkucmVwbGFjZShtLFMpKTtpZihTIT09THx8aVtwKzFdIT09TCl7aWYoUz09PUx8fDA9PT1wfHxpW3AtMV0hPT1MKXt2YXIgeT1iKC0xPT09Zz9fOk1hdGgubWluKF8sZykpO2lmKGlbcCsxK3ldPT09Tyl7Zi5wdXNoKGkuc3Vic3RyaW5nKFAscCkucmVwbGFjZShtLFMpKSxQPXArMSt5K2UsXz1pLmluZGV4T2YoTyxQKSxnPWkuaW5kZXhPZih4LFApO2JyZWFrfXZhciB2PWIoZyk7aWYoaS5zdWJzdHIocCsxK3Yscyk9PT14KXtpZihmLnB1c2goaS5zdWJzdHJpbmcoUCxwKS5yZXBsYWNlKG0sUykpLHcocCsxK3YrcyksXz1pLmluZGV4T2YoTyxQKSxvJiYoUigpLEYpKXJldHVybiBDKCk7aWYoQSYmaC5sZW5ndGg+PUEpcmV0dXJuIEMoITApO2JyZWFrfXUucHVzaCh7dHlwZTpcIlF1b3Rlc1wiLGNvZGU6XCJJbnZhbGlkUXVvdGVzXCIsbWVzc2FnZTpcIlRyYWlsaW5nIHF1b3RlIG9uIHF1b3RlZCBmaWVsZCBpcyBtYWxmb3JtZWRcIixyb3c6aC5sZW5ndGgsaW5kZXg6UH0pLHArK319ZWxzZSBwKyt9cmV0dXJuIEUoKTtmdW5jdGlvbiBrKGUpe2gucHVzaChlKSxkPVB9ZnVuY3Rpb24gYihlKXt2YXIgdD0wO2lmKC0xIT09ZSl7dmFyIHI9aS5zdWJzdHJpbmcocCsxLGUpO3ImJlwiXCI9PT1yLnRyaW0oKSYmKHQ9ci5sZW5ndGgpfXJldHVybiB0fWZ1bmN0aW9uIEUoZSl7cmV0dXJuIHJ8fCh2b2lkIDA9PT1lJiYoZT1pLnN1YnN0cihQKSksZi5wdXNoKGUpLFA9bixrKGYpLG8mJlIoKSksQygpfWZ1bmN0aW9uIHcoZSl7UD1lLGsoZiksZj1bXSxnPWkuaW5kZXhPZih4LFApfWZ1bmN0aW9uIEMoZSl7cmV0dXJue2RhdGE6aCxlcnJvcnM6dSxtZXRhOntkZWxpbWl0ZXI6TyxsaW5lYnJlYWs6eCxhYm9ydGVkOkYsdHJ1bmNhdGVkOiEhZSxjdXJzb3I6ZCsodHx8MCl9fX1mdW5jdGlvbiBSKCl7SShDKCkpLGg9W10sdT1bXX19LHRoaXMuYWJvcnQ9ZnVuY3Rpb24oKXtGPSEwfSx0aGlzLmdldENoYXJJbmRleD1mdW5jdGlvbigpe3JldHVybiBQfX1mdW5jdGlvbiBtKGUpe3ZhciB0PWUuZGF0YSxyPWhbdC53b3JrZXJJZF0saT0hMTtpZih0LmVycm9yKXIudXNlckVycm9yKHQuZXJyb3IsdC5maWxlKTtlbHNlIGlmKHQucmVzdWx0cyYmdC5yZXN1bHRzLmRhdGEpe3ZhciBuPXthYm9ydDpmdW5jdGlvbigpe2k9ITAseSh0LndvcmtlcklkLHtkYXRhOltdLGVycm9yczpbXSxtZXRhOnthYm9ydGVkOiEwfX0pfSxwYXVzZTpiLHJlc3VtZTpifTtpZih6KHIudXNlclN0ZXApKXtmb3IodmFyIHM9MDtzPHQucmVzdWx0cy5kYXRhLmxlbmd0aCYmKHIudXNlclN0ZXAoe2RhdGE6W3QucmVzdWx0cy5kYXRhW3NdXSxlcnJvcnM6dC5yZXN1bHRzLmVycm9ycyxtZXRhOnQucmVzdWx0cy5tZXRhfSxuKSwhaSk7cysrKTtkZWxldGUgdC5yZXN1bHRzfWVsc2UgeihyLnVzZXJDaHVuaykmJihyLnVzZXJDaHVuayh0LnJlc3VsdHMsbix0LmZpbGUpLGRlbGV0ZSB0LnJlc3VsdHMpfXQuZmluaXNoZWQmJiFpJiZ5KHQud29ya2VySWQsdC5yZXN1bHRzKX1mdW5jdGlvbiB5KGUsdCl7dmFyIHI9aFtlXTt6KHIudXNlckNvbXBsZXRlKSYmci51c2VyQ29tcGxldGUodCksci50ZXJtaW5hdGUoKSxkZWxldGUgaFtlXX1mdW5jdGlvbiBiKCl7dGhyb3dcIk5vdCBpbXBsZW1lbnRlZC5cIn1mdW5jdGlvbiBFKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm4gZTt2YXIgdD1BcnJheS5pc0FycmF5KGUpP1tdOnt9O2Zvcih2YXIgciBpbiBlKXRbcl09RShlW3JdKTtyZXR1cm4gdH1mdW5jdGlvbiB3KGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7ZS5hcHBseSh0LGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHooZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX1yZXR1cm4gbz9mLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgdD1lLmRhdGE7dm9pZCAwPT09ay5XT1JLRVJfSUQmJnQmJihrLldPUktFUl9JRD10LndvcmtlcklkKTtpZihcInN0cmluZ1wiPT10eXBlb2YgdC5pbnB1dClmLnBvc3RNZXNzYWdlKHt3b3JrZXJJZDprLldPUktFUl9JRCxyZXN1bHRzOmsucGFyc2UodC5pbnB1dCx0LmNvbmZpZyksZmluaXNoZWQ6ITB9KTtlbHNlIGlmKGYuRmlsZSYmdC5pbnB1dCBpbnN0YW5jZW9mIEZpbGV8fHQuaW5wdXQgaW5zdGFuY2VvZiBPYmplY3Qpe3ZhciByPWsucGFyc2UodC5pbnB1dCx0LmNvbmZpZyk7ciYmZi5wb3N0TWVzc2FnZSh7d29ya2VySWQ6ay5XT1JLRVJfSUQscmVzdWx0czpyLGZpbmlzaGVkOiEwfSl9fTprLldPUktFUlNfU1VQUE9SVEVEJiYoZT1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKSxzPWUubGVuZ3RoP2VbZS5sZW5ndGgtMV0uc3JjOlwiXCIsZG9jdW1lbnQuYm9keT9kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLGZ1bmN0aW9uKCl7YT0hMH0sITApOmE9ITApLChjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSkuY29uc3RydWN0b3I9YywocC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShsLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPXAsKF8ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoXy5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1fLChnLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSkuY29uc3RydWN0b3I9ZyxrfSk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGF0YS9hYngtZGF0YS5jc3Y/dj1hNjlhY2VcIjsiLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCB7IHN0YXRlTW9kdWxlIGFzIFMgfSBmcm9tICdzdGF0ZWZ1bC1kZWFkJztcbmltcG9ydCBQUyBmcm9tICdwdWJzdWItc2V0dGVyJztcbmltcG9ydCB0aXBweSBmcm9tICd0aXBweS5qcyc7XG5pbXBvcnQgJy4vdGlwcHktc3R5bGVzLnNjc3MnO1xuXG5jb25zdCBtaW5Vbml0RGltZW5zaW9uID0gMzA7IC8vIG1pbmltdW0gcHggaGVpZ2h0L3dpZHRoIGFjY2VwdGVkIGZvciB0b3VjaGFibGUgZWxlbWVudFxuY29uc3QgaGVhZGVySGVpZ2h0ID0gMS41ICogbWluVW5pdERpbWVuc2lvbjsgLy8gdGhlIGhlaWdodCBvZiB0aGUgcGhhc2UtaGVhZGluZyBiYXJzIHJlbGF0aXZlIHRvIG1pblVuaXREaW1lbnNpb25cbmNvbnN0IHVuaXRQYWRkaW5nID0gMjtcbmNvbnN0IGhlYWRlcnMgPSBbXG4gICAgWydQaGFzZSAxJywgJ1AxJ10sXG4gICAgWydQaGFzZSAyJywgJ1AyJ10sXG4gICAgWydQaGFzZSAzJywgJ1AzJ10sXG4gICAgWydBcHBsaWNhdGlvbicsICdOREEnXSxcbiAgICBbJ0FwcHJvdmVkJywgJyYjMTAwMDQnXVxuXTtcblxuY29uc3QgZHVyYXRpb24gPSAxMjAwO1xuXG52YXIgIGlzRmlyc3RMb2FkID0gdHJ1ZTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpelZpZXcgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBwcmVyZW5kZXIoKSB7IC8vIHRoaXMgcHJlcmVuZGVyIGlzIGNhbGxlZCBhcyBwYXJ0IG9mIHRoZSBzdXBlciBjb25zdHJ1Y3RvclxuICAgICAgICAvKiBhbnkgY2hpbGRyZW4gbmVlZCB0byBiZSBpbnN0YXRpYXRlZCBoZXJlICovXG5cbiAgICAgICAgdGhpcy5taW5Vbml0RGltZW5zaW9uID0gbWluVW5pdERpbWVuc2lvbjtcbiAgICAgICAgdGhpcy5oZWFkZXJIZWlnaHQgPSBoZWFkZXJIZWlnaHQ7XG4gICAgICAgIHRoaXMudW5pdFBhZGRpbmcgPSB1bml0UGFkZGluZztcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gaGVhZGVycztcbiAgICAgICAgdGhpcy5waGFzZU1lbWJlcnMgPSBbMCwxXS5tYXAoKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFswLCAuLi5oZWFkZXJzXS5tYXAoZCA9PiB7IC8vIHdpbGwga2VlcCB0cmFjayBvZiB3aGljaCBkcnVncyBhcmUgaW4gd2hpY2ggY29sdW1uIHNvIHRoYXQgYW5pbWF0aW9ucyBjYW4gYmUgdGltZWQgYW5kIHNvIHRoYXQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkcnVncyB0aGF0IHN0YXkgaW4gdGhlaXIgY29sdW1uIGZyb20gb25lIHN0ZXAgdG8gYW5vdGhlciBjYW4gYmUgcGxhY2VkIGJlZm9yZSB0aG9zZSBlbnRlcmluZyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbHVtblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogZCA9PT0gMCA/IHRoaXMubW9kZWwudW5uZXN0ZWREYXRhLm1hcChkcnVnID0+IGRydWcuaWQpIDogW10sXG4gICAgICAgICAgICAgICAgICAgIGRpc2NvbnRpbnVlZDogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pOyAgIFxuICAgICAgICAgICAgXG4gICAgICAgIHRoaXMuaGVpZ2h0TmVlZGVkID0gKCB0aGlzLm1vZGVsLm1heEFjdGl2ZSArIHRoaXMubW9kZWwubWF4RGlzY29udGludWVkICsgMSApICogKCB0aGlzLm1pblVuaXREaW1lbnNpb24gKyB0aGlzLnVuaXRQYWRkaW5nICkgKyB0aGlzLmhlYWRlckhlaWdodCArIHRoaXMudW5pdFBhZGRpbmcgKyA1MSArIDkwICsgNjEgKyA0MDtcbiAgICAgICAgLy9jb250YWluZXJcbiAgICAgICAgdmFyIHZpZXcgPSBzdXBlci5wcmVyZW5kZXIoKTtcbiAgICAgICAgaWYgKHRoaXMucHJlcmVuZGVyZWQgJiYgIXRoaXMucmVyZW5kZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3OyAvLyBpZiBwcmVyZW5kZXJlZCBhbmQgbm8gbmVlZCB0byByZW5kZXIgKG5vIGRhdGEgbWlzbWF0Y2gpXG4gICAgICAgIH1cblxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbmRlckNvbHVtbnMoY29udCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY29sdW1uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgY29sdW1uLmNsYXNzTGlzdC5hZGQocy5jb2x1bW4pO1xuICAgICAgICAgICAgICAgIGxldCBwbGFjZWhvbGRlck51bWJlciA9IGNvbnQubmFtZSA9PT0gcy5hY3RpdmVDb250YWluZXIgPyB0aGlzLm1vZGVsLm1heEFjdGl2ZSA6IHRoaXMubW9kZWwubWF4RGlzY29udGludWVkO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGxhY2Vob2xkZXJOdW1iZXI7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXIuY2xhc3NMaXN0LmFkZChzLmRydWcsIHMuZHJ1Z0VtcHR5KTtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmFwcGVuZENoaWxkKHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udC5hcHBlbmRDaGlsZChjb2x1bW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29udHJvbHNcbiAgICAgICAgdmFyIGNvbnRyb2xDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY29udHJvbENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMuY29udHJvbENvbnRhaW5lcik7XG5cbiAgICAgICAgICAgIC8vIHBsYXlCdXR0b25cbiAgICAgICAgICAgIHZhciBwbGF5QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICBwbGF5QnV0dG9uLmNsYXNzTGlzdC5hZGQocy5wbGF5QnV0dG9uKTtcbiAgICAgICAgICAgIHBsYXlCdXR0b24udHlwZSA9IFwiYnV0dG9uXCI7XG4gICAgICAgICAgICBwbGF5QnV0dG9uLnRpdGxlID0gJ1BsYXknO1xuICAgICAgICAgICAgY29udHJvbENvbnRhaW5lci5hcHBlbmRDaGlsZChwbGF5QnV0dG9uKTtcblxuICAgICAgICAgICAgLy95ZWFyc1xuICAgICAgICAgICAgdGhpcy5tb2RlbC55ZWFycy5mb3JFYWNoKCh5ZWFyLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHllYXJCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgICAgICB5ZWFyQnV0dG9uLmNsYXNzTGlzdC5hZGQocy55ZWFyQnV0dG9uLCBgJHsgaSA9PT0gMCA/IHMueWVhckJ1dHRvbkFjdGl2ZSA6ICdub3BlJ31gKTtcbiAgICAgICAgICAgICAgICB5ZWFyQnV0dG9uLnR5cGUgPSBcImJ1dHRvblwiO1xuICAgICAgICAgICAgICAgIHllYXJCdXR0b24udmFsdWUgPSB5ZWFyO1xuICAgICAgICAgICAgICAgIHllYXJCdXR0b24udGV4dENvbnRlbnQgPSB5ZWFyO1xuICAgICAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXIuYXBwZW5kQ2hpbGQoeWVhckJ1dHRvbik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB2aWV3LmFwcGVuZENoaWxkKGNvbnRyb2xDb250YWluZXIpO1xuXG4gICAgICAgIC8vIGNvbnRhaW5lclxuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMuY29udGFpbmVyKTtcbiAgICAgICAgdmlldy5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAgIC8vIGFjdGl2ZSBjb250YWluZXJcbiAgICAgICAgdmFyIGFjdGl2ZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBhY3RpdmVDb250YWluZXIuY2xhc3NMaXN0LmFkZChzLmFjdGl2ZUNvbnRhaW5lcik7XG4gICAgICAgIGFjdGl2ZUNvbnRhaW5lci5uYW1lID0gcy5hY3RpdmVDb250YWluZXI7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChhY3RpdmVDb250YWluZXIpO1xuXG4gICAgICAgIC8vIGhlYWRlciBjb250YWluZXJcbiAgICAgICAgdmFyIGhlYWRlckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBoZWFkZXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChzLmhlYWRlckNvbnRhaW5lcik7XG4gICAgICAgIGhlYWRlckNvbnRhaW5lci5uYW1lID0gcy5oZWFkZXJDb250YWluZXI7XG4gICAgICAgIGhlYWRlcnMuZm9yRWFjaChwaGFzZSA9PiB7XG4gICAgICAgICAgICB2YXIgaGVhZGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBoZWFkZXJEaXYuY2xhc3NMaXN0LmFkZChzLmhlYWRlckRpdik7XG4gICAgICAgICAgICBoZWFkZXJEaXYuaW5uZXJIVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtzLnBoYXNlRnVsbH1cIj4ke3BoYXNlWzBdLnRvVXBwZXJDYXNlKCl9PC9zcGFuPjxzcGFuIGNsYXNzPVwiJHtzLnBoYXNlQWJicn1cIj4ke3BoYXNlWzFdfTwvc3Bhbj5gO1xuICAgICAgICAgICAgaGVhZGVyQ29udGFpbmVyLmFwcGVuZENoaWxkKGhlYWRlckRpdik7XG4gICAgICAgIH0pO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaGVhZGVyQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBkaXNjb250aW51ZWQgY29udGFpbmVyXG4gICAgICAgIHZhciBkaXNjb250aW51ZWRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZGlzY29udGludWVkQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQocy5kaXNjb250aW51ZWRDb250YWluZXIpO1xuICAgICAgICBkaXNjb250aW51ZWRDb250YWluZXIubmFtZSA9IHMuZGlzY29udGludWVkQ29udGFpbmVyO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZGlzY29udGludWVkQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBjb2x1bW5zXG4gICAgICAgIHJlbmRlckNvbHVtbnMuY2FsbCh0aGlzLCBhY3RpdmVDb250YWluZXIpO1xuICAgICAgICByZW5kZXJDb2x1bW5zLmNhbGwodGhpcywgZGlzY29udGludWVkQ29udGFpbmVyKTtcblxuXG5cbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICAgIHBvcHVsYXRlUGxhY2Vob2xkZXJzKHllYXJJbmRleCwgb2JzZXJ2YXRpb24pIHtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5wcmV2aW91c1N0YXR1c2VzKTtcblxuICAgICAgICBmdW5jdGlvbiBhZGRJZHNBbmRDbGFzc2VzKHBsYWNlaG9sZGVyLCBkcnVnLCBjb250YWluZXJJbmRleCl7XG4gICAgICAgICAgICBwbGFjZWhvbGRlci5pZCA9IGRydWcuaWQ7XG4gICAgICAgICAgICBwbGFjZWhvbGRlci5jbGFzc0xpc3QucmVtb3ZlKHMuZHJ1Z0VtcHR5KTtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyLmNsYXNzTGlzdC5hZGQoYCR7IGRydWcuZ3JhbU5lZ2F0aXZlID8gcy5ncmFtTmVnYXRpdmUgOiAnbm9wZScgfWAsIGAkeyBkcnVnLm5vdmVsID8gcy5ub3ZlbCA6ICdub3BlJyB9YCwgYCR7IGRydWcudXJnZW50ID8gcy51cmdlbnQgOiAnbm9wZScgfWApO1xuICAgICAgICAgICAgaWYgKCBjb250YWluZXJJbmRleCA9PT0gMSApe1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyLmNsYXNzTGlzdC5hZGQocy5pc0Rpc2NvbnRpbnVlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwbGFjZWhvbGRlci5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcHktY29udGVudCcsYDxzdHJvbmc+JHtkcnVnLm5hbWV9PC9zdHJvbmc+PGJyIC8+JHtkcnVnLmNvbXBhbnl9YCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWN0aXZlQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLmFjdGl2ZUNvbnRhaW5lciksXG4gICAgICAgICAgICBkaXNjb250aW51ZWRDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMuZGlzY29udGludWVkQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBjb3B5IGluZGV4IDEgb2YgcGhhc2VNZW1iZXJzIHRvIGluZGV4IDAuIEpTT04gcGFyc2Uvc3RyaW5naWZ5IHRvIG1ha2UgZGVlcCBjb3B5XG4gICAgICAgIHRoaXMucGhhc2VNZW1iZXJzWzBdID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnBoYXNlTWVtYmVyc1sxXSkpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnBoYXNlTWVtYmVycywgdGhpcy5wcmV2aW91c1N0YXR1c2VzKTtcbiAgICAgICAgW2FjdGl2ZUNvbnRhaW5lciwgZGlzY29udGludWVkQ29udGFpbmVyXS5mb3JFYWNoKChjb250YWluZXIsIGspID0+IHtcbiAgICAgICAgICAgIHZhciBpc0Rpc2NvbnRpbnVlZCA9IGsgPT09IDAgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMubW9kZWwuZGF0YVt5ZWFySW5kZXhdLm9ic2VydmF0aW9uc1tvYnNlcnZhdGlvbl0uZm9yRWFjaCgocGhhc2UsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRQaGFzZU1lbWJlcnNJbmRleChpZCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBoYXNlTWVtYmVyc1sxXVtpICsgMV1bKCBpc0Rpc2NvbnRpbnVlZCA/ICdkaXNjb250aW51ZWQnIDogJ2FjdGl2ZScgKV0uaW5kZXhPZihpZCkgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZmlsdGVyIGRydWdzIGJ5IHdoZXRoZXIgdGhleSdyZSBhY3RpdmUgb3IgZGlzY29udGludWVkOyBhbHNvIHNvcnQgdGhlbSBiYXNlZCBvbiB3aGV0aGVyIHRoZXkgd2VyZSBhbHJlYWR5IGluIHRoZSBjb2x1bW5cbiAgICAgICAgICAgICAgICAvLyAgdGhleSBhcmUgYWJvdXQgdG8gYmUgcGxhY2VkIGluXG4gICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gcGhhc2UudmFsdWVzLmZpbHRlcihkID0+IGsgPT09IDAgPyAhZFt0aGlzLm1vZGVsLnllYXJzW3llYXJJbmRleF1dW29ic2VydmF0aW9uXS5pc0Rpc2NvbnRpbnVlZCA6IGRbdGhpcy5tb2RlbC55ZWFyc1t5ZWFySW5kZXhdXVtvYnNlcnZhdGlvbl0uaXNEaXNjb250aW51ZWQpLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgIC8qIEVOVEVSSU5HIC8gTk9UIEVOVEVSSU5HICovXG4gICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByZXZpb3VzU3RhdHVzZXMgPT09IHVuZGVmaW5lZCApeyAvLyBzaG91bGQgYmUgdHJ1ZSBvbmx5IG9uIGZpcnN0IGxvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmlkIC0gYi5pZDsgLy8gbG93ZXIgaWRzIGZpcnN0XG4gICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICBpZiAoICF0aGlzLnByZXZpb3VzU3RhdHVzZXNbYS5pZF0gJiYgIXRoaXMucHJldmlvdXNTdGF0dXNlc1tiLmlkXSApeyAvLyBib3RoIGFyZSBlbnRlcmluZy4gY29lcmNpbmcgIXRydWUgdG8gY2F0Y2ggdW5kZWZpbmVkIG9yIHplcm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmlkIC0gYi5pZDsgIC8vIGxvd2VyIGlkcyBmaXJzdFxuICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhdGhpcy5wcmV2aW91c1N0YXR1c2VzW2EuaWRdICkgeyAvLyBhIGlzIGVudGVyaW5nIGJ1dCBiIGlzIG5vdC4gY29lcmNpbmcgIXRydWUgdG8gY2F0Y2ggdW5kZWZpbmVkIG9yIHplcm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgIGlmICggIXRoaXMucHJldmlvdXNTdGF0dXNlc1tiLmlkXSApIHsgLy8gYiBpcyBlbnRlcmluZyBidXQgYSBpcyBub3QuIGNvZXJjaW5nICF0cnVlIHRvIGNhdGNoIHVuZGVmaW5lZCBvciB6ZXJvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgLyogU1RBWUlORyBJTiBDT0xVTU4gLyBOT1QgU1RBWUlORyBJTiBDT0xVTU4gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLmNvbHVtbiBpcyAxLWluZGV4ZWQsIGkgaXMgemVybyBpbmRleGVkXG4gICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5wcmV2aW91c1N0YXR1c2VzW2EuaWRdLmNvbHVtbiA9PT0gaSArIDEgJiYgdGhpcy5wcmV2aW91c1N0YXR1c2VzW2EuaWRdLmlzRGlzY29udGludWVkID09PSBpc0Rpc2NvbnRpbnVlZCApIHsgLy8gYSBpcyBpbiBjdXJyZW50IGNvbHVtbiBhbmQgbWF0Y2hlcyBjdXJyZW50IGRpc2NvbnRpbnVlZCBzdGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5wcmV2aW91c1N0YXR1c2VzW2IuaWRdLmNvbHVtbiA9PT0gaSArIDEgJiYgdGhpcy5wcmV2aW91c1N0YXR1c2VzW2IuaWRdLmlzRGlzY29udGludWVkID09PSBpc0Rpc2NvbnRpbnVlZCApIHsgLy8gYWxzbyB0cnVlIGZvciBiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpLmUuIEJPVEggQVJFIElOIFNBTUUgQ09MVU1OXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRQaGFzZU1lbWJlcnNJbmRleC5jYWxsKHRoaXMsIGEuaWQpIDwgZ2V0UGhhc2VNZW1iZXJzSW5kZXguY2FsbCh0aGlzLCBiLmlkKSA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90IGFsc28gdHJ1ZSBmb3IgYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMucHJldmlvdXNTdGF0dXNlc1tiLmlkXS5jb2x1bW4gPT09IGkgKyAxICYmIHRoaXMucHJldmlvdXNTdGF0dXNlc1tiLmlkXS5pc0Rpc2NvbnRpbnVlZCA9PT0gaXNEaXNjb250aW51ZWQgKSB7IC8vIGIgaXMgaW4gY3VycmVudCBjb2x1bW4gYW5kIG1hdGNoZXMgY3VycmVudCBkaXNjb250aW51ZWQgc3RhdGUuIG5vdCB0cnVlIGZvciBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLnByZXZpb3VzU3RhdHVzZXNbYS5pZF0uY29sdW1uID09PSBpICsgMSApeyAvLyBBIGlzIGluIGN1cnJlbnQgY29sdW1uIGJ1dCBjaGFuZ2luZyBzdGF0dXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMucHJldmlvdXNTdGF0dXNlc1tiLmlkXS5jb2x1bW4gPT09IGkgKyAxICYmIHRoaXMucHJldmlvdXNTdGF0dXNlc1tiLmlkXS5pc0Rpc2NvbnRpbnVlZCAhPT0gaXNEaXNjb250aW51ZWQgKXsgLy8gc2FtZSBpcyB0cnVlIGZvciBCXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmlkIC0gYi5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLnByZXZpb3VzU3RhdHVzZXNbYi5pZF0uY29sdW1uID09PSBpICsgMSApeyAvLyBCIGlzIGFsc28gaW4gY3VycmVudCBjb2x1bW4gYnV0IGlzIG5vdCBjaGFuZ2luZyBzdGF0dXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMucHJldmlvdXNTdGF0dXNlc1tiLmlkXS5jb2x1bW4gPT09IGkgKyAxICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvY2VzcyBvZiBlbGltaW5hdGlvbiwgYmVsb3cgYm90aCBhIGFuZCBiIGhhdmUgYmVlbiBwcmVzZW50IGJ1dCBhcmUgY29taW5nIGZyb20gY29sdW1ucyBvdGhlciB0aGFuIHRoZSBjdXJyZW50XG4gICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5wcmV2aW91c1N0YXR1c2VzW2EuaWRdLmNvbHVtbiA+IHRoaXMucHJldmlvdXNTdGF0dXNlc1tiLmlkXS5jb2x1bW4gKSB7IC8vIHNvcnQgZHJ1Z3MgY29taW5nIGZyb20gZ3JlYXRlciBjb2x1bW5zIGZpcnN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5wcmV2aW91c1N0YXR1c2VzW2EuaWRdLmNvbHVtbiA8IHRoaXMucHJldmlvdXNTdGF0dXNlc1tiLmlkXS5jb2x1bW4gKSB7IC8vIHNvcnQgZHJ1Z3MgY29taW5nIGZyb20gbGVzc2VyIGNvbHVtbnMgbGFzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgIC8vIHByb2Nlc3Mgb2YgZWxpbWluYXRpb24sIGJlbG93IGJvdGggYW5kIGIgY29taW5nIGZyb20gdGhlIHNhbWUgY29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5wcmV2aW91c1N0YXR1c2VzW2EuaWRdLmlzRGlzY29udGludWVkID09PSBpc0Rpc2NvbnRpbnVlZCAmJiB0aGlzLnByZXZpb3VzU3RhdHVzZXNbYi5pZF0uaXNEaXNjb250aW51ZWQgIT09IGlzRGlzY29udGludWVkICkgeyAvLyBBIHdhcyBkaXNjb250aW51ZWQvbm90RGlzY29udGludWVkOyBCIHdhcyBub3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLnByZXZpb3VzU3RhdHVzZXNbYi5pZF0uaXNEaXNjb250aW51ZWQgPT09IGlzRGlzY29udGludWVkICYmIHRoaXMucHJldmlvdXNTdGF0dXNlc1thLmlkXS5pc0Rpc2NvbnRpbnVlZCAhPT0gaXNEaXNjb250aW51ZWQgKSB7IC8vIEIgd2FzIGRpc2NvbnRpbnVlZC9ub3REaXNjb250aW51ZWQ7IEEgd2FzIG5vdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmlkIC0gYi5pZDsgLy8gbG93ZXIgaWRzIGZpcnN0XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4gPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmNvbHVtbilbaV07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gY2xlYXIgdGhlIHBoYXNlTWVtYmVyIGFycmF5IG5vdyB0aGF0IGl0cyBwcmV2aW91cyBjb250ZW50cyBoYXZlIGJlZW4gdXRpbGl6ZWRcbiAgICAgICAgICAgICAgICB0aGlzLnBoYXNlTWVtYmVyc1sxXVtpICsgMV1bICggayA9PT0gMCA/ICdhY3RpdmUnIDogJ2Rpc2NvbnRpbnVlZCcgKSBdLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWQuZm9yRWFjaCgoZHJ1ZywgaikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBjb2x1bW4ucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmRydWcpW2pdO1xuICAgICAgICAgICAgICAgICAgICBhZGRJZHNBbmRDbGFzc2VzKHBsYWNlaG9sZGVyLCBkcnVnLCBrKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5waGFzZU1lbWJlcnNbMV1baSArIDFdWyAoIGsgPT09IDAgPyAnYWN0aXZlJyA6ICdkaXNjb250aW51ZWQnICkgXS5wdXNoKGRydWcuaWQpOyAvLyBwbGFjZSB0aGUgZHJ1ZyBpbiB0aGUgcHJvcGVyIGJ1Y2tldCB0cmFja2luZyBpdHMgY29sdW1uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5waGFzZU1lbWJlcnNbMV1bMF0uYWN0aXZlID0gdGhpcy5tb2RlbC51bm5lc3RlZERhdGEuZmlsdGVyKGQgPT4gZFsrdGhpcy5jdXJyZW50WWVhcl1bdGhpcy5jdXJyZW50T2JzZXJ2YXRpb25dLmNvbHVtbiA9PT0gMCkubWFwKGVhY2ggPT4gZWFjaC5pZCk7XG4gICAgICAgICAgICAgLy8gICBjb25zb2xlLmxvZyh0aGlzLnBoYXNlTWVtYmVycyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgIH1cbiAgICBzZXRZZWFyU3RhdGUoZGF0YSwgaXNSZXN0YXJ0KXtcbiAgICAgICAgdmFyIHN0YXRlQmVmb3JlQ2hhbmdlID0gUy5nZXRTdGF0ZSgneWVhcicpO1xuICAgICAgICBpZiAoIHN0YXRlQmVmb3JlQ2hhbmdlICYmICFpc1Jlc3RhcnQgKXtcbiAgICAgICAgICAgIHRoaXMucmVjb3JkU3RhdHVzZXMoc3RhdGVCZWZvcmVDaGFuZ2VbMF0sIHN0YXRlQmVmb3JlQ2hhbmdlWzJdKTtcbiAgICAgICAgfVxuICAgICAgICBTLnNldFN0YXRlKCd5ZWFyJywgZGF0YSk7XG4gICAgICAgIHRoaXMuY3VycmVudFllYXIgPSBkYXRhWzBdO1xuICAgICAgICB0aGlzLmN1cnJlbnRPYnNlcnZhdGlvbiA9IGRhdGFbMl07XG5cbiAgICB9XG4gICAgaW5pdCgpIHtcbiAgICAgICAgUFMuc2V0U3VicyhbXG4gICAgICAgICAgICBbJ3Jlc2l6ZScsIHRoaXMuY2hlY2tIZWlnaHQuYmluZCh0aGlzKV0sXG4gICAgICAgICAgICBbJ3llYXInLCB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpXSxcbiAgICAgICAgICAvLyAgWydpc0JhY2t3YXJkJywgdGhpcy50b2dnbGVJc0JhY2t3YXJkLmJpbmQodGhpcyldLFxuICAgICAgICAgICAvLyBbJ2lzU2FtZVllYXInLCB0aGlzLnRvZ2dsZUlzU2FtZVllYXIuYmluZCh0aGlzKV1cbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuc2V0WWVhclN0YXRlKFt0aGlzLm1vZGVsLnllYXJzWzBdLCBudWxsLCAxXSk7XG4gICAgICAgIHRoaXMubm9uRW1wdHlEcnVncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5kcnVnICsgJzpub3QoLicgKyBzLmRydWdFbXB0eSArICcpJyk7XG4gICAgICAgIHRoaXMuY2hlY2tIZWlnaHQoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplWWVhckJ1dHRvbnMoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplUGxheUJ1dHRvbigpO1xuICAgIH1cbiAgIC8qIHRvZ2dsZUlzU2FtZVllYXIobXNnLGRhdGEpe1xuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5jb250cm9sQ29udGFpbmVyIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy5jb250cm9sQ29udGFpbmVyKTtcbiAgICAgICAgaWYgKCBkYXRhICl7XG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChzLmlzU2FtZVllYXJTZWxlY3RlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShzLmlzU2FtZVllYXJTZWxlY3RlZCk7XG4gICAgICAgIH1cbiAgICB9Ki9cbiAgLyogIHRvZ2dsZUlzQmFja3dhcmQobXNnLCBkYXRhKXtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuY29udHJvbENvbnRhaW5lciB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMuY29udHJvbENvbnRhaW5lcik7XG4gICAgICAgIGlmICggZGF0YSApe1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQocy5pc01vdmluZ0JhY2t3YXJkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKHMuaXNNb3ZpbmdCYWNrd2FyZCk7XG4gICAgICAgIH1cbiAgICB9Ki9cbiAgICBpbml0aWFsaXplUGxheUJ1dHRvbigpe1xuICAgICAgICB0aGlzLnBsYXlZZWFyc0JpbmQgPSB0aGlzLnBsYXlZZWFycy5iaW5kKHRoaXMpO1xuICAgICAgICB2YXIgcGxheUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy5wbGF5QnV0dG9uKTtcbiAgICAgICAgcGxheUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGxheVllYXJzQmluZCk7XG4gICAgfVxuICAgIHBhdXNlUGxheSgpe1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMueWVhckJ1dHRvblByZXZpb3VzKS5jbGFzc0xpc3QucmVtb3ZlKHMueWVhckJ1dHRvblByZXZpb3VzKTtcbiAgICAgICAgdGhpcy5wbGF5QnRuLmJsdXIoKTtcbiAgICAgICAgdGhpcy5wbGF5QnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5wYXVzZVBsYXlCaW5kKTtcbiAgICAgICAgUy5zZXRTdGF0ZSgnaXNQYXVzZWQnLCB0cnVlKTtcbiAgICAgICAgdGhpcy5wbGF5QnRuLmNsYXNzTGlzdC5hZGQocy53aWxsUGF1c2UpO1xuICAgIH1cbiAgICBkaXNhYmxlWWVhckJ1dHRvbnMoKXtcbiAgICAgICAgdGhpcy55ZWFyQnV0dG9ucyA9IHRoaXMueWVhckJ1dHRvbnMgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLnllYXJCdXR0b24pO1xuICAgICAgICB0aGlzLnllYXJCdXR0b25zLmZvckVhY2goZnVuY3Rpb24oYnRuKXtcbiAgICAgICAgICAgIGJ0bi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywnZGlzYWJsZWQnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRpc2FibGVQbGF5QnV0dG9uKCl7XG4gICAgICAgIHRoaXMucGxheUJ0biA9IHRoaXMucGxheUJ0biB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMucGxheUJ1dHRvbik7XG4gICAgICAgIHRoaXMucGxheUJ0bi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywnZGlzYWJsZWQnKTtcbiAgICB9XG4gICAgZW5hYmxlUGxheUJ1dHRvbigpe1xuICAgICAgICB0aGlzLnBsYXlCdG4gPSB0aGlzLnBsYXlCdG4gfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLnBsYXlCdXR0b24pO1xuICAgICAgICB0aGlzLnBsYXlCdG4ucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgIH1cbiAgICBlbmFibGVZZWFyQnV0dG9ucygpe1xuICAgICAgICB0aGlzLnllYXJCdXR0b25zID0gdGhpcy55ZWFyQnV0dG9ucyB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMueWVhckJ1dHRvbik7XG4gICAgICAgIHRoaXMueWVhckJ1dHRvbnMuZm9yRWFjaChmdW5jdGlvbihidG4pe1xuICAgICAgICAgICAgYnRuLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBsYXlZZWFycyhldmVudCl7XG4gICAgICAgIFMuc2V0U3RhdGUoJ2lzUGF1c2VkJywgZmFsc2UpO1xuICAgICAgICBTLnNldFN0YXRlKCdpc0JhY2t3YXJkJywgZmFsc2UpO1xuICAgICAgIC8vIFMuc2V0U3RhdGUoJ2lzU2FtZVllYXInLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuZGlzYWJsZVllYXJCdXR0b25zKCk7XG4gICAgICAgIHRoaXMucGxheUJ0biA9IHRoaXMucGxheUJ0biB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMucGxheUJ1dHRvbik7XG4gICAgICAgIHRoaXMucGxheUJ0bi5ibHVyKCk7XG4gICAgICAgIGZ1bmN0aW9uIG5leHRQcm9taXNlKCl7XG4gICAgICAgICAgICBpZiAoIFMuZ2V0U3RhdGUoJ2lzUGF1c2VkJykgKXtcbiAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZVllYXJCdXR0b25zKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVQYXVzZU9wdGlvbigpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRZZWFyKys7XG4gICAgICAgICAgICBpZiAoIGN1cnJlbnRZZWFyIDw9IHRoaXMubW9kZWwueWVhcnNbdGhpcy5tb2RlbC55ZWFycy5sZW5ndGggLSAxXSApe1xuICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKHdyYXBwZXJSZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFllYXJTdGF0ZShbY3VycmVudFllYXIsIHJlc29sdmUsIDBdKTsgXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRZZWFyU3RhdGUoW2N1cnJlbnRZZWFyLCB3cmFwcGVyUmVzb2x2ZSwgMV0pO1xuICAgICAgICAgICAgICAgICAgICB9KTsgICAgXG4gICAgICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRQcm9taXNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93UmVwbGF5T3B0aW9uLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmFibGVZZWFyQnV0dG9ucygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBldmVudCAhPT0gJ3JlY2lwcm9jYWwnICl7XG4gICAgICAgICAgICB0aGlzLnNob3dQYXVzZU9wdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgY3VycmVudFllYXIgPSBTLmdldFN0YXRlKCd5ZWFyJylbMF0sXG4gICAgICAgICAgICBjdXJyZW50T2JzZXJ2YXRpb24gPSBTLmdldFN0YXRlKCd5ZWFyJylbMl07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjdXJyZW50WWVhciwgY3VycmVudE9ic2VydmF0aW9uKTtcbiAgICAgICAgLy8gaWZuIGlzIG9uIGxhc3Qgb2JzZXJ2YXRpb24gb2YgdGhlIGxhc3QgeWVhclxuICAgICAgICBpZiAoIHRoaXMubW9kZWwueWVhcnMuaW5kZXhPZigrY3VycmVudFllYXIpID09PSB0aGlzLm1vZGVsLnllYXJzLmxlbmd0aCAtIDEgJiYgY3VycmVudE9ic2VydmF0aW9uID09PSAxICl7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZVJlcGxheU9wdGlvbigpO1xuICAgICAgICAgICAgaXNGaXJzdExvYWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jbGVhckF0dHJpYnV0ZXNBbmREZXRhaWxzKCk7XG4gICAgICAgICAgICB0aGlzLnNldFllYXJTdGF0ZShbdGhpcy5tb2RlbC55ZWFyc1swXSwgbnVsbCwgMF0sIHRydWUpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5WWVhcnMoJ3JlY2lwcm9jYWwnKTtcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uICogMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIGN1cnJlbnRPYnNlcnZhdGlvbiA9PT0gMCApe1xuICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggUy5nZXRTdGF0ZSgnaXNQYXVzZWQnKSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmFibGVZZWFyQnV0dG9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFllYXJTdGF0ZShbY3VycmVudFllYXIsIHJlc29sdmUsIDFdKTsgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS50aGVuKHJlc29sdXRpb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoICFTLmdldFN0YXRlKCdpc1BhdXNlZCcpICYmIHJlc29sdXRpb24gPT09IHRydWUgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQcm9taXNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCAhUy5nZXRTdGF0ZSgnaXNQYXVzZWQnKSApe1xuICAgICAgICAgICAgICAgICAgICBuZXh0UHJvbWlzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gXG4gICAgICAgIH1cbiAgICAgICAgXG5cbiAgICB9XG4gICAgc2hvd1JlcGxheU9wdGlvbigpe1xuICAgICAgICB0aGlzLnJlcGxheUJ0biA9IHRoaXMucmVwbGF5QnRuIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy5wbGF5QnV0dG9uKTtcbiAgICAgICAgdGhpcy5yZXBsYXlCdG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBhdXNlUGxheUJpbmQpO1xuICAgICAgICB0aGlzLnJlcGxheUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGxheVllYXJzQmluZCk7XG4gICAgICAgIHRoaXMucmVwbGF5QnRuLmNsYXNzTGlzdC5hZGQocy5yZXBsYXkpO1xuICAgICAgICB0aGlzLnJlcGxheUJ0bi5jbGFzc0xpc3QucmVtb3ZlKHMucGF1c2UpO1xuICAgICAgICB0aGlzLnJlcGxheUJ0bi5jbGFzc0xpc3QucmVtb3ZlKHMud2lsbFBhdXNlKTtcbiAgICAgICAgdGhpcy5yZXBsYXlCdG4udGl0bGUgPSBcIlJlcGxheVwiO1xuICAgIH1cbiAgICBzaG93UGF1c2VPcHRpb24oKXtcbiAgICAgICAgdGhpcy5yZXBsYXlCdG4gPSB0aGlzLnJlcGxheUJ0biB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMucGxheUJ1dHRvbik7XG4gICAgICAgIHRoaXMucGF1c2VQbGF5QmluZCA9IHRoaXMucGF1c2VQbGF5LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMucmVtb3ZlUmVwbGF5T3B0aW9uKCk7XG4gICAgICAgIHRoaXMucmVwbGF5QnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5wbGF5WWVhcnNCaW5kKTtcbiAgICAgICAgdGhpcy5yZXBsYXlCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBhdXNlUGxheUJpbmQpO1xuICAgICAgICB0aGlzLnJlcGxheUJ0bi5jbGFzc0xpc3QuYWRkKHMucGF1c2UpO1xuICAgICAgICB0aGlzLnJlcGxheUJ0bi5jbGFzc0xpc3QucmVtb3ZlKHMucmVwbGF5KTtcbiAgICAgICAgdGhpcy5yZXBsYXlCdG4udGl0bGUgPSBcIlBhdXNlXCI7XG4gICAgfVxuICAgIHJlbW92ZVBhdXNlT3B0aW9uKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZW1vdmluZyBwYXVzZSBvcHRpb24nKTtcbiAgICAgICAgdGhpcy5yZXBsYXlCdG4gPSB0aGlzLnJlcGxheUJ0biB8fCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMucGxheUJ1dHRvbik7XG4gICAgICAgIHRoaXMucmVwbGF5QnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5wYXVzZVBsYXlCaW5kKTtcbiAgICAgICAgdGhpcy5yZXBsYXlCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnBsYXlZZWFyc0JpbmQpO1xuICAgICAgICB0aGlzLnJlcGxheUJ0bi5jbGFzc0xpc3QucmVtb3ZlKHMucGF1c2UpO1xuICAgICAgICB0aGlzLnJlcGxheUJ0bi5jbGFzc0xpc3QucmVtb3ZlKHMud2lsbFBhdXNlKTtcbiAgICAgICAgdGhpcy5yZXBsYXlCdG4udGl0bGUgPSBcIlBsYXlcIjtcbiAgICB9XG4gICAgcmVtb3ZlUmVwbGF5T3B0aW9uKCl7XG4gICAgICAgIHRoaXMucmVwbGF5QnRuID0gdGhpcy5yZXBsYXlCdG4gfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLnBsYXlCdXR0b24pO1xuICAgICAgICB0aGlzLnJlcGxheUJ0bi5jbGFzc0xpc3QucmVtb3ZlKHMucmVwbGF5KTtcbiAgICAgICAgLy90aGlzLnJlcGxheUJ0bi50aXRsZSA9IFwiUGxheVwiO1xuICAgIH1cbiAgICBjaGVja0hlaWdodCgpIHtcblxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIC8qIGFkZCAnc3F1YXQnIGNsYXNzIHRvIGJvZHkgZm9yIHNtYWxsIHNjcmVlbnMgKi9cbiAgICAgICAgaWYgKHdpbmRvdy5pbm5lckhlaWdodCA8IHRoaXMuaGVpZ2h0TmVlZGVkKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQocy5zcXVhdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUocy5zcXVhdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VjdGlvbi1jb21wYXJpc29uIC5qcy1pbm5lci1jb250ZW50Jykub2Zmc2V0SGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0IC0gMTAwICkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKHMuc3VwZXJTcXVhdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUocy5zdXBlclNxdWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkanVzdENTU1ZhcmlhYmxlcygpIHtcbiAgICAgICAgICAgIHZhciByb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICAgICAgdmFyIGFjdGl2ZU1heCA9IE1hdGguZmxvb3IoKHRoaXMuaGVpZ2h0TmVlZGVkIC0gdGhpcy51bml0UGFkZGluZyAtIHRoaXMuaGVhZGVySGVpZ2h0KSAqICh0aGlzLm1heEFjdGl2ZSAvICh0aGlzLm1heEFjdGl2ZSArIHRoaXMubWF4RGlzY29udGludWVkKSkpO1xuICAgICAgICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS11bml0LWRpbWVuc2lvbicsIHRoaXMubWluVW5pdERpbWVuc2lvbiArICdweCcpO1xuICAgICAgICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1oZWFkZXItaGVpZ2h0JywgdGhpcy5oZWFkZXJIZWlnaHQgKyAncHgnKTtcbiAgICAgICAgICAgIHJvb3Quc3R5bGUuc2V0UHJvcGVydHkoJy0tbWF4LWNvbnRhaW5lci1oZWlnaHQnLCB0aGlzLmhlaWdodE5lZWRlZCArICdweCcpO1xuICAgICAgICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1hY3RpdmUtbWF4LWhlaWdodCcsIGFjdGl2ZU1heCArICdweCcpO1xuICAgICAgICAgICAgcm9vdC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1kaXNjb250aW51ZWQtbWF4LWhlaWdodCcsIE1hdGguZmxvb3IodGhpcy5oZWlnaHROZWVkZWQgLSBhY3RpdmVNYXggLSB0aGlzLmhlYWRlckhlaWdodCkgKyAncHgnKTtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIDpyb290IHtcbiAgICAgICAgICAgICAgICAtLW1heC1jb250YWluZXItaGVpZ2h0OiA4MDBweDtcbiAgICAgICAgICAgICAgICAtLWFjdGl2ZS1tYXgtaGVpZ2h0OiAzNjhweDtcbiAgICAgICAgICAgICAgICAtLWRpc2NvbnRpbnVlZC1tYXgtaGVpZ2h0OiAzNjhweDtcbiAgICAgICAgICAgICAgICAtLXNxdWF0LWFjdGl2ZS1wcm9wb3J0aW9uOiA1MHZoO1xuICAgICAgICAgICAgICAgIC0tc3F1YXQtZGlzY29udGludWVkLXByb3BvcnRpb246IDUwdmg7XG4gICAgICAgICAgICAgICAgLS11bml0LWRpbWVuc2lvbjogMzBweDtcbiAgICAgICAgICAgICAgICAtLWhlYWRlci1oZWlnaHQ6IDQ1cHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICovXG4gICAgICAgIH1cbiAgICAgICAgYWRqdXN0Q1NTVmFyaWFibGVzLmNhbGwodGhpcyk7XG4gICAgfVxuICAgIGluaXRpYWxpemVZZWFyQnV0dG9ucygpe1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMueWVhckJ1dHRvbikuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFllYXIgPSBTLmdldFN0YXRlKCd5ZWFyJylbMF07XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coY3VycmVudFllYXIsIHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmICggY3VycmVudFllYXIgIT0gdGhpcy52YWx1ZSApIHsgLy8gaXMgbm90IHRoZSBhbHJlYWR5IHNlbGVjdGVkIGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCdpc1BhdXNlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRpc2FibGVQbGF5QnV0dG9uKCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZVJlcGxheU9wdGlvbigpO1xuICAgICAgICAgICAgICAgIC8vICAgIFMuc2V0U3RhdGUoJ2lzU2FtZVllYXInLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vbGV0IG9ic2VydmF0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCArdGhpcy52YWx1ZSA+ICtjdXJyZW50WWVhciApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgb2JzZXJ2YXRpb25zID0gWzAsMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCdpc0JhY2t3YXJkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0WWVhclN0YXRlKFt0aGlzLnZhbHVlLCByZXNvbHZlLCAwXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRZZWFyU3RhdGUoW3RoaXMudmFsdWUsIG51bGwsIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICBvYnNlcnZhdGlvbnMgPSBbMSwwXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFMuc2V0U3RhdGUoJ2lzQmFja3dhcmQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRZZWFyU3RhdGUoW3RoaXMudmFsdWUsIG51bGwsIDFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LyogZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvYnNlcnZhdGlvbiA9IHRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKHMub2JzZXJ2YXRpb24wKSA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCdpc1NhbWVZZWFyJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFllYXJTdGF0ZShbdGhpcy52YWx1ZSwgbnVsbCwgb2JzZXJ2YXRpb25dKTsgICBcbiAgICAgICAgICAgICAgICB9Ki9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgdXBkYXRlKG1zZyxkYXRhKSB7IC8vIGhlcmUgZGF0YSBpcyBhbiBhcnJheS4gWzBdOiB5ZWFyOyBbMV06IG51bGwgb3IgYHJlc29sdmVgIGZyb20gdGhlIFByb21pc2UuIG5lZWRzIHRvIHJlc29sdmUgdHJ1ZSB3aGVuIGFsbCB0cmFuc2l0aW9ucyBvZiBjdXJyZW50IHVwZGF0ZSBhcmUgZmluaXNoZWQgLiAzLiBvYnNlcnZhdGlvbiBpbmRleFxuICAgICAgICBcbiAgICAgICAgLy8gZmluZCBidG4gdG8gYmUgZGVzZWxlY3RlZCBhbmQgY2hhbmdlIGl0cyBhcHBlYXJhbmNlXG4gICAgICAgIHZhciB0b0JlRGVzZWxlY3RlZEFjdGl2ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy55ZWFyQnV0dG9uQWN0aXZlKTsgICAgICAgIC8vb2JzZXJ2YXRpb25Ub0NoZWNrQWdhaW5zdCA9ICFTLmdldFN0YXRlKCdpc0JhY2t3YXJkJykgPyAwIDogMTtcbiAgICAgICBcbiAgICAgICAgdG9CZURlc2VsZWN0ZWRBY3RpdmUuY2xhc3NMaXN0LnJlbW92ZShzLnllYXJCdXR0b25BY3RpdmUsIHMub2JzZXJ2YXRpb24sIHMub2JzZXJ2YXRpb24wLCBzLm9ic2VydmF0aW9uMSlcblxuICAgICAgLyogIGlmICggZGF0YVsyXSA9PT0gb2JzZXJ2YXRpb25Ub0NoZWNrQWdhaW5zdCApIHsgLy8gaXMgZmlyc3Qgb2JzZXJ2YXRpb25cbiAgICAgICAgICAgIHRvQmVEZXNlbGVjdGVkQWN0aXZlLmNsYXNzTGlzdC5hZGQocy55ZWFyQnV0dG9uUHJldmlvdXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRvQmVEZXNlbGVjdGVkUHJldmlvdXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMueWVhckJ1dHRvblByZXZpb3VzKTtcbiAgICAgICAgICAgIGlmICh0b0JlRGVzZWxlY3RlZFByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgdG9CZURlc2VsZWN0ZWRQcmV2aW91cy5jbGFzc0xpc3QucmVtb3ZlKHMueWVhckJ1dHRvblByZXZpb3VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSovXG4gICAgICAgIFxuICAgICAgICAvLyBmaW5kIGJ1dHRvbiB0aGF0IG1hdGNoZXMgbmV3IHNlbGVjdGlvbiBhbmQgY2hhbmdlIGl0cyBhcHBlYXJhbmNlXG4gICAgICAgIHZhciBidG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b25bdmFsdWU9XCInICsgZGF0YVswXSArJ1wiXScpO1xuICAgICAgICBcbiAgICAgICAgLy90b2dnbGUgb2JzZXJ2YXRpb24gMCBvciBvYnNlcnZhdGlvbiAxXG4gICAgICAgIGJ0bi5jbGFzc0xpc3QuYWRkKHMueWVhckJ1dHRvbkFjdGl2ZSk7XG4gICAgICAgLyogaWYgKCBkYXRhWzJdID09PSAwICl7XG4gICAgICAgICAgICBidG4uY2xhc3NMaXN0LnJlbW92ZShzLm9ic2VydmF0aW9uMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidG4uY2xhc3NMaXN0LnJlbW92ZShzLm9ic2VydmF0aW9uMCk7XG4gICAgICAgIH0qL1xuICAgICAgICAvL2J0bi5jbGFzc0xpc3QuYWRkKHMub2JzZXJ2YXRpb24sIHNbJ29ic2VydmF0aW9uJyArIGRhdGFbMl1dKVxuICAgICAgICB0aGlzLkZMSVAocGFyc2VJbnQoZGF0YVswXSksIGRhdGFbMV0sIGRhdGFbMl0pOyAvLyB5ZWFySW5kZXgsIHJlc29sdmUgZm4sIG9ic2VydmF0aW9uXG4gICAgICAgIHRoaXMudXBkYXRlVGV4dCgpO1xuICAgIH1cbiAgICB1cGRhdGVUZXh0KCl7XG4gICAgICAgIC8vIHBoYXNlTWVtYmVyc1sxXSBpcyB0aGUgY3VycmVudCBzdGF0ZTsgWzBdIGlzIHRoZSBwcmV2aW91cyBzdGF0ZVxuICAgICAgICBcbiAgICAgICAgdmFyIHRvdGFsQWN0aXZlID0gdGhpcy5waGFzZU1lbWJlcnNbMV1bdGhpcy5waGFzZU1lbWJlcnNbMV0ubGVuZ3RoIC0gMV0uYWN0aXZlLmxlbmd0aCxcbiAgICAgICAgICAgIHRvdGFsRGlzY29udGludWVkID0gdGhpcy5waGFzZU1lbWJlcnNbMV0ucmVkdWNlKChhY2MsY3VyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYyArIGN1ci5kaXNjb250aW51ZWQubGVuZ3RoO1xuICAgICAgICAgICAgfSwwKSxcbiAgICAgICAgICAgIGFwcHJvdmVkU3BhbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0b3RhbC1hcHByb3ZlZCcpLFxuICAgICAgICAgICAgZGlzY29udGludWVkU3BhbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0b3RhbC1kaXNjb250aW51ZWQnKTtcbiAgICAgICAgaWYgKCBhcHByb3ZlZFNwYW4uaW5uZXJIVE1MICE9IHRvdGFsQWN0aXZlKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG90YWwtYXBwcm92ZWQnKS5mYWRlSW5Db250ZW50KHRvdGFsQWN0aXZlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIGRpc2NvbnRpbnVlZFNwYW4uaW5uZXJIVE1MICE9IHRvdGFsRGlzY29udGludWVkICkge1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RvdGFsLWRpc2NvbnRpbnVlZCcpLmZhZGVJbkNvbnRlbnQodG90YWxEaXNjb250aW51ZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEZMSVAoZGF0YSwgcmVzb2x2ZSwgb2JzZXJ2YXRpb24gPSAxKXsgLy8gb2JzZXJ2YXRpb24gZGVmYXVsdHMgdG8gMSBmb3IgdGhlIGluaXRpYWwgcGFnZSBsb2FkIGFuaW1hdGlvblxuICAgICAgICB0aGlzLnJlY29yZEZpcnN0UG9zaXRpb25zKCk7IC8vIGZpcnN0IHBvc2l0aW9ucyBvbiBwYWdlXG4gICAgICAgIC8vdGhpcy5yZWNvcmRTdGF0dXNlcyhkYXRhLCBvYnNlcnZhdGlvbik7XG4gICAgICAgIHRoaXMuY2xlYXJBdHRyaWJ1dGVzQW5kRGV0YWlscygpOyAvLyByZW1vdmVzIGNsYXNzTmFtZXMgYW5kIElEcyBvZiBub25lbXB0eSBkcnVnXG5cbiAgICAgICAgLy8gcGFyYW1zIDEuIGluZGV4IG9mIHRoZSB5ZWFyICgyMDE0IC0+IDApOyAyLiBpbmRleCBvZiB0aGUgb2JzZXJ2YXRpb247IFxuICAgICAgICB0aGlzLnBvcHVsYXRlUGxhY2Vob2xkZXJzKHRoaXMubW9kZWwueWVhcnMuaW5kZXhPZihkYXRhKSwgb2JzZXJ2YXRpb24pOyAvLyBsYXN0ICBcblxuICAgICAgICB0aGlzLm5vbkVtcHR5RHJ1Z3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMuZHJ1ZyArICc6bm90KC4nICsgcy5kcnVnRW1wdHkgKyAnKScpO1xuICAgICAgICB0aXBweSh0aGlzLm5vbkVtcHR5RHJ1Z3Mse1xuICAgICAgICAgICAgYXJyb3c6IHRydWUsXG4gICAgICAgICAgICBkaXN0YW5jZTogM1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFTLmdldFN0YXRlKCdpc0JhY2t3YXJkJykpIHtcbiAgICAgICAgICAgIHRoaXMuaW52ZXJ0UG9zaXRpb25zKCk7XG4gICAgICAgICAgICB0aGlzLnBsYXlBbmltYXRpb24ocmVzb2x2ZSk7IC8vIHBhc3MgaW4gdGhlIGByZXNvbHZlYCBmdW5jdGlvbiBmcm9tIHRoZSBwcm9taXNlIGluaXRpYXRlZCB3aGVuIHRoZSB5ZWFyIGJ1dHRvbiB3YXMgcHJlc3NlZCBvciBQbGF5IGxvb3AgY3ljbGVkXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZVBsYXlCdXR0b24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIFxuICAgICBcbiAgICB9XG4gICAgcmVjb3JkU3RhdHVzZXMoeWVhciwgb2JzZXJ2YXRpb24pe1xuICAgICAgICBcbiAgICAgICAgdGhpcy5wcmV2aW91c1N0YXR1c2VzID0gdGhpcy5tb2RlbC5kYXRhW3RoaXMubW9kZWwueWVhcnMuaW5kZXhPZigreWVhcildLm9ic2VydmF0aW9uc1tvYnNlcnZhdGlvbl0ucmVkdWNlKChhY2MsIHBoYXNlKSA9PiB7IC8vIGN1ciBpcyB0aGUgcGhhc2Ugb2JqZWN0XG4gICAgICAgICAgICAgICAgcGhhc2UudmFsdWVzLmZvckVhY2goZHJ1ZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFjY1tkcnVnLmlkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogZHJ1Z1t5ZWFyXVtvYnNlcnZhdGlvbl0uY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNjb250aW51ZWQ6IGRydWdbeWVhcl1bb2JzZXJ2YXRpb25dLmlzRGlzY29udGludWVkXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0se30pO1xuICAgICAgICBcbiAgICB9XG4gICAgcmVjb3JkRmlyc3RQb3NpdGlvbnMoKXtcbiAgICAgICAgdGhpcy5maXJzdFBvc2l0aW9ucyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmRydWcgKyAnOm5vdCgnICsgcy5kcnVnRW1wdHkgKyAnKScpKS5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGFjY1tjdXIuaWRdID0gY3VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSx7fSk7XG4gICAgfVxuICAgIGNsZWFyQXR0cmlidXRlc0FuZERldGFpbHMoKXtcbiAgICAgICAgdGhpcy5ub25FbXB0eURydWdzLmZvckVhY2goZHJ1ZyA9PiB7XG4gICAgICAgICAgICBkcnVnLmNsYXNzTmFtZSA9ICBgJHtzLmRydWd9ICR7cy5kcnVnRW1wdHl9YDtcbiAgICAgICAgICAgIGRydWcuaWQgPSAnJztcbiAgICAgICAgICAgIGRydWcuc2V0QXR0cmlidXRlKCdkYXRhLXRpcHB5LWNvbnRlbnQnLCcnKTtcbiAgICAgICAgICAgIGlmICggZHJ1Zy5fdGlwcHkgKXtcbiAgICAgICAgICAgICAgICBkcnVnLnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICAgICAgICAgICAgICBkcnVnLl90aXBweS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgIC8vIGRydWcuaW5uZXJUZXh0ID0gJyc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbnZlcnRQb3NpdGlvbnMoKXtcbiAgICAgICAgdGhpcy5ub25FbXB0eURydWdzLmZvckVhY2goZHJ1ZyA9PiB7XG4gICAgICAgICAgICBkcnVnLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gICAgICAgICAgICB2YXIgbGFzdFBvc2l0aW9uID0gZHJ1Zy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICBkZWx0YVkgPSB0aGlzLmZpcnN0UG9zaXRpb25zW2RydWcuaWRdID8gdGhpcy5maXJzdFBvc2l0aW9uc1tkcnVnLmlkXS50b3AgLSBsYXN0UG9zaXRpb24udG9wIDogLTMwMDAsXG4gICAgICAgICAgICAgICAgZGVsdGFYID0gdGhpcy5maXJzdFBvc2l0aW9uc1tkcnVnLmlkXSA/IHRoaXMuZmlyc3RQb3NpdGlvbnNbZHJ1Zy5pZF0ubGVmdCAtIGxhc3RQb3NpdGlvbi5sZWZ0IDogLTMwMDA7IC8vIGRydWdzIHRoYXQgYXJlIGVudGVyaW5nIHdpbGwgbm90IGhhdmUgZmlyc3RQb3NpdGlvbnNcbiAgICAgICAgICAgIGRydWcuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke2RlbHRhWH1weCwgJHtkZWx0YVl9cHgpYDtcbiAgICAgICAgICAgIGlmICggZGVsdGFZICE9PSAwIHx8IGRlbHRhWCAhPT0gMCApe1xuICAgICAgICAgICAgICAgICBkcnVnLmNsYXNzTGlzdC5hZGQocy5pc1RyYW5zbGF0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCAhdGhpcy5maXJzdFBvc2l0aW9uc1tkcnVnLmlkXSApe1xuICAgICAgICAgICAgICAgIGRydWcuY2xhc3NMaXN0LmFkZChzLmVudGVyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHBsYXlBbmltYXRpb24ocmVzb2x2ZSl7XG4gICAgICAgIGNvbnNvbGUubG9nKFMuZ2V0U3RhdGUoJ2lzQmFja3dhcmQnKSk7XG4gICAgICAgIHZhciBjb2x1bW4gPSBTLmdldFN0YXRlKCdpc0JhY2t3YXJkJykgPyAwIDogaGVhZGVycy5sZW5ndGgsXG4gICAgICAgICAgICBjdXJyZW50U3RhdGUgPSBTLmdldFN0YXRlKCd5ZWFyJyksXG4gICAgICAgICAgICBjdXJyZW50WWVhciA9IGN1cnJlbnRTdGF0ZVswXSxcbiAgICAgICAgICAgIGN1cnJlbnRPYnNlcnZhdGlvbiA9IGN1cnJlbnRTdGF0ZVsyXTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhjdXJyZW50WWVhciwgY3VycmVudE9ic2VydmF0aW9uKTtcbiAgICAgICAgICAgIFxuICAgICAgICBmdW5jdGlvbiB0ZXN0Q29sdW1uKCl7XG4gICAgICAgICAgICBpZiAoIFMuZ2V0U3RhdGUoJ2lzQmFja3dhcmQnKSApe1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2x1bW4gPCBoZWFkZXJzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb2x1bW4gPiAwIDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpbmNyZW1lbnRDb2x1bW4oKXtcbiAgICAgICAgICAgIGlmICggUy5nZXRTdGF0ZSgnaXNCYWNrd2FyZCcpICl7XG4gICAgICAgICAgICAgICAgY29sdW1uKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbHVtbi0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVUcnVlKGR1cmF0aW9uKXtcbiAgICAgICAgICAgIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zaXRpb24oRE9NRHJ1ZywgZHVyID0gZHVyYXRpb24sIGluZGV4ID0gbnVsbCl7XG4gICAgICAgICAgIC8vIHZhciB0cmFuc2xhdGVYWSA9IERPTURydWcuc3R5bGUudHJhbnNmb3JtLm1hdGNoKC90cmFuc2xhdGVcXCgoLio/KVxcKS8pWzFdLnJlcGxhY2UoJyAnLCcnKS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAvLyB2YXIgZGlzdGFuY2VUb1RyYXZlbCA9IE1hdGguc3FydCggTWF0aC5hYnMocGFyc2VJbnQodHJhbnNsYXRlWFlbMF0pKSAqKiAyICsgTWF0aC5hYnMocGFyc2VJbnQodHJhbnNsYXRlWFlbMF0pKSAqKiAyICk7XG4gICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVhZID0gRE9NRHJ1Zy5zdHlsZS50cmFuc2Zvcm0ubWF0Y2goL3RyYW5zbGF0ZVxcKCguKj8pXFwpLylbMV0ucmVwbGFjZSgnICcsJycpLnNwbGl0KCcsJykubWFwKGQgPT4gcGFyc2VJbnQoZCkpO1xuICAgICAgICAgICAgRE9NRHJ1Zy5jbGFzc0xpc3QuYWRkKHMuaXNNb3ZpbmcpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codHJhbnNsYXRlWFkpO1xuICAgICAgICAgICAgaWYgKCBpbmRleCA9PT0gMCB8fCBpbmRleCA9PT0gMSB8fCBpbmRleCA9PT0gMiApe1xuICAgICAgICAgICAgICAgIC8vRE9NRHJ1Zy5fdGlwcHkuc2hvdygwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIERPTURydWcuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyIC8gMTAwMCArICdzJztcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKERPTURydWcuX3RpcHB5LnBvcHBlci5zdHlsZSk7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gRE9NRHJ1Zy5fdGlwcHkucG9wcGVyLnN0eWxlLnRyYW5zZm9ybS5tYXRjaCgvdHJhbnNsYXRlM2RcXCgoLio/KVxcKS8pO1xuICAgICAgICAgICAgICAgIHZhciBwb3BwZXJDdXJyZW50VHJhbnNsYXRlM2QgPSBtYXRjaCA/IG1hdGNoWzFdLnJlcGxhY2UoJyAnLCcnKS5zcGxpdCgnLCcpLm1hcChkID0+IHBhcnNlSW50KGQpKSA6IFswLDAsMF07XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cocG9wcGVyQ3VycmVudFRyYW5zbGF0ZTNkKTtcbiAgICAgICAgICAgICAgICBpZiAoIGluZGV4ID09PSAwIHx8IGluZGV4ID09PSAxIHx8IGluZGV4ID09PSAyICl7XG4gICAgICAgICAgICAgICAgICAgIERPTURydWcuX3RpcHB5LnBvcHBlci5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBkdXIgLyAxMDAwICsgJ3MnO1xuICAgICAgICAgICAgICAgICAgICBET01EcnVnLl90aXBweS5wb3BwZXIuc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uID0gJ2Vhc2UtaW4tb3V0JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgIGlmICggaW5kZXggPT09IDAgfHwgaW5kZXggPT09IDEgfHwgaW5kZXggPT09IDIgKXtcbiAgICAgICAgICAgICAgICAgICAgRE9NRHJ1Zy5fdGlwcHkucG9wcGVyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3BhcnNlSW50KHBvcHBlckN1cnJlbnRUcmFuc2xhdGUzZFswXSkgLSBwYXJzZUludCh0cmFuc2xhdGVYWVswXSl9cHgsICR7cGFyc2VJbnQocG9wcGVyQ3VycmVudFRyYW5zbGF0ZTNkWzFdKSAtIHBhcnNlSW50KHRyYW5zbGF0ZVhZWzFdKX1weCwgMHB4KWA7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBET01EcnVnLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMHB4LDBweCknO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgRE9NRHJ1Zy5jbGFzc0xpc3QucmVtb3ZlKHMuaXNNb3ZpbmcpO1xuICAgICAgICAgICAgICAgICAgICBET01EcnVnLl90aXBweS5wb3BwZXIuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgICAgICAgICAgICAgICAgICAgRE9NRHJ1Zy5fdGlwcHkuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH0sIGR1cik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhbmltYXRlU2luZ2xlQ29sdW1uKHJlc29sdmUpe1xuXG4gICAgICAgICAgICB0aGlzLmRpc2FibGVZZWFyQnV0dG9ucygpO1xuICAgICAgICAgICAgdmFyIG1hdGNoaW5nRHJ1Z0lEcyA9IE9iamVjdC5rZXlzKHRoaXMucHJldmlvdXNTdGF0dXNlcykuZmlsdGVyKGlkID0+IHRoaXMucHJldmlvdXNTdGF0dXNlc1tpZF0uY29sdW1uID09PSBjb2x1bW4pLFxuICAgICAgICAgICAgICAgIG1hdGNoaW5nRE9NRHJ1Z3MgPSBBcnJheS5mcm9tKHRoaXMubm9uRW1wdHlEcnVncykuZmlsdGVyKERPTURydWcgPT4gbWF0Y2hpbmdEcnVnSURzLmluY2x1ZGVzKERPTURydWcuaWQpKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50c1dpbGxTdGF5QnV0TW92ZSA9IG1hdGNoaW5nRE9NRHJ1Z3MuZmlsdGVyKGVsID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudERhdHVtID0gdGhpcy5tb2RlbC51bm5lc3RlZERhdGEuZmluZChkID0+IGQuaWQgPT09IGVsLmlkKVtjdXJyZW50WWVhcl1bY3VycmVudE9ic2VydmF0aW9uXTtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRlWFkgPSBlbC5zdHlsZS50cmFuc2Zvcm0ubWF0Y2goL3RyYW5zbGF0ZVxcKCguKj8pXFwpLylbMV0ucmVwbGFjZSgnICcsJycpLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICAgICAgZWwudHJhbnNsYXRlWFkgPSB0cmFuc2xhdGVYWTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCB0aGlzLnByZXZpb3VzU3RhdHVzZXNbZWwuaWRdLmNvbHVtbiA9PT0gY3VycmVudERhdHVtLmNvbHVtbiAmJiB0aGlzLnByZXZpb3VzU3RhdHVzZXNbZWwuaWRdLmlzRGlzY29udGludWVkID09PSBjdXJyZW50RGF0dW0uaXNEaXNjb250aW51ZWQgJiYgKCB0cmFuc2xhdGVYWVswXSAhPT0gJzBweCcgfHwgdHJhbnNsYXRlWFlbMV0gIT09ICcwcHgnICkgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRzV2lsbENoYW5nZVN0YXR1cyA9IG1hdGNoaW5nRE9NRHJ1Z3MuZmlsdGVyKGVsID0+IHRoaXMucHJldmlvdXNTdGF0dXNlc1tlbC5pZF0uaXNEaXNjb250aW51ZWQgIT09IHRoaXMubW9kZWwudW5uZXN0ZWREYXRhLmZpbmQoZCA9PiBkLmlkID09PSBlbC5pZClbY3VycmVudFllYXJdW2N1cnJlbnRPYnNlcnZhdGlvbl0uaXNEaXNjb250aW51ZWQgKTsgICAgIFxuICAgICAgICAgICAgdmFyIGVsZW1lbnRzV2lsbE1vdmVGb3J3YXJkID0gbWF0Y2hpbmdET01EcnVncy5maWx0ZXIoZWwgPT4gdGhpcy5wcmV2aW91c1N0YXR1c2VzW2VsLmlkXS5jb2x1bW4gIT09IDAgJiYgdGhpcy5wcmV2aW91c1N0YXR1c2VzW2VsLmlkXS5jb2x1bW4gPCB0aGlzLm1vZGVsLnVubmVzdGVkRGF0YS5maW5kKGQgPT4gZC5pZCA9PT0gZWwuaWQpW2N1cnJlbnRZZWFyXVtjdXJyZW50T2JzZXJ2YXRpb25dLmNvbHVtbiApO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRzV2lsbE1vdmVCYWNrd2FyZCA9IG1hdGNoaW5nRE9NRHJ1Z3MuZmlsdGVyKGVsID0+IHRoaXMucHJldmlvdXNTdGF0dXNlc1tlbC5pZF0uY29sdW1uID4gdGhpcy5tb2RlbC51bm5lc3RlZERhdGEuZmluZChkID0+IGQuaWQgPT09IGVsLmlkKVtjdXJyZW50WWVhcl1bY3VycmVudE9ic2VydmF0aW9uXS5jb2x1bW4gKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50c1dpbGxFbnRlciA9IG1hdGNoaW5nRE9NRHJ1Z3MuZmlsdGVyKGVsID0+IHRoaXMucHJldmlvdXNTdGF0dXNlc1tlbC5pZF0uY29sdW1uID09PSAwKTtcblxuICAgICAgICAgICAgdmFyIHN1YnNldHMgPSBbZWxlbWVudHNXaWxsTW92ZUZvcndhcmQsIGVsZW1lbnRzV2lsbE1vdmVCYWNrd2FyZCwgZWxlbWVudHNXaWxsQ2hhbmdlU3RhdHVzLCBlbGVtZW50c1dpbGxTdGF5QnV0TW92ZSwgZWxlbWVudHNXaWxsRW50ZXJdO1xuICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlbGVtZW50c1dpbGxTdGF5QnV0TW92ZSk7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoT2ZBbGxTdWJzZXRzID0gc3Vic2V0cy5yZWR1Y2UoZnVuY3Rpb24oYWNjLGN1cil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYyArIGN1ci5sZW5ndGg7XG4gICAgICAgICAgICB9LDApO1xuICAgICAgICAgICAgY29uc29sZS5sb2cobGVuZ3RoT2ZBbGxTdWJzZXRzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlU3Vic2V0KGluZGV4KXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnICAgIHN1YnNldCAnICsgaW5kZXggLCBzdWJzZXRzW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzZXRzW2luZGV4XS5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJyAgICAgIHNraXBwaW5nIF4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7ICAgICAgICAvLyBpZiB0aGUgc3Vic2V0IGlzIGVtcHR5LCByZXNvbHZlIHJpZ2h0IGF3YXlcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNldHNbaW5kZXhdLmZvckVhY2goKERPTURydWcsIGksIGFycmF5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgdHJhbnNsYXRlWFkgPSBET01EcnVnLnN0eWxlLnRyYW5zZm9ybS5tYXRjaCgvdHJhbnNsYXRlXFwoKC4qPylcXCkvKVsxXS5yZXBsYWNlKCcgJykuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3ZhciBkdXIgPSB0cmFuc2xhdGVYWVswXSA9PT0gMCAmJiB0cmFuc2xhdGVYWVsxXSA9PT0gMCA/IDAgOiBkdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHVyID0gaW5kZXggPT09IDMgPyBkdXJhdGlvbiAvIDEyIDogaW5kZXggPT09IDQgPyBkdXJhdGlvbiAvIDEuNSA6IGR1cmF0aW9uOyAvLyBzcGVlZHMgdXAgdHJhbnNpdGlvbiBmb3IgZHJ1Z3MgdGhhdCB3aWxsIHN0YXkgYnV0IG1vdmU7IHNsb3dzIGl0IGRvd24gZm9yICBkcnVncyB0aGF0IHdpbGwgZW50ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsYXkgPSBpbmRleCA9PT0gMyA/IGR1ciAqIC41ICogaSA6IGluZGV4ID09PSA0ID8gZHVyICogLjEgKiBpIDogZHVyICogaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZHVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbihET01EcnVnLCBkdXIsIGluZGV4KTsgLy8gcGFzc2luZyBpbiB0aGUgZXhpc3RpbmcgdHJhbnNsYXRlIGNvb3JkcyBzbyB0aGF0IHRpbWluZyBjYW4gYmUgYmFzZSBvbiBkaXN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGkgPT09IGFycmF5Lmxlbmd0aCAtIDEgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlc29sdmVEZWxheSA9IGluZGV4ID09PSA0ID8gZHVyICogMiA6IGR1ciAqIChpICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVzb2x2ZURlbGF5KTsgLy8gd2FpdCB1bnRpbCBsYXN0IGl0ZW0gaW4gc3Vic2V0IGhhcyBmaW5pc2hlZCBpdHMgdHJhbnNpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJlZm9yZSByZXNvbHZpbmcgYW5kIHRyaWdnZXJpbmcgdGhlIG5leHQgc3Vic2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpbmRleCA8IHN1YnNldHMubGVuZ3RoICl7IC8vIGlmIHRoZXJlIGFyZSBzdGlsbCBtb3JlIHN1YnNldHMgdG8gaGFuZGxlLCBoYW5kbGUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlU3Vic2V0LmNhbGwodGhpcywgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm47IC8vIGlmIG5vdCwgc3RvcFxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRlc3RDb2x1bW4oKSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY3JlbWVudENvbHVtbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRlU2luZ2xlQ29sdW1uLmNhbGwodGhpcywgcmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkZWxheUJldHdlZW5PYnNlcnZhdGlvbiA9IGxlbmd0aE9mQWxsU3Vic2V0cyA9PT0gMCA/IDAgOiBkdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmFibGVZZWFyQnV0dG9ucygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhTLmdldFN0YXRlKCd5ZWFyJylbMF0sIHRoaXMubW9kZWwueWVhcnNbdGhpcy5tb2RlbC55ZWFycy5sZW5ndGggLSAxXSwgUy5nZXRTdGF0ZSgneWVhcicpWzJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBTLmdldFN0YXRlKCd5ZWFyJylbMl0gPT0gMSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmFibGVQbGF5QnV0dG9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIFMuZ2V0U3RhdGUoJ3llYXInKVswXSA9PSB0aGlzLm1vZGVsLnllYXJzW3RoaXMubW9kZWwueWVhcnMubGVuZ3RoIC0gMV0gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93UmVwbGF5T3B0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIVMuZ2V0U3RhdGUoJ2lzUGF1c2VkJykgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7ICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlUGF1c2VPcHRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlWWVhckJ1dHRvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRlbGF5QmV0d2Vlbk9ic2VydmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlU3Vic2V0LmNhbGwodGhpcywwKTtcbiAgICAgICAgICBcbiAgICAgICAgfSAvLyBlbmQgYW5pbWF0ZVNpbmdsZUNvbHVtblxuICAgICAgICBcbiAgICAgICAgLy8gY29udGludWUgcGxheUFuaW1hdGlvbiwgd2hpY2ggaXMgY2FsbGVkIG9uY2UgZm9yIGVhY2ggb2JzZXJ2YXRpb24gKDJ4IGZvciBlYWNoIHllYXIpXG4gICAgICAgIGlmICggaXNGaXJzdExvYWQgKXsgLy8gaWUgaXMgIHRoZSBmaXJzdCBhbmltYXRpb24gb24gbG9hZCBGSVJTVCBBTklNQVRJT05cblxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLm5vbkVtcHR5RHJ1Z3MuZm9yRWFjaCgoRE9NRHJ1ZykgPT4ge1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24oRE9NRHJ1ZywgMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlzRmlyc3RMb2FkID0gZmFsc2U7XG4gICAgICAgLy8gICAgIHJlc29sdmVUcnVlKGR1cmF0aW9uKTsgKi9cbiAgICAgICAgfSBlbHNlIHsgLy8gaXMgbm90IHRoZSBmaXJzdCBhbmltYXRpb24gb24gbG9hZCwgaWUgZHJ1Z3MgaGF2ZSBwcmV2aW91cyBzdGF0dXNlcyBTVUJTRVFVRU5UIEFOSU1BVElPTlNcbiAgICAgICAgICAgIGxldCBlbnRlcmluZ0RydWdzID0gQXJyYXkuZnJvbSh0aGlzLm5vbkVtcHR5RHJ1Z3MpLmZpbHRlcihET01EcnVnID0+ICFPYmplY3Qua2V5cyh0aGlzLnByZXZpb3VzU3RhdHVzZXMpLmluY2x1ZGVzKERPTURydWcuaWQpKTtcbiAgICAgICAgICAgIGVudGVyaW5nRHJ1Z3MuZm9yRWFjaChlbnRlcmluZ0RydWcgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucHJldmlvdXNTdGF0dXNlc1tlbnRlcmluZ0RydWcuaWRdID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW46IDAsXG4gICAgICAgICAgICAgICAgICAgIGlzRGlzY29udGludWVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgYW5pbWF0ZVNpbmdsZUNvbHVtbi5jYWxsKHRoaXMsIHJlc29sdmUpO1xuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHJlc29sdmVUcnVlKDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgRE9NSGVscGVycyBhcyAkZCB9IGZyb20gJ0BVdGlscyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rvciwgb3B0aW9ucyl7XG4gICAgICAgIGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSAnc3RyaW5nJyApe1xuICAgICAgICAgICAgdGhyb3cgYEZpcnN0IHBhcmFtZXRlciBtdXN0IGJlIGEgc3RyaW5nIHJlZmVyZW5jaW5nIHRoZSBDU1MtbGlrZSBzZWxlY3RvciBvZiB0aGUgZWxlbWVudCB0byBiZSBjcmVhdGVkIFxuICAgICAgICAgICAgICAgICAgICAoXCJkaXYjZGl2SUQuZGl2Q2xhc3NcIikuYDtcbiAgICAgICAgfSBcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDsgLy8gcGFyZW50IGlzIGEgSlMgb2JqZWN0XG4gICAgICAgIHRoaXMucmVuZGVyVG9TZWxlY3RvciA9IG9wdGlvbnMucmVuZGVyVG9TZWxlY3RvcjtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSAkZC5xKHRoaXMucmVuZGVyVG9TZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBvcHRpb25zLmNoaWxkcmVuO1xuICAgICAgICB0aGlzLnJlcmVuZGVyID0gKCBvcHRpb25zLnJlcmVuZGVyT25EYXRhTWlzbWF0Y2ggJiYgb3B0aW9ucy5tb2RlbC5pc01pc21hdGNoZWQgKTtcbiAgICAgICAgdGhpcy5kYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5lbCA9IHRoaXMucHJlcmVuZGVyKGFyZ3VtZW50cyk7IC8vIHdpbGwgY2FsbCB0aGUgaW5zdGFuY2UncyBwcmVyZW5kZXJcbiAgICAgICAgdGhpcy5pc1JlYWR5ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgfVxuICAgIHByZXJlbmRlcigpe1xuICAgICAgICBcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gJGQucSh0aGlzLnNlbGVjdG9yKTtcbiAgICAgICAgaWYgKCBleGlzdGluZyAmJiAhdGhpcy5yZXJlbmRlciApIHtcbiAgICAgICAgICAgICAgICAvLyBpZSBpcyBleGlzdGluZyBhbmQgbm8gbmVlZCB0byByZXJlbmRlclxuICAgICAgICAgICAgdGhpcy5wcmVyZW5kZXJlZCA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfSBlbHNlIGlmICggZXhpc3RpbmcgKSB7IC8vIGllIGlzIGV4aXN0aW5nIGJ1dCB0aGVyZSBpcyBhIG5lZWQgdG8gcmVyZW5kZXJcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhpc3RpbmcuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVsID0gJGQuYyh0aGlzLnNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIFxuICAgIH1cbn0iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wiY29udGFpbmVyXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWNvbnRhaW5lclwiLFwic3VwZXJTcXVhdFwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1zdXBlclNxdWF0XCIsXCJhY3RpdmVDb250YWluZXJcIjpcInNyYy12aWV3cy12aXotdmlldy0tYWN0aXZlQ29udGFpbmVyXCIsXCJoZWFkZXJDb250YWluZXJcIjpcInNyYy12aWV3cy12aXotdmlldy0taGVhZGVyQ29udGFpbmVyXCIsXCJjb2x1bW5cIjpcInNyYy12aWV3cy12aXotdmlldy0tY29sdW1uXCIsXCJkaXNjb250aW51ZWRDb250YWluZXJcIjpcInNyYy12aWV3cy12aXotdmlldy0tZGlzY29udGludWVkQ29udGFpbmVyXCIsXCJzcXVhdFwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1zcXVhdFwiLFwiZHJ1Z1wiOlwic3JjLXZpZXdzLXZpei12aWV3LS1kcnVnXCIsXCJkcnVnRW1wdHlcIjpcInNyYy12aWV3cy12aXotdmlldy0tZHJ1Z0VtcHR5XCIsXCJpc1RyYW5zbGF0ZWRcIjpcInNyYy12aWV3cy12aXotdmlldy0taXNUcmFuc2xhdGVkXCIsXCJub3ZlbFwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1ub3ZlbFwiLFwidXJnZW50XCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLXVyZ2VudFwiLFwiZ3JhbU5lZ2F0aXZlXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWdyYW1OZWdhdGl2ZVwiLFwiaXNNb3ZpbmdcIjpcInNyYy12aWV3cy12aXotdmlldy0taXNNb3ZpbmdcIixcImhlYWRlckRpdlwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1oZWFkZXJEaXZcIixcImlzQW5pbWF0aW5nXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWlzQW5pbWF0aW5nXCIsXCJwaGFzZUZ1bGxcIjpcInNyYy12aWV3cy12aXotdmlldy0tcGhhc2VGdWxsXCIsXCJwaGFzZUFiYnJcIjpcInNyYy12aWV3cy12aXotdmlldy0tcGhhc2VBYmJyXCIsXCJjb250cm9sQ29udGFpbmVyXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWNvbnRyb2xDb250YWluZXJcIixcInBsYXlCdXR0b25cIjpcInNyYy12aWV3cy12aXotdmlldy0tcGxheUJ1dHRvblwiLFwieWVhckJ1dHRvblwiOlwic3JjLXZpZXdzLXZpei12aWV3LS15ZWFyQnV0dG9uXCIsXCJwYXVzZVwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1wYXVzZVwiLFwicmVwbGF5XCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLXJlcGxheVwiLFwid2lsbFBhdXNlXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLXdpbGxQYXVzZVwiLFwicGF1c2VTcGlubmVyXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLXBhdXNlU3Bpbm5lclwiLFwieWVhckJ1dHRvbkFjdGl2ZVwiOlwic3JjLXZpZXdzLXZpei12aWV3LS15ZWFyQnV0dG9uQWN0aXZlXCJ9OyIsInZhciBoYXNoID0gcmVxdWlyZShcInN0cmluZy1oYXNoXCIpO1xudmFyIFB1YlN1YiA9IHJlcXVpcmUoXCJwdWJzdWItanNcIik7XG52YXIgc3Vic2NyaXB0aW9ucyA9IHt9O1xuZnVuY3Rpb24gbG9nU3VicygpIHtcbiAgICBjb25zb2xlLmxvZyhzdWJzY3JpcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVG9rZW4odG9waWMsIGZuUmVmKXtcbiAgICB2YXIgZnVuY3Rpb25IYXNoID0gaGFzaChmblJlZi50b1N0cmluZygpKTtcbiAgICB2YXIgc3RyID0gdG9waWMgKyBmblJlZjtcbiAgICB2YXIgdG9rZW4gPSAnc3ViJyArIGhhc2goc3RyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b2tlbjogdG9rZW4sXG4gICAgICAgIGZuOiBmdW5jdGlvbkhhc2hcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBzZXRTdWJzKHN1YnNBcnJheSkgeyAvLyBzdWJzQXJyYXkgaXMgYXJyYXkgb2YgdG9waWMvZnVuY3Rpb24gcGFpciBhcnJheXNcbiAgICBzdWJzQXJyYXkuZm9yRWFjaChmdW5jdGlvbihwYWlyKXtcbiAgICAgICAgdmFyIHRvcGljID0gcGFpclswXSxcbiAgICAgICAgICAgIGZuUmVmID0gcGFpclsxXSxcbiAgICAgICAgICAgIHRva2VuT2JqID0gY3JlYXRlVG9rZW4odG9waWMsZm5SZWYpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXSA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl1bdG9waWNdID0gUHViU3ViLnN1YnNjcmliZSh0b3BpYyxmblJlZik7ICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93ICdTdWJzY3JpcHRpb24gdG9rZW4gaXMgYWxyZWFkeSBpbiB1c2UuJztcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjYW5jZWxTdWIodG9waWMsZm5SZWYpIHsgLy8gZm9yIGNhbmNlbGluZyBzaW5nbGUgc3Vic2NyaXB0aW9uXG4gICAgdmFyIHRva2VuT2JqID0gY3JlYXRlVG9rZW4odG9waWMsZm5SZWYpO1xuICAgIGlmICggc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl0gIT09IHVuZGVmaW5lZCAmJiBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXVt0b3BpY10gIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgUHViU3ViLnVuc3Vic2NyaWJlKCBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXVt0b3BpY10gKTtcbiAgICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXTtcbiAgICAgICAgaWYgKCBPYmplY3Qua2V5cyhzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSkubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgJ1N1YnNjcmlwdGlvbiBkb2VzIG5vdCBleGlzdC4nO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbG9nU3Viczpsb2dTdWJzLFxuICAgIHNldFN1YnM6c2V0U3VicyxcbiAgICBjYW5jZWxTdWI6Y2FuY2VsU3ViXG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICB2YXIgaGFzaCA9IDUzODEsXG4gICAgICBpICAgID0gc3RyLmxlbmd0aDtcblxuICB3aGlsZShpKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuXG4gIC8qIEphdmFTY3JpcHQgZG9lcyBiaXR3aXNlIG9wZXJhdGlvbnMgKGxpa2UgWE9SLCBhYm92ZSkgb24gMzItYml0IHNpZ25lZFxuICAgKiBpbnRlZ2Vycy4gU2luY2Ugd2Ugd2FudCB0aGUgcmVzdWx0cyB0byBiZSBhbHdheXMgcG9zaXRpdmUsIGNvbnZlcnQgdGhlXG4gICAqIHNpZ25lZCBpbnQgdG8gYW4gdW5zaWduZWQgYnkgZG9pbmcgYW4gdW5zaWduZWQgYml0c2hpZnQuICovXG4gIHJldHVybiBoYXNoID4+PiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2g7XG4iLCIvKiohXG4qIHRpcHB5LmpzIHY0LjIuMVxuKiAoYykgMjAxNy0yMDE5IGF0b21pa3NcbiogTUlUIExpY2Vuc2VcbiovXG5pbXBvcnQgUG9wcGVyIGZyb20gJ3BvcHBlci5qcyc7XG5cbnZhciBjc3MgPSBcIi50aXBweS1pT1N7Y3Vyc29yOnBvaW50ZXIhaW1wb3J0YW50Oy13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudH0udGlwcHktcG9wcGVye3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMTY1LC44NCwuNDQsMSk7bWF4LXdpZHRoOmNhbGMoMTAwJSAtIDhweCk7cG9pbnRlci1ldmVudHM6bm9uZTtvdXRsaW5lOjB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3B7Ym9yZGVyLXJhZGl1czo0MCUgNDAlIDAgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIC50aXBweS1yb3VuZGFycm93e2JvdHRvbTotN3B4O2JvdHRvbTotNi41cHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAwO3RyYW5zZm9ybS1vcmlnaW46NTAlIDA7bWFyZ2luOjAgM3B4fS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gLnRpcHB5LXJvdW5kYXJyb3cgc3Zne3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYXJyb3d7Ym9yZGVyLXRvcDo4cHggc29saWQgIzMzMztib3JkZXItcmlnaHQ6OHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1sZWZ0OjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3R0b206LTdweDttYXJnaW46MCAzcHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAwO3RyYW5zZm9ybS1vcmlnaW46NTAlIDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjAgMjUlO3RyYW5zZm9ybS1vcmlnaW46MCAyNSV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNTUlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTU1JSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT1oaWRkZW5dey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTUwJSwtNDUlKTt0cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNTAlLC00NSUpO29wYWNpdHk6MH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpib3R0b207dHJhbnNmb3JtLW9yaWdpbjpib3R0b219LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoLTEwcHgpIHJvdGF0ZVgoMCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKC0xMHB4KSByb3RhdGVYKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDApIHJvdGF0ZVgoNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgwKSByb3RhdGVYKDYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj10b3BdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpib3R0b207dHJhbnNmb3JtLW9yaWdpbjpib3R0b219LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49dG9wXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKDEpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXRvcF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCkgc2NhbGUoLjUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LWJhY2tkcm9we2JvcmRlci1yYWRpdXM6MCAwIDMwJSAzMCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktcm91bmRhcnJvd3t0b3A6LTdweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDEwMCU7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMTAwJTttYXJnaW46MCAzcHh9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LWFycm93e2JvcmRlci1ib3R0b206OHB4IHNvbGlkICMzMzM7Ym9yZGVyLXJpZ2h0OjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItbGVmdDo4cHggc29saWQgdHJhbnNwYXJlbnQ7dG9wOi03cHg7bWFyZ2luOjAgM3B4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjo1MCUgMTAwJTt0cmFuc2Zvcm0tb3JpZ2luOjUwJSAxMDAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gLnRpcHB5LWJhY2tkcm9wey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjowIC01MCU7dHJhbnNmb3JtLW9yaWdpbjowIC01MCV9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUoLTUwJSwtNDUlKTt0cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTQ1JSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT1oaWRkZW5dey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTUwJSk7dHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTUwJSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wO3RyYW5zZm9ybS1vcmlnaW46dG9wfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDEwcHgpIHJvdGF0ZVgoMCk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVZKDEwcHgpIHJvdGF0ZVgoMCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVkoMCkgcm90YXRlWCgtNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWSgwKSByb3RhdGVYKC02MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249ZmFkZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1ib3R0b21dIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC1hd2F5XVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wO3RyYW5zZm9ybS1vcmlnaW46dG9wfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWJvdHRvbV0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCkgc2NhbGUoMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49Ym90dG9tXSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KSBzY2FsZSguNSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCkgc2NhbGUoLjUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1iYWNrZHJvcHtib3JkZXItcmFkaXVzOjUwJSAwIDAgNTAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1yb3VuZGFycm93e3JpZ2h0Oi0xMnB4Oy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjozMy4zMzMzMzMzMyUgNTAlO3RyYW5zZm9ybS1vcmlnaW46MzMuMzMzMzMzMzMlIDUwJTttYXJnaW46M3B4IDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LXJvdW5kYXJyb3cgc3Zne3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1hcnJvd3tib3JkZXItbGVmdDo4cHggc29saWQgIzMzMztib3JkZXItdG9wOjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjhweCBzb2xpZCB0cmFuc3BhcmVudDtyaWdodDotN3B4O21hcmdpbjozcHggMDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46MCA1MCU7dHJhbnNmb3JtLW9yaWdpbjowIDUwJX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjUwJSAwO3RyYW5zZm9ybS1vcmlnaW46NTAlIDB9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gLnRpcHB5LWJhY2tkcm9wW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSk7dHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC01MCUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIC50aXBweS1iYWNrZHJvcFtkYXRhLXN0YXRlPWhpZGRlbl17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtNzUlLC01MCUpO3RyYW5zZm9ybTpzY2FsZSguMikgdHJhbnNsYXRlKC03NSUsLTUwJSk7b3BhY2l0eTowfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zaGlmdC10b3dhcmRdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0O3RyYW5zZm9ybS1vcmlnaW46cmlnaHR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPXZpc2libGVdey13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKC0xMHB4KSByb3RhdGVZKDApO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgtMTBweCkgcm90YXRlWSgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMCkgcm90YXRlWSgtNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgwKSByb3RhdGVZKC02MGRlZyl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1mYWRlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtYXdheV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1sZWZ0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodDt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0fS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePWxlZnRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KSBzY2FsZSgxKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCkgc2NhbGUoMSl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49bGVmdF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpIHNjYWxlKC41KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCkgc2NhbGUoLjUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3B7Ym9yZGVyLXJhZGl1czowIDUwJSA1MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LXJvdW5kYXJyb3d7bGVmdDotMTJweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NjYuNjY2NjY2NjYlIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjY2LjY2NjY2NjY2JSA1MCU7bWFyZ2luOjNweCAwfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktcm91bmRhcnJvdyBzdmd7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LWFycm93e2JvcmRlci1yaWdodDo4cHggc29saWQgIzMzMztib3JkZXItdG9wOjhweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjhweCBzb2xpZCB0cmFuc3BhcmVudDtsZWZ0Oi03cHg7bWFyZ2luOjNweCAwOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjoxMDAlIDUwJTt0cmFuc2Zvcm0tb3JpZ2luOjEwMCUgNTAlfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3B7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOi01MCUgMDt0cmFuc2Zvcm0tb3JpZ2luOi01MCUgMH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gLnRpcHB5LWJhY2tkcm9wW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsLTUwJSk7dHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLC01MCUpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSAudGlwcHktYmFja2Ryb3BbZGF0YS1zdGF0ZT1oaWRkZW5dey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKC4yKSB0cmFuc2xhdGUoLTI1JSwtNTAlKTt0cmFuc2Zvcm06c2NhbGUoLjIpIHRyYW5zbGF0ZSgtMjUlLC01MCUpO29wYWNpdHk6MH0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LXRvd2FyZF1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2hpZnQtdG93YXJkXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCl9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1wZXJzcGVjdGl2ZV17LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQ7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0fS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249cGVyc3BlY3RpdmVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMTBweCkgcm90YXRlWSgwKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNzAwcHgpIHRyYW5zbGF0ZVgoMTBweCkgcm90YXRlWSgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXBlcnNwZWN0aXZlXVtkYXRhLXN0YXRlPWhpZGRlbl17b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDcwMHB4KSB0cmFuc2xhdGVYKDApIHJvdGF0ZVkoNjBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg3MDBweCkgdHJhbnNsYXRlWCgwKSByb3RhdGVZKDYwZGVnKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPWZhZGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9dmlzaWJsZV17LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNoaWZ0LWF3YXldW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0udGlwcHktcG9wcGVyW3gtcGxhY2VtZW50Xj1yaWdodF0gW2RhdGEtYW5pbWF0aW9uPXNjYWxlXXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnR9LnRpcHB5LXBvcHBlclt4LXBsYWNlbWVudF49cmlnaHRdIFtkYXRhLWFuaW1hdGlvbj1zY2FsZV1bZGF0YS1zdGF0ZT12aXNpYmxlXXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpIHNjYWxlKDEpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpIHNjYWxlKDEpfS50aXBweS1wb3BwZXJbeC1wbGFjZW1lbnRePXJpZ2h0XSBbZGF0YS1hbmltYXRpb249c2NhbGVdW2RhdGEtc3RhdGU9aGlkZGVuXXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KSBzY2FsZSguNSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCkgc2NhbGUoLjUpfS50aXBweS10b29sdGlwe3Bvc2l0aW9uOnJlbGF0aXZlO2NvbG9yOiNmZmY7Ym9yZGVyLXJhZGl1czouMjVyZW07Zm9udC1zaXplOi44NzVyZW07cGFkZGluZzouMzEyNXJlbSAuNTYyNXJlbTtsaW5lLWhlaWdodDoxLjQ7dGV4dC1hbGlnbjpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjojMzMzfS50aXBweS10b29sdGlwW2RhdGEtc2l6ZT1zbWFsbF17cGFkZGluZzouMTg3NXJlbSAuMzc1cmVtO2ZvbnQtc2l6ZTouNzVyZW19LnRpcHB5LXRvb2x0aXBbZGF0YS1zaXplPWxhcmdlXXtwYWRkaW5nOi4zNzVyZW0gLjc1cmVtO2ZvbnQtc2l6ZToxcmVtfS50aXBweS10b29sdGlwW2RhdGEtYW5pbWF0ZWZpbGxde292ZXJmbG93OmhpZGRlbjtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS50aXBweS10b29sdGlwW2RhdGEtaW50ZXJhY3RpdmVdLC50aXBweS10b29sdGlwW2RhdGEtaW50ZXJhY3RpdmVdIHBhdGh7cG9pbnRlci1ldmVudHM6YXV0b30udGlwcHktdG9vbHRpcFtkYXRhLWluZXJ0aWFdW2RhdGEtc3RhdGU9dmlzaWJsZV17dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC41NCwxLjUsLjM4LDEuMTEpfS50aXBweS10b29sdGlwW2RhdGEtaW5lcnRpYV1bZGF0YS1zdGF0ZT1oaWRkZW5de3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2V9LnRpcHB5LWFycm93LC50aXBweS1yb3VuZGFycm93e3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjA7aGVpZ2h0OjB9LnRpcHB5LXJvdW5kYXJyb3d7d2lkdGg6MThweDtoZWlnaHQ6N3B4O2ZpbGw6IzMzMztwb2ludGVyLWV2ZW50czpub25lfS50aXBweS1iYWNrZHJvcHtwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kLWNvbG9yOiMzMzM7Ym9yZGVyLXJhZGl1czo1MCU7d2lkdGg6Y2FsYygxMTAlICsgMnJlbSk7bGVmdDo1MCU7dG9wOjUwJTt6LWluZGV4Oi0xO3RyYW5zaXRpb246YWxsIGN1YmljLWJlemllciguNDYsLjEsLjUyLC45OCk7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbn0udGlwcHktYmFja2Ryb3A6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtmbG9hdDpsZWZ0O3BhZGRpbmctdG9wOjEwMCV9LnRpcHB5LWJhY2tkcm9wKy50aXBweS1jb250ZW50e3RyYW5zaXRpb24tcHJvcGVydHk6b3BhY2l0eTt3aWxsLWNoYW5nZTpvcGFjaXR5fS50aXBweS1iYWNrZHJvcCsudGlwcHktY29udGVudFtkYXRhLXN0YXRlPXZpc2libGVde29wYWNpdHk6MX0udGlwcHktYmFja2Ryb3ArLnRpcHB5LWNvbnRlbnRbZGF0YS1zdGF0ZT1oaWRkZW5de29wYWNpdHk6MH1cIjtcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxudmFyIHZlcnNpb24gPSBcIjQuMi4xXCI7XG5cbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIHVhID0gaXNCcm93c2VyID8gbmF2aWdhdG9yLnVzZXJBZ2VudCA6ICcnO1xudmFyIGlzSUUgPSAvTVNJRSB8VHJpZGVudFxcLy8udGVzdCh1YSk7XG52YXIgaXNVQ0Jyb3dzZXIgPSAvVUNCcm93c2VyXFwvLy50ZXN0KHVhKTtcbnZhciBpc0lPUyA9IGlzQnJvd3NlciAmJiAvaVBob25lfGlQYWR8aVBvZC8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pICYmICF3aW5kb3cuTVNTdHJlYW07XG5cbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGExMXk6IHRydWUsXG4gIGFsbG93SFRNTDogdHJ1ZSxcbiAgYW5pbWF0ZUZpbGw6IHRydWUsXG4gIGFuaW1hdGlvbjogJ3NoaWZ0LWF3YXknLFxuICBhcHBlbmRUbzogZnVuY3Rpb24gYXBwZW5kVG8oKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH0sXG4gIGFyaWE6ICdkZXNjcmliZWRieScsXG4gIGFycm93OiBmYWxzZSxcbiAgYXJyb3dUeXBlOiAnc2hhcnAnLFxuICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXG4gIGNvbnRlbnQ6ICcnLFxuICBkZWxheTogMCxcbiAgZGlzdGFuY2U6IDEwLFxuICBkdXJhdGlvbjogWzMyNSwgMjc1XSxcbiAgZmxpcDogdHJ1ZSxcbiAgZmxpcEJlaGF2aW9yOiAnZmxpcCcsXG4gIGZsaXBPblVwZGF0ZTogZmFsc2UsXG4gIGZvbGxvd0N1cnNvcjogZmFsc2UsXG4gIGhpZGVPbkNsaWNrOiB0cnVlLFxuICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcbiAgaW5lcnRpYTogZmFsc2UsXG4gIGludGVyYWN0aXZlOiBmYWxzZSxcbiAgaW50ZXJhY3RpdmVCb3JkZXI6IDIsXG4gIGludGVyYWN0aXZlRGVib3VuY2U6IDAsXG4gIGxhenk6IHRydWUsXG4gIG1heFdpZHRoOiAzNTAsXG4gIG11bHRpcGxlOiBmYWxzZSxcbiAgb2Zmc2V0OiAwLFxuICBvbkhpZGRlbjogZnVuY3Rpb24gb25IaWRkZW4oKSB7fSxcbiAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoKSB7fSxcbiAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudCgpIHt9LFxuICBvblNob3c6IGZ1bmN0aW9uIG9uU2hvdygpIHt9LFxuICBvblNob3duOiBmdW5jdGlvbiBvblNob3duKCkge30sXG4gIHBsYWNlbWVudDogJ3RvcCcsXG4gIHBvcHBlck9wdGlvbnM6IHt9LFxuICByb2xlOiAndG9vbHRpcCcsXG4gIHNob3dPbkluaXQ6IGZhbHNlLFxuICBzaXplOiAncmVndWxhcicsXG4gIHN0aWNreTogZmFsc2UsXG4gIHRhcmdldDogJycsXG4gIHRoZW1lOiAnZGFyaycsXG4gIHRvdWNoOiB0cnVlLFxuICB0b3VjaEhvbGQ6IGZhbHNlLFxuICB0cmlnZ2VyOiAnbW91c2VlbnRlciBmb2N1cycsXG4gIHVwZGF0ZUR1cmF0aW9uOiAwLFxuICB3YWl0OiBudWxsLFxuICB6SW5kZXg6IDk5OTlcbiAgLyoqXG4gICAqIElmIHRoZSBzZXQoKSBtZXRob2QgZW5jb3VudGVycyBvbmUgb2YgdGhlc2UsIHRoZSBwb3BwZXJJbnN0YW5jZSBtdXN0IGJlXG4gICAqIHJlY3JlYXRlZFxuICAgKi9cblxufTtcbnZhciBQT1BQRVJfSU5TVEFOQ0VfREVQRU5ERU5DSUVTID0gWydhcnJvdycsICdhcnJvd1R5cGUnLCAnYm91bmRhcnknLCAnZGlzdGFuY2UnLCAnZmxpcCcsICdmbGlwQmVoYXZpb3InLCAnZmxpcE9uVXBkYXRlJywgJ29mZnNldCcsICdwbGFjZW1lbnQnLCAncG9wcGVyT3B0aW9ucyddO1xuXG52YXIgZWxlbWVudFByb3RvID0gaXNCcm93c2VyID8gRWxlbWVudC5wcm90b3R5cGUgOiB7fTtcbnZhciBtYXRjaGVzID0gZWxlbWVudFByb3RvLm1hdGNoZXMgfHwgZWxlbWVudFByb3RvLm1hdGNoZXNTZWxlY3RvciB8fCBlbGVtZW50UHJvdG8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnRQcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgZWxlbWVudFByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yO1xuLyoqXG4gKiBQb255ZmlsbCBmb3IgQXJyYXkuZnJvbSAtIGNvbnZlcnRzIGl0ZXJhYmxlIHZhbHVlcyB0byBhbiBhcnJheVxuICovXG5cbmZ1bmN0aW9uIGFycmF5RnJvbSh2YWx1ZSkge1xuICByZXR1cm4gW10uc2xpY2UuY2FsbCh2YWx1ZSk7XG59XG4vKipcbiAqIFBvbnlmaWxsIGZvciBFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0XG4gKi9cblxuZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBwYXJlbnRTZWxlY3Rvcikge1xuICByZXR1cm4gKGVsZW1lbnRQcm90by5jbG9zZXN0IHx8IGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICB2YXIgZWwgPSB0aGlzO1xuXG4gICAgd2hpbGUgKGVsKSB7XG4gICAgICBpZiAobWF0Y2hlcy5jYWxsKGVsLCBzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfVxuXG4gICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICB9KS5jYWxsKGVsZW1lbnQsIHBhcmVudFNlbGVjdG9yKTtcbn1cbi8qKlxuICogV29ya3MgbGlrZSBFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0LCBidXQgdXNlcyBhIGNhbGxiYWNrIGluc3RlYWRcbiAqL1xuXG5mdW5jdGlvbiBjbG9zZXN0Q2FsbGJhY2soZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICBpZiAoY2FsbGJhY2soZWxlbWVudCkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cbn1cblxuLy8gUGFzc2l2ZSBldmVudCBsaXN0ZW5lciBjb25maWdcbnZhciBQQVNTSVZFID0ge1xuICBwYXNzaXZlOiB0cnVlIC8vIFBvcHBlciBgcHJldmVudE92ZXJmbG93YCBwYWRkaW5nXG5cbn07XG52YXIgUEFERElORyA9IDQ7IC8vIFBvcHBlciBhdHRyaWJ1dGVzXG4vLyBJbiBQb3BwZXIgdjIgdGhlc2Ugd2lsbCBiZSBgZGF0YS0qYCBpbnN0ZWFkIG9mIGB4LSpgIHRvIGFkaGVyZSB0byBIVE1MNSBzcGVjXG5cbnZhciBQTEFDRU1FTlRfQVRUUklCVVRFID0gJ3gtcGxhY2VtZW50JztcbnZhciBPVVRfT0ZfQk9VTkRBUklFU19BVFRSSUJVVEUgPSAneC1vdXQtb2YtYm91bmRhcmllcyc7IC8vIENsYXNzZXNcblxudmFyIElPU19DTEFTUyA9ICd0aXBweS1pT1MnO1xudmFyIEFDVElWRV9DTEFTUyA9ICd0aXBweS1hY3RpdmUnOyAvLyBTZWxlY3RvcnNcblxudmFyIFBPUFBFUl9TRUxFQ1RPUiA9ICcudGlwcHktcG9wcGVyJztcbnZhciBUT09MVElQX1NFTEVDVE9SID0gJy50aXBweS10b29sdGlwJztcbnZhciBDT05URU5UX1NFTEVDVE9SID0gJy50aXBweS1jb250ZW50JztcbnZhciBCQUNLRFJPUF9TRUxFQ1RPUiA9ICcudGlwcHktYmFja2Ryb3AnO1xudmFyIEFSUk9XX1NFTEVDVE9SID0gJy50aXBweS1hcnJvdyc7XG52YXIgUk9VTkRfQVJST1dfU0VMRUNUT1IgPSAnLnRpcHB5LXJvdW5kYXJyb3cnO1xuXG52YXIga2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRQcm9wcyk7XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIG9wdGlvbmFsIHByb3BzIGZyb20gZGF0YS10aXBweS0qIGF0dHJpYnV0ZXNcbiAqL1xuXG5mdW5jdGlvbiBnZXREYXRhQXR0cmlidXRlT3B0aW9ucyhyZWZlcmVuY2UpIHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIHZhciB2YWx1ZUFzU3RyaW5nID0gKHJlZmVyZW5jZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRpcHB5LVwiLmNvbmNhdChrZXkpKSB8fCAnJykudHJpbSgpO1xuXG4gICAgaWYgKCF2YWx1ZUFzU3RyaW5nKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdjb250ZW50Jykge1xuICAgICAgYWNjW2tleV0gPSB2YWx1ZUFzU3RyaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICBhY2Nba2V5XSA9IEpTT04ucGFyc2UodmFsdWVBc1N0cmluZyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGFjY1trZXldID0gdmFsdWVBc1N0cmluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG4vKipcbiAqIFBvbHlmaWxscyB0aGUgdmlydHVhbCByZWZlcmVuY2UgKHBsYWluIG9iamVjdCkgd2l0aCBFbGVtZW50LnByb3RvdHlwZSBwcm9wc1xuICogTXV0YXRpbmcgYmVjYXVzZSBET00gZWxlbWVudHMgYXJlIG11dGF0ZWQsIGFkZHMgYF90aXBweWAgcHJvcGVydHlcbiAqL1xuXG5mdW5jdGlvbiBwb2x5ZmlsbEVsZW1lbnRQcm90b3R5cGVQcm9wZXJ0aWVzKHZpcnR1YWxSZWZlcmVuY2UpIHtcbiAgdmFyIHBvbHlmaWxscyA9IHtcbiAgICBpc1ZpcnR1YWw6IHRydWUsXG4gICAgYXR0cmlidXRlczogdmlydHVhbFJlZmVyZW5jZS5hdHRyaWJ1dGVzIHx8IHt9LFxuICAgIHNldEF0dHJpYnV0ZTogZnVuY3Rpb24gc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpIHtcbiAgICAgIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlc1trZXldID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uIGdldEF0dHJpYnV0ZShrZXkpIHtcbiAgICAgIHJldHVybiB2aXJ0dWFsUmVmZXJlbmNlLmF0dHJpYnV0ZXNba2V5XTtcbiAgICB9LFxuICAgIHJlbW92ZUF0dHJpYnV0ZTogZnVuY3Rpb24gcmVtb3ZlQXR0cmlidXRlKGtleSkge1xuICAgICAgZGVsZXRlIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlc1trZXldO1xuICAgIH0sXG4gICAgaGFzQXR0cmlidXRlOiBmdW5jdGlvbiBoYXNBdHRyaWJ1dGUoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5IGluIHZpcnR1YWxSZWZlcmVuY2UuYXR0cmlidXRlcztcbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gICAgY2xhc3NMaXN0OiB7XG4gICAgICBjbGFzc05hbWVzOiB7fSxcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKGtleSkge1xuICAgICAgICB2aXJ0dWFsUmVmZXJlbmNlLmNsYXNzTGlzdC5jbGFzc05hbWVzW2tleV0gPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKGtleSkge1xuICAgICAgICBkZWxldGUgdmlydHVhbFJlZmVyZW5jZS5jbGFzc0xpc3QuY2xhc3NOYW1lc1trZXldO1xuICAgICAgfSxcbiAgICAgIGNvbnRhaW5zOiBmdW5jdGlvbiBjb250YWlucyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSBpbiB2aXJ0dWFsUmVmZXJlbmNlLmNsYXNzTGlzdC5jbGFzc05hbWVzO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcG9seWZpbGxzKSB7XG4gICAgdmlydHVhbFJlZmVyZW5jZVtrZXldID0gcG9seWZpbGxzW2tleV07XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBcImJhcmVcIiB2aXJ0dWFsIGVsZW1lbnQgKGJlZm9yZSBtdXRhdGlvbnMgZG9uZVxuICogYnkgYHBvbHlmaWxsRWxlbWVudFByb3RvdHlwZVByb3BlcnRpZXMoKWApLiBKU0RPTSBlbGVtZW50cyBzaG93IHVwIGFzXG4gKiBbb2JqZWN0IE9iamVjdF0sIHdlIGNhbiBjaGVjayBpZiB0aGUgdmFsdWUgaXMgXCJlbGVtZW50LWxpa2VcIiBpZiBpdCBoYXNcbiAqIGBhZGRFdmVudExpc3RlbmVyYFxuICovXG5cbmZ1bmN0aW9uIGlzQmFyZVZpcnR1YWxFbGVtZW50KHZhbHVlKSB7XG4gIHJldHVybiB7fS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgIXZhbHVlLmFkZEV2ZW50TGlzdGVuZXI7XG59XG4vKipcbiAqIFNhZmUgLmhhc093blByb3BlcnR5IGNoZWNrLCBmb3IgcHJvdG90eXBlLWxlc3Mgb2JqZWN0c1xuICovXG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwga2V5KSB7XG4gIHJldHVybiB7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyBiYXNlZCBvbiB0aGUgdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiBnZXRBcnJheU9mRWxlbWVudHModmFsdWUpIHtcbiAgaWYgKGlzU2luZ3VsYXIodmFsdWUpKSB7XG4gICAgLy8gVE9ETzogVmlydHVhbFJlZmVyZW5jZSBpcyBub3QgY29tcGF0aWJsZSB0byB0eXBlIEVsZW1lbnRcbiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgfVxuXG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XG4gICAgcmV0dXJuIGFycmF5RnJvbSh2YWx1ZSk7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBhcnJheUZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh2YWx1ZSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59XG4vKipcbiAqIFJldHVybnMgYSB2YWx1ZSBhdCBhIGdpdmVuIGluZGV4IGRlcGVuZGluZyBvbiBpZiBpdCdzIGFuIGFycmF5IG9yIG51bWJlclxuICovXG5cbmZ1bmN0aW9uIGdldFZhbHVlKHZhbHVlLCBpbmRleCwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHZhciB2ID0gdmFsdWVbaW5kZXhdO1xuICAgIHJldHVybiB2ID09IG51bGwgPyBkZWZhdWx0VmFsdWUgOiB2O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBEZWJvdW5jZSB1dGlsaXR5XG4gKi9cblxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIG1zKSB7XG4gIHZhciB0aW1lb3V0SWQ7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpOyAvLyBAdHMtaWdub3JlXG5cbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShfdGhpcywgX2FyZ3VtZW50cyk7XG4gICAgfSwgbXMpO1xuICB9O1xufVxuLyoqXG4gKiBQcmV2ZW50cyBlcnJvcnMgZnJvbSBiZWluZyB0aHJvd24gd2hpbGUgYWNjZXNzaW5nIG5lc3RlZCBtb2RpZmllciBvYmplY3RzXG4gKiBpbiBgcG9wcGVyT3B0aW9uc2BcbiAqL1xuXG5mdW5jdGlvbiBnZXRNb2RpZmllcihvYmosIGtleSkge1xuICByZXR1cm4gb2JqICYmIG9iai5tb2RpZmllcnMgJiYgb2JqLm1vZGlmaWVyc1trZXldO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGFycmF5IG9yIHN0cmluZyBpbmNsdWRlcyBhIHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gaW5jbHVkZXMoYSwgYikge1xuICByZXR1cm4gYS5pbmRleE9mKGIpID4gLTE7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIHZhbHVlIGlzIHNpbmd1bGFyLWxpa2VcbiAqL1xuXG5mdW5jdGlvbiBpc1Npbmd1bGFyKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiBoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgJ2lzVmlydHVhbCcpKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG59XG4vKipcbiAqIEZpcmVmb3ggZXh0ZW5zaW9ucyBkb24ndCBhbGxvdyBzZXR0aW5nIC5pbm5lckhUTUwgZGlyZWN0bHksIHRoaXMgd2lsbCB0cmljayBpdFxuICovXG5cbmZ1bmN0aW9uIGlubmVySFRNTCgpIHtcbiAgcmV0dXJuICdpbm5lckhUTUwnO1xufVxuLyoqXG4gKiBFdmFsdWF0ZXMgYSBmdW5jdGlvbiBpZiBvbmUsIG9yIHJldHVybnMgdGhlIHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gZXZhbHVhdGVWYWx1ZSh2YWx1ZSwgYXJncykge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nID8gdmFsdWUuYXBwbHkobnVsbCwgYXJncykgOiB2YWx1ZTtcbn1cbi8qKlxuICogU2V0cyBhIHBvcHBlckluc3RhbmNlIGBmbGlwYCBtb2RpZmllcidzIGVuYWJsZWQgc3RhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZXRGbGlwTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgdmFsdWUpIHtcbiAgbW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBtLm5hbWUgPT09ICdmbGlwJztcbiAgfSlbMF0uZW5hYmxlZCA9IHZhbHVlO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGFuIGVsZW1lbnQgY2FuIHJlY2VpdmUgZm9jdXNcbiAqIEFsd2F5cyByZXR1cm5zIHRydWUgZm9yIHZpcnR1YWwgb2JqZWN0c1xuICovXG5cbmZ1bmN0aW9uIGNhblJlY2VpdmVGb2N1cyhlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50IGluc3RhbmNlb2YgRWxlbWVudCA/IG1hdGNoZXMuY2FsbChlbGVtZW50LCAnYVtocmVmXSxhcmVhW2hyZWZdLGJ1dHRvbixkZXRhaWxzLGlucHV0LHRleHRhcmVhLHNlbGVjdCxpZnJhbWUsW3RhYmluZGV4XScpICYmICFlbGVtZW50Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSA6IHRydWU7XG59XG4vKipcbiAqIFJldHVybnMgYSBuZXcgYGRpdmAgZWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIGRpdigpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xufVxuLyoqXG4gKiBBcHBsaWVzIGEgdHJhbnNpdGlvbiBkdXJhdGlvbiB0byBhIGxpc3Qgb2YgZWxlbWVudHNcbiAqL1xuXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uRHVyYXRpb24oZWxzLCB2YWx1ZSkge1xuICBlbHMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiXCIuY29uY2F0KHZhbHVlLCBcIm1zXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFNldHMgdGhlIHZpc2liaWxpdHkgc3RhdGUgdG8gZWxlbWVudHMgc28gdGhleSBjYW4gYmVnaW4gdG8gdHJhbnNpdGlvblxuICovXG5cbmZ1bmN0aW9uIHNldFZpc2liaWxpdHlTdGF0ZShlbHMsIHN0YXRlKSB7XG4gIGVscy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgc3RhdGUpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIEV2YWx1YXRlcyB0aGUgcHJvcHMgb2JqZWN0IGJ5IG1lcmdpbmcgZGF0YSBhdHRyaWJ1dGVzIGFuZFxuICogZGlzYWJsaW5nIGNvbmZsaWN0aW5nIG9wdGlvbnMgd2hlcmUgbmVjZXNzYXJ5XG4gKi9cblxuZnVuY3Rpb24gZXZhbHVhdGVQcm9wcyhyZWZlcmVuY2UsIHByb3BzKSB7XG4gIHZhciBvdXQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjb250ZW50OiBldmFsdWF0ZVZhbHVlKHByb3BzLmNvbnRlbnQsIFtyZWZlcmVuY2VdKVxuICB9LCBwcm9wcy5pZ25vcmVBdHRyaWJ1dGVzID8ge30gOiBnZXREYXRhQXR0cmlidXRlT3B0aW9ucyhyZWZlcmVuY2UpKTtcblxuICBpZiAob3V0LmFycm93IHx8IGlzVUNCcm93c2VyKSB7XG4gICAgb3V0LmFuaW1hdGVGaWxsID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBWYWxpZGF0ZXMgYW4gb2JqZWN0IG9mIG9wdGlvbnMgd2l0aCB0aGUgdmFsaWQgZGVmYXVsdCBwcm9wcyBvYmplY3RcbiAqL1xuXG5mdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMob3B0aW9ucywgZGVmYXVsdFByb3BzKSB7XG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkoZGVmYXVsdFByb3BzLCBvcHRpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbdGlwcHldOiBgXCIuY29uY2F0KG9wdGlvbiwgXCJgIGlzIG5vdCBhIHZhbGlkIG9wdGlvblwiKSk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBpbm5lckhUTUwgb2YgYW4gZWxlbWVudFxuICovXG5cbmZ1bmN0aW9uIHNldElubmVySFRNTChlbGVtZW50LCBodG1sKSB7XG4gIGVsZW1lbnRbaW5uZXJIVE1MKCldID0gaHRtbCBpbnN0YW5jZW9mIEVsZW1lbnQgPyBodG1sW2lubmVySFRNTCgpXSA6IGh0bWw7XG59XG4vKipcbiAqIFNldHMgdGhlIGNvbnRlbnQgb2YgYSB0b29sdGlwXG4gKi9cblxuZnVuY3Rpb24gc2V0Q29udGVudChjb250ZW50RWwsIHByb3BzKSB7XG4gIGlmIChwcm9wcy5jb250ZW50IGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgIHNldElubmVySFRNTChjb250ZW50RWwsICcnKTtcbiAgICBjb250ZW50RWwuYXBwZW5kQ2hpbGQocHJvcHMuY29udGVudCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3BzLmNvbnRlbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIga2V5ID0gcHJvcHMuYWxsb3dIVE1MID8gJ2lubmVySFRNTCcgOiAndGV4dENvbnRlbnQnO1xuICAgIGNvbnRlbnRFbFtrZXldID0gcHJvcHMuY29udGVudDtcbiAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjaGlsZCBlbGVtZW50cyBvZiBhIHBvcHBlciBlbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Q2hpbGRyZW4ocG9wcGVyKSB7XG4gIHJldHVybiB7XG4gICAgdG9vbHRpcDogcG9wcGVyLnF1ZXJ5U2VsZWN0b3IoVE9PTFRJUF9TRUxFQ1RPUiksXG4gICAgYmFja2Ryb3A6IHBvcHBlci5xdWVyeVNlbGVjdG9yKEJBQ0tEUk9QX1NFTEVDVE9SKSxcbiAgICBjb250ZW50OiBwb3BwZXIucXVlcnlTZWxlY3RvcihDT05URU5UX1NFTEVDVE9SKSxcbiAgICBhcnJvdzogcG9wcGVyLnF1ZXJ5U2VsZWN0b3IoQVJST1dfU0VMRUNUT1IpIHx8IHBvcHBlci5xdWVyeVNlbGVjdG9yKFJPVU5EX0FSUk9XX1NFTEVDVE9SKVxuICB9O1xufVxuLyoqXG4gKiBBZGRzIGBkYXRhLWluZXJ0aWFgIGF0dHJpYnV0ZVxuICovXG5cbmZ1bmN0aW9uIGFkZEluZXJ0aWEodG9vbHRpcCkge1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1pbmVydGlhJywgJycpO1xufVxuLyoqXG4gKiBSZW1vdmVzIGBkYXRhLWluZXJ0aWFgIGF0dHJpYnV0ZVxuICovXG5cbmZ1bmN0aW9uIHJlbW92ZUluZXJ0aWEodG9vbHRpcCkge1xuICB0b29sdGlwLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbmVydGlhJyk7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyb3cgZWxlbWVudCBhbmQgcmV0dXJucyBpdFxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUFycm93RWxlbWVudChhcnJvd1R5cGUpIHtcbiAgdmFyIGFycm93ID0gZGl2KCk7XG5cbiAgaWYgKGFycm93VHlwZSA9PT0gJ3JvdW5kJykge1xuICAgIGFycm93LmNsYXNzTmFtZSA9ICd0aXBweS1yb3VuZGFycm93JztcbiAgICBzZXRJbm5lckhUTUwoYXJyb3csICc8c3ZnIHZpZXdCb3g9XCIwIDAgMTggN1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTAgN3MyLjAyMS0uMDE1IDUuMjUzLTQuMjE4QzYuNTg0IDEuMDUxIDcuNzk3LjAwNyA5IDBjMS4yMDMtLjAwNyAyLjQxNiAxLjAzNSAzLjc2MSAyLjc4MkMxNi4wMTIgNy4wMDUgMTggNyAxOCA3SDB6XCIvPjwvc3ZnPicpO1xuICB9IGVsc2Uge1xuICAgIGFycm93LmNsYXNzTmFtZSA9ICd0aXBweS1hcnJvdyc7XG4gIH1cblxuICByZXR1cm4gYXJyb3c7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBiYWNrZHJvcCBlbGVtZW50IGFuZCByZXR1cm5zIGl0XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlQmFja2Ryb3BFbGVtZW50KCkge1xuICB2YXIgYmFja2Ryb3AgPSBkaXYoKTtcbiAgYmFja2Ryb3AuY2xhc3NOYW1lID0gJ3RpcHB5LWJhY2tkcm9wJztcbiAgYmFja2Ryb3Auc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgJ2hpZGRlbicpO1xuICByZXR1cm4gYmFja2Ryb3A7XG59XG4vKipcbiAqIEFkZHMgaW50ZXJhY3RpdmUtcmVsYXRlZCBhdHRyaWJ1dGVzXG4gKi9cblxuZnVuY3Rpb24gYWRkSW50ZXJhY3RpdmUocG9wcGVyLCB0b29sdGlwKSB7XG4gIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWludGVyYWN0aXZlJywgJycpO1xufVxuLyoqXG4gKiBSZW1vdmVzIGludGVyYWN0aXZlLXJlbGF0ZWQgYXR0cmlidXRlc1xuICovXG5cbmZ1bmN0aW9uIHJlbW92ZUludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCkge1xuICBwb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICB0b29sdGlwLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbnRlcmFjdGl2ZScpO1xufVxuLyoqXG4gKiBBZGQvcmVtb3ZlIHRyYW5zaXRpb25lbmQgbGlzdGVuZXIgZnJvbSB0b29sdGlwXG4gKi9cblxuZnVuY3Rpb24gdXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyKHRvb2x0aXAsIGFjdGlvbiwgbGlzdGVuZXIpIHtcbiAgLy8gVUMgQnJvd3NlciBoYXNuJ3QgYWRvcHRlZCB0aGUgYHRyYW5zaXRpb25lbmRgIGV2ZW50IGRlc3BpdGUgc3VwcG9ydGluZ1xuICAvLyB1bnByZWZpeGVkIHRyYW5zaXRpb25zLi4uXG4gIHZhciBldmVudE5hbWUgPSBpc1VDQnJvd3NlciAmJiBkb2N1bWVudC5ib2R5LnN0eWxlLndlYmtpdFRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCA/ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyA6ICd0cmFuc2l0aW9uZW5kJztcbiAgdG9vbHRpcFthY3Rpb24gKyAnRXZlbnRMaXN0ZW5lciddKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQsIGlnbm9yaW5nIHNoaWZ0aW5nICh0b3Atc3RhcnQsIGV0YylcbiAqL1xuXG5mdW5jdGlvbiBnZXRCYXNpY1BsYWNlbWVudChwb3BwZXIpIHtcbiAgdmFyIGZ1bGxQbGFjZW1lbnQgPSBwb3BwZXIuZ2V0QXR0cmlidXRlKFBMQUNFTUVOVF9BVFRSSUJVVEUpO1xuICByZXR1cm4gZnVsbFBsYWNlbWVudCA/IGZ1bGxQbGFjZW1lbnQuc3BsaXQoJy0nKVswXSA6ICcnO1xufVxuLyoqXG4gKiBUcmlnZ2VycyByZWZsb3dcbiAqL1xuXG5mdW5jdGlvbiByZWZsb3cocG9wcGVyKSB7XG4gIHZvaWQgcG9wcGVyLm9mZnNldEhlaWdodDtcbn1cbi8qKlxuICogQWRkcy9yZW1vdmVzIHRoZW1lIGZyb20gdG9vbHRpcCdzIGNsYXNzTGlzdFxuICovXG5cbmZ1bmN0aW9uIHVwZGF0ZVRoZW1lKHRvb2x0aXAsIGFjdGlvbiwgdGhlbWUpIHtcbiAgdGhlbWUuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uICh0aGVtZU5hbWUpIHtcbiAgICB0b29sdGlwLmNsYXNzTGlzdFthY3Rpb25dKHRoZW1lTmFtZSArICctdGhlbWUnKTtcbiAgfSk7XG59XG4vKipcbiAqIENvbnN0cnVjdHMgdGhlIHBvcHBlciBlbGVtZW50IGFuZCByZXR1cm5zIGl0XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUG9wcGVyRWxlbWVudChpZCwgcHJvcHMpIHtcbiAgdmFyIHBvcHBlciA9IGRpdigpO1xuICBwb3BwZXIuY2xhc3NOYW1lID0gJ3RpcHB5LXBvcHBlcic7XG4gIHBvcHBlci5pZCA9IFwidGlwcHktXCIuY29uY2F0KGlkKTtcbiAgcG9wcGVyLnN0eWxlLnpJbmRleCA9ICcnICsgcHJvcHMuekluZGV4O1xuXG4gIGlmIChwcm9wcy5yb2xlKSB7XG4gICAgcG9wcGVyLnNldEF0dHJpYnV0ZSgncm9sZScsIHByb3BzLnJvbGUpO1xuICB9XG5cbiAgdmFyIHRvb2x0aXAgPSBkaXYoKTtcbiAgdG9vbHRpcC5jbGFzc05hbWUgPSAndGlwcHktdG9vbHRpcCc7XG4gIHRvb2x0aXAuc3R5bGUubWF4V2lkdGggPSBwcm9wcy5tYXhXaWR0aCArICh0eXBlb2YgcHJvcHMubWF4V2lkdGggPT09ICdudW1iZXInID8gJ3B4JyA6ICcnKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2l6ZScsIHByb3BzLnNpemUpO1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1hbmltYXRpb24nLCBwcm9wcy5hbmltYXRpb24pO1xuICB0b29sdGlwLnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0ZScsICdoaWRkZW4nKTtcbiAgdXBkYXRlVGhlbWUodG9vbHRpcCwgJ2FkZCcsIHByb3BzLnRoZW1lKTtcbiAgdmFyIGNvbnRlbnQgPSBkaXYoKTtcbiAgY29udGVudC5jbGFzc05hbWUgPSAndGlwcHktY29udGVudCc7XG4gIGNvbnRlbnQuc2V0QXR0cmlidXRlKCdkYXRhLXN0YXRlJywgJ2hpZGRlbicpO1xuXG4gIGlmIChwcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgIGFkZEludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCk7XG4gIH1cblxuICBpZiAocHJvcHMuYXJyb3cpIHtcbiAgICB0b29sdGlwLmFwcGVuZENoaWxkKGNyZWF0ZUFycm93RWxlbWVudChwcm9wcy5hcnJvd1R5cGUpKTtcbiAgfVxuXG4gIGlmIChwcm9wcy5hbmltYXRlRmlsbCkge1xuICAgIHRvb2x0aXAuYXBwZW5kQ2hpbGQoY3JlYXRlQmFja2Ryb3BFbGVtZW50KCkpO1xuICAgIHRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLWFuaW1hdGVmaWxsJywgJycpO1xuICB9XG5cbiAgaWYgKHByb3BzLmluZXJ0aWEpIHtcbiAgICBhZGRJbmVydGlhKHRvb2x0aXApO1xuICB9XG5cbiAgc2V0Q29udGVudChjb250ZW50LCBwcm9wcyk7XG4gIHRvb2x0aXAuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gIHBvcHBlci5hcHBlbmRDaGlsZCh0b29sdGlwKTtcbiAgcmV0dXJuIHBvcHBlcjtcbn1cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9wcGVyIGVsZW1lbnQgYmFzZWQgb24gdGhlIG5ldyBwcm9wc1xuICovXG5cbmZ1bmN0aW9uIHVwZGF0ZVBvcHBlckVsZW1lbnQocG9wcGVyLCBwcmV2UHJvcHMsIG5leHRQcm9wcykge1xuICB2YXIgX2dldENoaWxkcmVuID0gZ2V0Q2hpbGRyZW4ocG9wcGVyKSxcbiAgICAgIHRvb2x0aXAgPSBfZ2V0Q2hpbGRyZW4udG9vbHRpcCxcbiAgICAgIGNvbnRlbnQgPSBfZ2V0Q2hpbGRyZW4uY29udGVudCxcbiAgICAgIGJhY2tkcm9wID0gX2dldENoaWxkcmVuLmJhY2tkcm9wLFxuICAgICAgYXJyb3cgPSBfZ2V0Q2hpbGRyZW4uYXJyb3c7XG5cbiAgcG9wcGVyLnN0eWxlLnpJbmRleCA9ICcnICsgbmV4dFByb3BzLnpJbmRleDtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2l6ZScsIG5leHRQcm9wcy5zaXplKTtcbiAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0aW9uJywgbmV4dFByb3BzLmFuaW1hdGlvbik7XG4gIHRvb2x0aXAuc3R5bGUubWF4V2lkdGggPSBuZXh0UHJvcHMubWF4V2lkdGggKyAodHlwZW9mIG5leHRQcm9wcy5tYXhXaWR0aCA9PT0gJ251bWJlcicgPyAncHgnIDogJycpO1xuXG4gIGlmIChuZXh0UHJvcHMucm9sZSkge1xuICAgIHBvcHBlci5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCBuZXh0UHJvcHMucm9sZSk7XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpO1xuICB9XG5cbiAgaWYgKHByZXZQcm9wcy5jb250ZW50ICE9PSBuZXh0UHJvcHMuY29udGVudCkge1xuICAgIHNldENvbnRlbnQoY29udGVudCwgbmV4dFByb3BzKTtcbiAgfSAvLyBhbmltYXRlRmlsbFxuXG5cbiAgaWYgKCFwcmV2UHJvcHMuYW5pbWF0ZUZpbGwgJiYgbmV4dFByb3BzLmFuaW1hdGVGaWxsKSB7XG4gICAgdG9vbHRpcC5hcHBlbmRDaGlsZChjcmVhdGVCYWNrZHJvcEVsZW1lbnQoKSk7XG4gICAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYW5pbWF0ZWZpbGwnLCAnJyk7XG4gIH0gZWxzZSBpZiAocHJldlByb3BzLmFuaW1hdGVGaWxsICYmICFuZXh0UHJvcHMuYW5pbWF0ZUZpbGwpIHtcbiAgICB0b29sdGlwLnJlbW92ZUNoaWxkKGJhY2tkcm9wKTtcbiAgICB0b29sdGlwLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1hbmltYXRlZmlsbCcpO1xuICB9IC8vIGFycm93XG5cblxuICBpZiAoIXByZXZQcm9wcy5hcnJvdyAmJiBuZXh0UHJvcHMuYXJyb3cpIHtcbiAgICB0b29sdGlwLmFwcGVuZENoaWxkKGNyZWF0ZUFycm93RWxlbWVudChuZXh0UHJvcHMuYXJyb3dUeXBlKSk7XG4gIH0gZWxzZSBpZiAocHJldlByb3BzLmFycm93ICYmICFuZXh0UHJvcHMuYXJyb3cpIHtcbiAgICB0b29sdGlwLnJlbW92ZUNoaWxkKGFycm93KTtcbiAgfSAvLyBhcnJvd1R5cGVcblxuXG4gIGlmIChwcmV2UHJvcHMuYXJyb3cgJiYgbmV4dFByb3BzLmFycm93ICYmIHByZXZQcm9wcy5hcnJvd1R5cGUgIT09IG5leHRQcm9wcy5hcnJvd1R5cGUpIHtcbiAgICB0b29sdGlwLnJlcGxhY2VDaGlsZChjcmVhdGVBcnJvd0VsZW1lbnQobmV4dFByb3BzLmFycm93VHlwZSksIGFycm93KTtcbiAgfSAvLyBpbnRlcmFjdGl2ZVxuXG5cbiAgaWYgKCFwcmV2UHJvcHMuaW50ZXJhY3RpdmUgJiYgbmV4dFByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgYWRkSW50ZXJhY3RpdmUocG9wcGVyLCB0b29sdGlwKTtcbiAgfSBlbHNlIGlmIChwcmV2UHJvcHMuaW50ZXJhY3RpdmUgJiYgIW5leHRQcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgIHJlbW92ZUludGVyYWN0aXZlKHBvcHBlciwgdG9vbHRpcCk7XG4gIH0gLy8gaW5lcnRpYVxuXG5cbiAgaWYgKCFwcmV2UHJvcHMuaW5lcnRpYSAmJiBuZXh0UHJvcHMuaW5lcnRpYSkge1xuICAgIGFkZEluZXJ0aWEodG9vbHRpcCk7XG4gIH0gZWxzZSBpZiAocHJldlByb3BzLmluZXJ0aWEgJiYgIW5leHRQcm9wcy5pbmVydGlhKSB7XG4gICAgcmVtb3ZlSW5lcnRpYSh0b29sdGlwKTtcbiAgfSAvLyB0aGVtZVxuXG5cbiAgaWYgKHByZXZQcm9wcy50aGVtZSAhPT0gbmV4dFByb3BzLnRoZW1lKSB7XG4gICAgdXBkYXRlVGhlbWUodG9vbHRpcCwgJ3JlbW92ZScsIHByZXZQcm9wcy50aGVtZSk7XG4gICAgdXBkYXRlVGhlbWUodG9vbHRpcCwgJ2FkZCcsIG5leHRQcm9wcy50aGVtZSk7XG4gIH1cbn1cbi8qKlxuICogUnVucyB0aGUgY2FsbGJhY2sgYWZ0ZXIgdGhlIHBvcHBlcidzIHBvc2l0aW9uIGhhcyBiZWVuIHVwZGF0ZWRcbiAqIHVwZGF0ZSgpIGlzIGRlYm91bmNlZCB3aXRoIFByb21pc2UucmVzb2x2ZSgpIG9yIHNldFRpbWVvdXQoKVxuICogc2NoZWR1bGVVcGRhdGUoKSBpcyB1cGRhdGUoKSB3cmFwcGVkIGluIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpXG4gKi9cblxuZnVuY3Rpb24gYWZ0ZXJQb3BwZXJQb3NpdGlvblVwZGF0ZXMocG9wcGVySW5zdGFuY2UsIGNhbGxiYWNrKSB7XG4gIHZhciBwb3BwZXIgPSBwb3BwZXJJbnN0YW5jZS5wb3BwZXIsXG4gICAgICBvcHRpb25zID0gcG9wcGVySW5zdGFuY2Uub3B0aW9ucztcbiAgdmFyIG9uQ3JlYXRlID0gb3B0aW9ucy5vbkNyZWF0ZSxcbiAgICAgIG9uVXBkYXRlID0gb3B0aW9ucy5vblVwZGF0ZTtcblxuICBvcHRpb25zLm9uQ3JlYXRlID0gb3B0aW9ucy5vblVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmVmbG93KHBvcHBlcik7XG4gICAgY2FsbGJhY2soKTtcblxuICAgIGlmIChvblVwZGF0ZSkge1xuICAgICAgb25VcGRhdGUoZGF0YSk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5vbkNyZWF0ZSA9IG9uQ3JlYXRlO1xuICAgIG9wdGlvbnMub25VcGRhdGUgPSBvblVwZGF0ZTtcbiAgfTtcbn1cbi8qKlxuICogSGlkZXMgYWxsIHZpc2libGUgcG9wcGVycyBvbiB0aGUgZG9jdW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBoaWRlQWxsKCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBjaGVja0hpZGVPbkNsaWNrID0gX3JlZi5jaGVja0hpZGVPbkNsaWNrLFxuICAgICAgZXhjbHVkZSA9IF9yZWYuZXhjbHVkZSxcbiAgICAgIGR1cmF0aW9uID0gX3JlZi5kdXJhdGlvbjtcblxuICBhcnJheUZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChQT1BQRVJfU0VMRUNUT1IpKS5mb3JFYWNoKGZ1bmN0aW9uIChwb3BwZXIpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBwb3BwZXIuX3RpcHB5O1xuXG4gICAgaWYgKGluc3RhbmNlICYmIChjaGVja0hpZGVPbkNsaWNrID8gaW5zdGFuY2UucHJvcHMuaGlkZU9uQ2xpY2sgPT09IHRydWUgOiB0cnVlKSAmJiAoIWV4Y2x1ZGUgfHwgcG9wcGVyICE9PSBleGNsdWRlLnBvcHBlcikpIHtcbiAgICAgIGluc3RhbmNlLmhpZGUoZHVyYXRpb24pO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIG1vdXNlIGN1cnNvciBpcyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIncyBpbnRlcmFjdGl2ZSBib3JkZXJcbiAqIHJlZ2lvblxuICovXG5cbmZ1bmN0aW9uIGlzQ3Vyc29yT3V0c2lkZUludGVyYWN0aXZlQm9yZGVyKHBvcHBlclBsYWNlbWVudCwgcG9wcGVyUmVjdCwgZXZlbnQsIHByb3BzKSB7XG4gIGlmICghcG9wcGVyUGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgeCA9IGV2ZW50LmNsaWVudFgsXG4gICAgICB5ID0gZXZlbnQuY2xpZW50WTtcbiAgdmFyIGludGVyYWN0aXZlQm9yZGVyID0gcHJvcHMuaW50ZXJhY3RpdmVCb3JkZXIsXG4gICAgICBkaXN0YW5jZSA9IHByb3BzLmRpc3RhbmNlO1xuICB2YXIgZXhjZWVkc1RvcCA9IHBvcHBlclJlY3QudG9wIC0geSA+IChwb3BwZXJQbGFjZW1lbnQgPT09ICd0b3AnID8gaW50ZXJhY3RpdmVCb3JkZXIgKyBkaXN0YW5jZSA6IGludGVyYWN0aXZlQm9yZGVyKTtcbiAgdmFyIGV4Y2VlZHNCb3R0b20gPSB5IC0gcG9wcGVyUmVjdC5ib3R0b20gPiAocG9wcGVyUGxhY2VtZW50ID09PSAnYm90dG9tJyA/IGludGVyYWN0aXZlQm9yZGVyICsgZGlzdGFuY2UgOiBpbnRlcmFjdGl2ZUJvcmRlcik7XG4gIHZhciBleGNlZWRzTGVmdCA9IHBvcHBlclJlY3QubGVmdCAtIHggPiAocG9wcGVyUGxhY2VtZW50ID09PSAnbGVmdCcgPyBpbnRlcmFjdGl2ZUJvcmRlciArIGRpc3RhbmNlIDogaW50ZXJhY3RpdmVCb3JkZXIpO1xuICB2YXIgZXhjZWVkc1JpZ2h0ID0geCAtIHBvcHBlclJlY3QucmlnaHQgPiAocG9wcGVyUGxhY2VtZW50ID09PSAncmlnaHQnID8gaW50ZXJhY3RpdmVCb3JkZXIgKyBkaXN0YW5jZSA6IGludGVyYWN0aXZlQm9yZGVyKTtcbiAgcmV0dXJuIGV4Y2VlZHNUb3AgfHwgZXhjZWVkc0JvdHRvbSB8fCBleGNlZWRzTGVmdCB8fCBleGNlZWRzUmlnaHQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGRpc3RhbmNlIG9mZnNldCwgdGFraW5nIGludG8gYWNjb3VudCB0aGUgZGVmYXVsdCBvZmZzZXQgZHVlIHRvXG4gKiB0aGUgdHJhbnNmb3JtOiB0cmFuc2xhdGUoKSBydWxlICgxMHB4KSBpbiBDU1NcbiAqL1xuXG5mdW5jdGlvbiBnZXRPZmZzZXREaXN0YW5jZUluUHgoZGlzdGFuY2UpIHtcbiAgcmV0dXJuIC0oZGlzdGFuY2UgLSAxMCkgKyAncHgnO1xufVxuXG52YXIgaXNVc2luZ1RvdWNoID0gZmFsc2U7XG5mdW5jdGlvbiBvbkRvY3VtZW50VG91Y2goKSB7XG4gIGlmIChpc1VzaW5nVG91Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpc1VzaW5nVG91Y2ggPSB0cnVlO1xuXG4gIGlmIChpc0lPUykge1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChJT1NfQ0xBU1MpO1xuICB9XG5cbiAgaWYgKHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uRG9jdW1lbnRNb3VzZU1vdmUpO1xuICB9XG59XG52YXIgbGFzdE1vdXNlTW92ZVRpbWUgPSAwO1xuZnVuY3Rpb24gb25Eb2N1bWVudE1vdXNlTW92ZSgpIHtcbiAgdmFyIG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpOyAvLyBDaHJvbWUgNjArIGlzIDEgbW91c2Vtb3ZlIHBlciBhbmltYXRpb24gZnJhbWUsIHVzZSAyMG1zIHRpbWUgZGlmZmVyZW5jZVxuXG4gIGlmIChub3cgLSBsYXN0TW91c2VNb3ZlVGltZSA8IDIwKSB7XG4gICAgaXNVc2luZ1RvdWNoID0gZmFsc2U7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Eb2N1bWVudE1vdXNlTW92ZSk7XG5cbiAgICBpZiAoIWlzSU9TKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoSU9TX0NMQVNTKTtcbiAgICB9XG4gIH1cblxuICBsYXN0TW91c2VNb3ZlVGltZSA9IG5vdztcbn1cbmZ1bmN0aW9uIG9uRG9jdW1lbnRDbGljayhldmVudCkge1xuICAvLyBTaW11bGF0ZWQgZXZlbnRzIGRpc3BhdGNoZWQgb24gdGhlIGRvY3VtZW50XG4gIGlmICghKGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGhpZGVBbGwoKTtcbiAgfSAvLyBDbGlja2VkIG9uIGFuIGludGVyYWN0aXZlIHBvcHBlclxuXG5cbiAgdmFyIHBvcHBlciA9IGNsb3Nlc3QoZXZlbnQudGFyZ2V0LCBQT1BQRVJfU0VMRUNUT1IpO1xuXG4gIGlmIChwb3BwZXIgJiYgcG9wcGVyLl90aXBweSAmJiBwb3BwZXIuX3RpcHB5LnByb3BzLmludGVyYWN0aXZlKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENsaWNrZWQgb24gYSByZWZlcmVuY2VcblxuXG4gIHZhciByZWZlcmVuY2UgPSBjbG9zZXN0Q2FsbGJhY2soZXZlbnQudGFyZ2V0LCBmdW5jdGlvbiAoZWwpIHtcbiAgICByZXR1cm4gZWwuX3RpcHB5ICYmIGVsLl90aXBweS5yZWZlcmVuY2UgPT09IGVsO1xuICB9KTtcblxuICBpZiAocmVmZXJlbmNlKSB7XG4gICAgdmFyIGluc3RhbmNlID0gcmVmZXJlbmNlLl90aXBweTtcblxuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgdmFyIGlzQ2xpY2tUcmlnZ2VyID0gaW5jbHVkZXMoaW5zdGFuY2UucHJvcHMudHJpZ2dlciB8fCAnJywgJ2NsaWNrJyk7XG5cbiAgICAgIGlmIChpc1VzaW5nVG91Y2ggfHwgaXNDbGlja1RyaWdnZXIpIHtcbiAgICAgICAgcmV0dXJuIGhpZGVBbGwoe1xuICAgICAgICAgIGV4Y2x1ZGU6IGluc3RhbmNlLFxuICAgICAgICAgIGNoZWNrSGlkZU9uQ2xpY2s6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5oaWRlT25DbGljayAhPT0gdHJ1ZSB8fCBpc0NsaWNrVHJpZ2dlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGluc3RhbmNlLmNsZWFyRGVsYXlUaW1lb3V0cygpO1xuICAgIH1cbiAgfVxuXG4gIGhpZGVBbGwoe1xuICAgIGNoZWNrSGlkZU9uQ2xpY2s6IHRydWVcbiAgfSk7XG59XG5mdW5jdGlvbiBvbldpbmRvd0JsdXIoKSB7XG4gIHZhciBfZG9jdW1lbnQgPSBkb2N1bWVudCxcbiAgICAgIGFjdGl2ZUVsZW1lbnQgPSBfZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICBpZiAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50LmJsdXIgJiYgYWN0aXZlRWxlbWVudC5fdGlwcHkpIHtcbiAgICBhY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgfVxufVxuLyoqXG4gKiBBZGRzIHRoZSBuZWVkZWQgZ2xvYmFsIGV2ZW50IGxpc3RlbmVyc1xuICovXG5cbmZ1bmN0aW9uIGJpbmRHbG9iYWxFdmVudExpc3RlbmVycygpIHtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkRvY3VtZW50Q2xpY2ssIHRydWUpO1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Eb2N1bWVudFRvdWNoLCBQQVNTSVZFKTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbldpbmRvd0JsdXIpO1xufVxuXG52YXIgaWRDb3VudGVyID0gMTtcbi8qKlxuICogQ3JlYXRlcyBhbmQgcmV0dXJucyBhIFRpcHB5IG9iamVjdC4gV2UncmUgdXNpbmcgYSBjbG9zdXJlIHBhdHRlcm4gaW5zdGVhZCBvZlxuICogYSBjbGFzcyBzbyB0aGF0IHRoZSBleHBvc2VkIG9iamVjdCBBUEkgaXMgY2xlYW4gd2l0aG91dCBwcml2YXRlIG1lbWJlcnNcbiAqIHByZWZpeGVkIHdpdGggYF9gLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVRpcHB5KHJlZmVyZW5jZSwgY29sbGVjdGlvblByb3BzKSB7XG4gIHZhciBwcm9wcyA9IGV2YWx1YXRlUHJvcHMocmVmZXJlbmNlLCBjb2xsZWN0aW9uUHJvcHMpOyAvLyBJZiB0aGUgcmVmZXJlbmNlIHNob3VsZG4ndCBoYXZlIG11bHRpcGxlIHRpcHB5cywgcmV0dXJuIG51bGwgZWFybHlcblxuICBpZiAoIXByb3BzLm11bHRpcGxlICYmIHJlZmVyZW5jZS5fdGlwcHkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PSDwn5SSIFByaXZhdGUgbWVtYmVycyDwn5SSID09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuICB2YXIgbGFzdFRyaWdnZXJFdmVudFR5cGU7XG4gIHZhciBsYXN0TW91c2VNb3ZlRXZlbnQ7XG4gIHZhciBzaG93VGltZW91dElkO1xuICB2YXIgaGlkZVRpbWVvdXRJZDtcbiAgdmFyIGFuaW1hdGlvbkZyYW1lSWQ7XG4gIHZhciBpc1NjaGVkdWxlZFRvU2hvdyA9IGZhbHNlO1xuICB2YXIgY3VycmVudFBhcmVudE5vZGU7XG4gIHZhciBwcmV2aW91c1BsYWNlbWVudDtcbiAgdmFyIHdhc1Zpc2libGVEdXJpbmdQcmV2aW91c1VwZGF0ZSA9IGZhbHNlO1xuICB2YXIgY3VycmVudFRyYW5zaXRpb25FbmRMaXN0ZW5lcjtcbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICB2YXIgZGVib3VuY2VkT25Nb3VzZU1vdmUgPSBwcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlID4gMCA/IGRlYm91bmNlKG9uTW91c2VNb3ZlLCBwcm9wcy5pbnRlcmFjdGl2ZURlYm91bmNlKSA6IG9uTW91c2VNb3ZlO1xuICAvKiA9PT09PT09PT09PT09PT09PT09PT09PSDwn5SRIFB1YmxpYyBtZW1iZXJzIPCflJEgPT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICB2YXIgaWQgPSBpZENvdW50ZXIrKztcbiAgdmFyIHBvcHBlciA9IGNyZWF0ZVBvcHBlckVsZW1lbnQoaWQsIHByb3BzKTtcbiAgdmFyIHBvcHBlckNoaWxkcmVuID0gZ2V0Q2hpbGRyZW4ocG9wcGVyKTtcbiAgdmFyIHBvcHBlckluc3RhbmNlID0gbnVsbDtcbiAgdmFyIHN0YXRlID0ge1xuICAgIC8vIElzIHRoZSBpbnN0YW5jZSBjdXJyZW50bHkgZW5hYmxlZD9cbiAgICBpc0VuYWJsZWQ6IHRydWUsXG4gICAgLy8gSXMgdGhlIHRpcHB5IGN1cnJlbnRseSBzaG93aW5nIGFuZCBub3QgdHJhbnNpdGlvbmluZyBvdXQ/XG4gICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAvLyBIYXMgdGhlIGluc3RhbmNlIGJlZW4gZGVzdHJveWVkP1xuICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAvLyBJcyB0aGUgdGlwcHkgY3VycmVudGx5IG1vdW50ZWQgdG8gdGhlIERPTT9cbiAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgIC8vIEhhcyB0aGUgdGlwcHkgZmluaXNoZWQgdHJhbnNpdGlvbmluZyBpbj9cbiAgICBpc1Nob3duOiBmYWxzZVxuICB9O1xuICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgLy8gcHJvcGVydGllc1xuICAgIGlkOiBpZCxcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgICBwb3BwZXI6IHBvcHBlcixcbiAgICBwb3BwZXJDaGlsZHJlbjogcG9wcGVyQ2hpbGRyZW4sXG4gICAgcG9wcGVySW5zdGFuY2U6IHBvcHBlckluc3RhbmNlLFxuICAgIHByb3BzOiBwcm9wcyxcbiAgICBzdGF0ZTogc3RhdGUsXG4gICAgLy8gbWV0aG9kc1xuICAgIGNsZWFyRGVsYXlUaW1lb3V0czogY2xlYXJEZWxheVRpbWVvdXRzLFxuICAgIHNldDogc2V0LFxuICAgIHNldENvbnRlbnQ6IHNldENvbnRlbnQkJDEsXG4gICAgc2hvdzogc2hvdyxcbiAgICBoaWRlOiBoaWRlLFxuICAgIGVuYWJsZTogZW5hYmxlLFxuICAgIGRpc2FibGU6IGRpc2FibGUsXG4gICAgZGVzdHJveTogZGVzdHJveVxuICAgIC8qID09PT09PT09PT09PT09PT09PT09IEluaXRpYWwgaW5zdGFuY2UgbXV0YXRpb25zID09PT09PT09PT09PT09PT09PT0gKi9cblxuICB9O1xuICByZWZlcmVuY2UuX3RpcHB5ID0gaW5zdGFuY2U7XG4gIHBvcHBlci5fdGlwcHkgPSBpbnN0YW5jZTtcbiAgYWRkVHJpZ2dlcnNUb1JlZmVyZW5jZSgpO1xuXG4gIGlmICghcHJvcHMubGF6eSkge1xuICAgIGNyZWF0ZVBvcHBlckluc3RhbmNlKCk7XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICBpZiAocHJvcHMuc2hvd09uSW5pdCkge1xuICAgIHNjaGVkdWxlU2hvdygpO1xuICB9IC8vIEVuc3VyZSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgY2FuIHJlY2VpdmUgZm9jdXMgKGFuZCBpcyBub3QgYSBkZWxlZ2F0ZSlcblxuXG4gIGlmIChwcm9wcy5hMTF5ICYmICFwcm9wcy50YXJnZXQgJiYgIWNhblJlY2VpdmVGb2N1cyhyZWZlcmVuY2UpKSB7XG4gICAgcmVmZXJlbmNlLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xuICB9IC8vIFByZXZlbnQgYSB0aXBweSB3aXRoIGEgZGVsYXkgZnJvbSBoaWRpbmcgaWYgdGhlIGN1cnNvciBsZWZ0IHRoZW4gcmV0dXJuZWRcbiAgLy8gYmVmb3JlIGl0IHN0YXJ0ZWQgaGlkaW5nXG5cblxuICBwb3BwZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgJiYgbGFzdFRyaWdnZXJFdmVudFR5cGUgPT09ICdtb3VzZWVudGVyJykge1xuICAgICAgc2NoZWR1bGVTaG93KGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICBwb3BwZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgbGFzdFRyaWdnZXJFdmVudFR5cGUgPT09ICdtb3VzZWVudGVyJykge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZGVib3VuY2VkT25Nb3VzZU1vdmUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpbnN0YW5jZTtcbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT0g8J+UkiBQcml2YXRlIG1ldGhvZHMg8J+UkiA9PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBmb2xsb3cgY3Vyc29yIGxpc3RlbmVyXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyKCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhbnMgdXAgb2xkIGxpc3RlbmVyc1xuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNsZWFudXBPbGRNb3VzZUxpc3RlbmVycygpIHtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBzY2hlZHVsZUhpZGUpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGRlYm91bmNlZE9uTW91c2VNb3ZlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cmFuc2l0aW9uYWJsZSBpbm5lciBlbGVtZW50cyB1c2VkIGluIHNob3cvaGlkZSBtZXRob2RzXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbmFibGVFbGVtZW50cygpIHtcbiAgICByZXR1cm4gW2luc3RhbmNlLnBvcHBlckNoaWxkcmVuLnRvb2x0aXAsIGluc3RhbmNlLnBvcHBlckNoaWxkcmVuLmJhY2tkcm9wLCBpbnN0YW5jZS5wb3BwZXJDaGlsZHJlbi5jb250ZW50XTtcbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgaW5zdGFuY2UgaXMgaW4gYGZvbGxvd0N1cnNvcmAgbW9kZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkge1xuICAgIHJldHVybiBpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IgJiYgIWlzVXNpbmdUb3VjaCAmJiBsYXN0VHJpZ2dlckV2ZW50VHlwZSAhPT0gJ2ZvY3VzJztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdG9vbHRpcCdzIHBvc2l0aW9uIG9uIGVhY2ggYW5pbWF0aW9uIGZyYW1lXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gbWFrZVN0aWNreSgpIHtcbiAgICBzZXRUcmFuc2l0aW9uRHVyYXRpb24oW2luc3RhbmNlLnBvcHBlcl0sIGlzSUUgPyAwIDogaW5zdGFuY2UucHJvcHMudXBkYXRlRHVyYXRpb24pO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgICBpZiAoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodXBkYXRlUG9zaXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VHJhbnNpdGlvbkR1cmF0aW9uKFtpbnN0YW5jZS5wb3BwZXJdLCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVQb3NpdGlvbigpO1xuICB9XG4gIC8qKlxuICAgKiBJbnZva2VzIGEgY2FsbGJhY2sgb25jZSB0aGUgdG9vbHRpcCBoYXMgZnVsbHkgdHJhbnNpdGlvbmVkIG91dFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbmVkT3V0KGR1cmF0aW9uLCBjYWxsYmFjaykge1xuICAgIG9uVHJhbnNpdGlvbkVuZChkdXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgJiYgY3VycmVudFBhcmVudE5vZGUgJiYgY3VycmVudFBhcmVudE5vZGUuY29udGFpbnMoaW5zdGFuY2UucG9wcGVyKSkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnZva2VzIGEgY2FsbGJhY2sgb25jZSB0aGUgdG9vbHRpcCBoYXMgZnVsbHkgdHJhbnNpdGlvbmVkIGluXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uZWRJbihkdXJhdGlvbiwgY2FsbGJhY2spIHtcbiAgICBvblRyYW5zaXRpb25FbmQoZHVyYXRpb24sIGNhbGxiYWNrKTtcbiAgfVxuICAvKipcbiAgICogSW52b2tlcyBhIGNhbGxiYWNrIG9uY2UgdGhlIHRvb2x0aXAncyBDU1MgdHJhbnNpdGlvbiBlbmRzXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKGR1cmF0aW9uLCBjYWxsYmFjaykge1xuICAgIHZhciB0b29sdGlwID0gaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4udG9vbHRpcDtcbiAgICAvKipcbiAgICAgKiBMaXN0ZW5lciBhZGRlZCBhcyB0aGUgYHRyYW5zaXRpb25lbmRgIGhhbmRsZXJcbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0b29sdGlwKSB7XG4gICAgICAgIHVwZGF0ZVRyYW5zaXRpb25FbmRMaXN0ZW5lcih0b29sdGlwLCAncmVtb3ZlJywgbGlzdGVuZXIpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0gLy8gTWFrZSBjYWxsYmFjayBzeW5jaHJvbm91cyBpZiBkdXJhdGlvbiBpcyAwXG4gICAgLy8gYHRyYW5zaXRpb25lbmRgIHdvbid0IGZpcmUgb3RoZXJ3aXNlXG5cblxuICAgIGlmIChkdXJhdGlvbiA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlVHJhbnNpdGlvbkVuZExpc3RlbmVyKHRvb2x0aXAsICdyZW1vdmUnLCBjdXJyZW50VHJhbnNpdGlvbkVuZExpc3RlbmVyKTtcbiAgICB1cGRhdGVUcmFuc2l0aW9uRW5kTGlzdGVuZXIodG9vbHRpcCwgJ2FkZCcsIGxpc3RlbmVyKTtcbiAgICBjdXJyZW50VHJhbnNpdGlvbkVuZExpc3RlbmVyID0gbGlzdGVuZXI7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhlIHJlZmVyZW5jZSBhbmQgc3RvcmVzIGl0IGluIGBsaXN0ZW5lcnNgXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb24oZXZlbnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgIGluc3RhbmNlLnJlZmVyZW5jZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgbGlzdGVuZXJzLnB1c2goe1xuICAgICAgZXZlbnRUeXBlOiBldmVudFR5cGUsXG4gICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGxpc3RlbmVycyB0byB0aGUgcmVmZXJlbmNlIGJhc2VkIG9uIHRoZSBgdHJpZ2dlcmAgcHJvcFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGFkZFRyaWdnZXJzVG9SZWZlcmVuY2UoKSB7XG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnRvdWNoSG9sZCAmJiAhaW5zdGFuY2UucHJvcHMudGFyZ2V0KSB7XG4gICAgICBvbigndG91Y2hzdGFydCcsIG9uVHJpZ2dlciwgUEFTU0lWRSk7XG4gICAgICBvbigndG91Y2hlbmQnLCBvbk1vdXNlTGVhdmUsIFBBU1NJVkUpO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnByb3BzLnRyaWdnZXIudHJpbSgpLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRUeXBlKSB7XG4gICAgICBpZiAoZXZlbnRUeXBlID09PSAnbWFudWFsJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIE5vbi1kZWxlZ2F0ZXNcblxuXG4gICAgICBpZiAoIWluc3RhbmNlLnByb3BzLnRhcmdldCkge1xuICAgICAgICBvbihldmVudFR5cGUsIG9uVHJpZ2dlcik7XG5cbiAgICAgICAgc3dpdGNoIChldmVudFR5cGUpIHtcbiAgICAgICAgICBjYXNlICdtb3VzZWVudGVyJzpcbiAgICAgICAgICAgIG9uKCdtb3VzZWxlYXZlJywgb25Nb3VzZUxlYXZlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnZm9jdXMnOlxuICAgICAgICAgICAgb24oaXNJRSA/ICdmb2N1c291dCcgOiAnYmx1cicsIG9uQmx1cik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRGVsZWdhdGVzXG4gICAgICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XG4gICAgICAgICAgY2FzZSAnbW91c2VlbnRlcic6XG4gICAgICAgICAgICBvbignbW91c2VvdmVyJywgb25EZWxlZ2F0ZVNob3cpO1xuICAgICAgICAgICAgb24oJ21vdXNlb3V0Jywgb25EZWxlZ2F0ZUhpZGUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdmb2N1cyc6XG4gICAgICAgICAgICBvbignZm9jdXNpbicsIG9uRGVsZWdhdGVTaG93KTtcbiAgICAgICAgICAgIG9uKCdmb2N1c291dCcsIG9uRGVsZWdhdGVIaWRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgICAgb24oZXZlbnRUeXBlLCBvbkRlbGVnYXRlU2hvdyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSByZWZlcmVuY2VcbiAgICovXG5cblxuICBmdW5jdGlvbiByZW1vdmVUcmlnZ2Vyc0Zyb21SZWZlcmVuY2UoKSB7XG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBldmVudFR5cGUgPSBfcmVmLmV2ZW50VHlwZSxcbiAgICAgICAgICBoYW5kbGVyID0gX3JlZi5oYW5kbGVyLFxuICAgICAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gICAgICBpbnN0YW5jZS5yZWZlcmVuY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xuICAgIGxpc3RlbmVycyA9IFtdO1xuICB9XG4gIC8qKlxuICAgKiBQb3NpdGlvbnMgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIG5lYXIgdGhlIGN1cnNvclxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IoZXZlbnQpIHtcbiAgICB2YXIgX2xhc3RNb3VzZU1vdmVFdmVudCA9IGxhc3RNb3VzZU1vdmVFdmVudCA9IGV2ZW50LFxuICAgICAgICBjbGllbnRYID0gX2xhc3RNb3VzZU1vdmVFdmVudC5jbGllbnRYLFxuICAgICAgICBjbGllbnRZID0gX2xhc3RNb3VzZU1vdmVFdmVudC5jbGllbnRZO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRW5zdXJlIHZpcnR1YWwgcmVmZXJlbmNlIGlzIHBhZGRlZCB0byBwcmV2ZW50IHRvb2x0aXAgZnJvbVxuICAgIC8vIG92ZXJmbG93aW5nLiBNYXliZSBQb3BwZXIuanMgaXNzdWU/XG5cblxuICAgIHZhciBwbGFjZW1lbnQgPSBnZXRCYXNpY1BsYWNlbWVudChpbnN0YW5jZS5wb3BwZXIpO1xuICAgIHZhciBwYWRkaW5nID0gaW5zdGFuY2UucHJvcHMuYXJyb3cgPyBQQURESU5HICsgKGluc3RhbmNlLnByb3BzLmFycm93VHlwZSA9PT0gJ3JvdW5kJyA/IDE4IDogMTYpIDogUEFERElORztcbiAgICB2YXIgaXNWZXJ0aWNhbFBsYWNlbWVudCA9IGluY2x1ZGVzKFsndG9wJywgJ2JvdHRvbSddLCBwbGFjZW1lbnQpO1xuICAgIHZhciBpc0hvcml6b250YWxQbGFjZW1lbnQgPSBpbmNsdWRlcyhbJ2xlZnQnLCAncmlnaHQnXSwgcGxhY2VtZW50KTsgLy8gVG9wIC8gbGVmdCBib3VuZGFyeVxuXG4gICAgdmFyIHggPSBpc1ZlcnRpY2FsUGxhY2VtZW50ID8gTWF0aC5tYXgocGFkZGluZywgY2xpZW50WCkgOiBjbGllbnRYO1xuICAgIHZhciB5ID0gaXNIb3Jpem9udGFsUGxhY2VtZW50ID8gTWF0aC5tYXgocGFkZGluZywgY2xpZW50WSkgOiBjbGllbnRZOyAvLyBCb3R0b20gLyByaWdodCBib3VuZGFyeVxuXG4gICAgaWYgKGlzVmVydGljYWxQbGFjZW1lbnQgJiYgeCA+IHBhZGRpbmcpIHtcbiAgICAgIHggPSBNYXRoLm1pbihjbGllbnRYLCB3aW5kb3cuaW5uZXJXaWR0aCAtIHBhZGRpbmcpO1xuICAgIH1cblxuICAgIGlmIChpc0hvcml6b250YWxQbGFjZW1lbnQgJiYgeSA+IHBhZGRpbmcpIHtcbiAgICAgIHkgPSBNYXRoLm1pbihjbGllbnRZLCB3aW5kb3cuaW5uZXJIZWlnaHQgLSBwYWRkaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGluc3RhbmNlLnJlZmVyZW5jZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgZm9sbG93Q3Vyc29yID0gaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yO1xuICAgIHZhciBpc0hvcml6b250YWwgPSBmb2xsb3dDdXJzb3IgPT09ICdob3Jpem9udGFsJztcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IGZvbGxvd0N1cnNvciA9PT0gJ3ZlcnRpY2FsJztcbiAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5yZWZlcmVuY2UgPSBfZXh0ZW5kcyh7fSwgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UucmVmZXJlbmNlLCB7XG4gICAgICBnZXRCb3VuZGluZ0NsaWVudFJlY3Q6IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgdG9wOiBpc0hvcml6b250YWwgPyByZWN0LnRvcCA6IHksXG4gICAgICAgICAgYm90dG9tOiBpc0hvcml6b250YWwgPyByZWN0LmJvdHRvbSA6IHksXG4gICAgICAgICAgbGVmdDogaXNWZXJ0aWNhbCA/IHJlY3QubGVmdCA6IHgsXG4gICAgICAgICAgcmlnaHQ6IGlzVmVydGljYWwgPyByZWN0LnJpZ2h0IDogeFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGNsaWVudFdpZHRoOiAwLFxuICAgICAgY2xpZW50SGVpZ2h0OiAwXG4gICAgfSk7XG4gICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uuc2NoZWR1bGVVcGRhdGUoKTtcblxuICAgIGlmIChmb2xsb3dDdXJzb3IgPT09ICdpbml0aWFsJyAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSB0aXBweSBpbnN0YW5jZSBmb3IgYSBkZWxlZ2F0ZSB3aGVuIGl0J3MgYmVlbiB0cmlnZ2VyZWRcbiAgICovXG5cblxuICBmdW5jdGlvbiBjcmVhdGVEZWxlZ2F0ZUNoaWxkVGlwcHkoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIHZhciB0YXJnZXRFbCA9IGNsb3Nlc3QoZXZlbnQudGFyZ2V0LCBpbnN0YW5jZS5wcm9wcy50YXJnZXQpO1xuXG4gICAgICBpZiAodGFyZ2V0RWwgJiYgIXRhcmdldEVsLl90aXBweSkge1xuICAgICAgICBjcmVhdGVUaXBweSh0YXJnZXRFbCwgX2V4dGVuZHMoe30sIGluc3RhbmNlLnByb3BzLCB7XG4gICAgICAgICAgY29udGVudDogZXZhbHVhdGVWYWx1ZShjb2xsZWN0aW9uUHJvcHMuY29udGVudCwgW3RhcmdldEVsXSksXG4gICAgICAgICAgYXBwZW5kVG86IGNvbGxlY3Rpb25Qcm9wcy5hcHBlbmRUbyxcbiAgICAgICAgICB0YXJnZXQ6ICcnLFxuICAgICAgICAgIHNob3dPbkluaXQ6IHRydWVcbiAgICAgICAgfSkpO1xuICAgICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXZlbnQgbGlzdGVuZXIgaW52b2tlZCB1cG9uIHRyaWdnZXJcbiAgICovXG5cblxuICBmdW5jdGlvbiBvblRyaWdnZXIoZXZlbnQpIHtcbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCB8fCBpc0V2ZW50TGlzdGVuZXJTdG9wcGVkKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICBsYXN0VHJpZ2dlckV2ZW50VHlwZSA9IGV2ZW50LnR5cGU7XG5cbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE1vdXNlRXZlbnQpIHtcbiAgICAgICAgbGFzdE1vdXNlTW92ZUV2ZW50ID0gZXZlbnQ7XG4gICAgICB9XG4gICAgfSAvLyBUb2dnbGUgc2hvdy9oaWRlIHdoZW4gY2xpY2tpbmcgY2xpY2stdHJpZ2dlcmVkIHRvb2x0aXBzXG5cblxuICAgIGlmIChldmVudC50eXBlID09PSAnY2xpY2snICYmIGluc3RhbmNlLnByb3BzLmhpZGVPbkNsaWNrICE9PSBmYWxzZSAmJiBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUpIHtcbiAgICAgIHNjaGVkdWxlSGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXZlbnQgbGlzdGVuZXIgdXNlZCBmb3IgaW50ZXJhY3RpdmUgdG9vbHRpcHMgdG8gZGV0ZWN0IHdoZW4gdGhleSBzaG91bGRcbiAgICogaGlkZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGV2ZW50KSB7XG4gICAgdmFyIHJlZmVyZW5jZVRoZUN1cnNvcklzT3ZlciA9IGNsb3Nlc3RDYWxsYmFjayhldmVudC50YXJnZXQsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuIGVsLl90aXBweTtcbiAgICB9KTtcbiAgICB2YXIgaXNDdXJzb3JPdmVyUG9wcGVyID0gY2xvc2VzdChldmVudC50YXJnZXQsIFBPUFBFUl9TRUxFQ1RPUikgPT09IGluc3RhbmNlLnBvcHBlcjtcbiAgICB2YXIgaXNDdXJzb3JPdmVyUmVmZXJlbmNlID0gcmVmZXJlbmNlVGhlQ3Vyc29ySXNPdmVyID09PSBpbnN0YW5jZS5yZWZlcmVuY2U7XG5cbiAgICBpZiAoaXNDdXJzb3JPdmVyUG9wcGVyIHx8IGlzQ3Vyc29yT3ZlclJlZmVyZW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0N1cnNvck91dHNpZGVJbnRlcmFjdGl2ZUJvcmRlcihnZXRCYXNpY1BsYWNlbWVudChpbnN0YW5jZS5wb3BwZXIpLCBpbnN0YW5jZS5wb3BwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGV2ZW50LCBpbnN0YW5jZS5wcm9wcykpIHtcbiAgICAgIGNsZWFudXBPbGRNb3VzZUxpc3RlbmVycygpO1xuICAgICAgc2NoZWR1bGVIaWRlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFdmVudCBsaXN0ZW5lciBpbnZva2VkIHVwb24gbW91c2VsZWF2ZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uTW91c2VMZWF2ZShldmVudCkge1xuICAgIGlmIChpc0V2ZW50TGlzdGVuZXJTdG9wcGVkKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgc2NoZWR1bGVIaWRlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGRlYm91bmNlZE9uTW91c2VNb3ZlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZUhpZGUoKTtcbiAgfVxuICAvKipcbiAgICogRXZlbnQgbGlzdGVuZXIgaW52b2tlZCB1cG9uIGJsdXJcbiAgICovXG5cblxuICBmdW5jdGlvbiBvbkJsdXIoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBpbnN0YW5jZS5yZWZlcmVuY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUgJiYgZXZlbnQucmVsYXRlZFRhcmdldCAmJiBpbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoZXZlbnQucmVsYXRlZFRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzY2hlZHVsZUhpZGUoKTtcbiAgfVxuICAvKipcbiAgICogRXZlbnQgbGlzdGVuZXIgaW52b2tlZCB3aGVuIGEgY2hpbGQgdGFyZ2V0IGlzIHRyaWdnZXJlZFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9uRGVsZWdhdGVTaG93KGV2ZW50KSB7XG4gICAgaWYgKGNsb3Nlc3QoZXZlbnQudGFyZ2V0LCBpbnN0YW5jZS5wcm9wcy50YXJnZXQpKSB7XG4gICAgICBzY2hlZHVsZVNob3coZXZlbnQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXZlbnQgbGlzdGVuZXIgaW52b2tlZCB3aGVuIGEgY2hpbGQgdGFyZ2V0IHNob3VsZCBoaWRlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb25EZWxlZ2F0ZUhpZGUoZXZlbnQpIHtcbiAgICBpZiAoY2xvc2VzdChldmVudC50YXJnZXQsIGluc3RhbmNlLnByb3BzLnRhcmdldCkpIHtcbiAgICAgIHNjaGVkdWxlSGlkZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiBhbiBldmVudCBsaXN0ZW5lciBzaG91bGQgc3RvcCBmdXJ0aGVyIGV4ZWN1dGlvbiBkdWUgdG8gdGhlXG4gICAqIGB0b3VjaEhvbGRgIG9wdGlvblxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGlzRXZlbnRMaXN0ZW5lclN0b3BwZWQoZXZlbnQpIHtcbiAgICB2YXIgc3VwcG9ydHNUb3VjaCA9ICdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdztcbiAgICB2YXIgaXNUb3VjaEV2ZW50ID0gaW5jbHVkZXMoZXZlbnQudHlwZSwgJ3RvdWNoJyk7XG4gICAgdmFyIHRvdWNoSG9sZCA9IGluc3RhbmNlLnByb3BzLnRvdWNoSG9sZDtcbiAgICByZXR1cm4gc3VwcG9ydHNUb3VjaCAmJiBpc1VzaW5nVG91Y2ggJiYgdG91Y2hIb2xkICYmICFpc1RvdWNoRXZlbnQgfHwgaXNVc2luZ1RvdWNoICYmICF0b3VjaEhvbGQgJiYgaXNUb3VjaEV2ZW50O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBwb3BwZXIgaW5zdGFuY2UgZm9yIHRoZSBpbnN0YW5jZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlckluc3RhbmNlKCkge1xuICAgIHZhciBwb3BwZXJPcHRpb25zID0gaW5zdGFuY2UucHJvcHMucG9wcGVyT3B0aW9ucztcbiAgICB2YXIgX2luc3RhbmNlJHBvcHBlckNoaWxkID0gaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4sXG4gICAgICAgIHRvb2x0aXAgPSBfaW5zdGFuY2UkcG9wcGVyQ2hpbGQudG9vbHRpcCxcbiAgICAgICAgYXJyb3cgPSBfaW5zdGFuY2UkcG9wcGVyQ2hpbGQuYXJyb3c7XG4gICAgdmFyIHByZXZlbnRPdmVyZmxvd01vZGlmaWVyID0gZ2V0TW9kaWZpZXIocG9wcGVyT3B0aW9ucywgJ3ByZXZlbnRPdmVyZmxvdycpO1xuXG4gICAgZnVuY3Rpb24gYXBwbHlNdXRhdGlvbnMoZGF0YSkge1xuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLmZsaXAgJiYgIWluc3RhbmNlLnByb3BzLmZsaXBPblVwZGF0ZSkge1xuICAgICAgICBpZiAoZGF0YS5mbGlwcGVkKSB7XG4gICAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5wbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldEZsaXBNb2RpZmllckVuYWJsZWQoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UubW9kaWZpZXJzLCBmYWxzZSk7XG4gICAgICB9IC8vIEFwcGx5IGFsbCBvZiB0aGUgcG9wcGVyJ3MgYXR0cmlidXRlcyB0byB0aGUgdG9vdGlwIG5vZGUgYXMgd2VsbC5cbiAgICAgIC8vIEFsbG93cyB1c2VycyB0byBhdm9pZCB1c2luZyB0aGUgLnRpcHB5LXBvcHBlciBzZWxlY3RvciBmb3IgdGhlbWVzLlxuXG5cbiAgICAgIHRvb2x0aXAuc2V0QXR0cmlidXRlKFBMQUNFTUVOVF9BVFRSSUJVVEUsIGRhdGEucGxhY2VtZW50KTtcblxuICAgICAgaWYgKGRhdGEuYXR0cmlidXRlc1tPVVRfT0ZfQk9VTkRBUklFU19BVFRSSUJVVEVdICE9PSBmYWxzZSkge1xuICAgICAgICB0b29sdGlwLnNldEF0dHJpYnV0ZShPVVRfT0ZfQk9VTkRBUklFU19BVFRSSUJVVEUsICcnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvb2x0aXAucmVtb3ZlQXR0cmlidXRlKE9VVF9PRl9CT1VOREFSSUVTX0FUVFJJQlVURSk7XG4gICAgICB9IC8vIFByZXZlbnRzIGEgdHJhbnNpdGlvbiB3aGVuIGNoYW5naW5nIHBsYWNlbWVudHMgKHdoaWxlIHRpcHB5IGlzIHZpc2libGUpXG4gICAgICAvLyBmb3Igc2Nyb2xsL3Jlc2l6ZSB1cGRhdGVzXG5cblxuICAgICAgaWYgKHByZXZpb3VzUGxhY2VtZW50ICYmIHByZXZpb3VzUGxhY2VtZW50ICE9PSBkYXRhLnBsYWNlbWVudCAmJiB3YXNWaXNpYmxlRHVyaW5nUHJldmlvdXNVcGRhdGUpIHtcbiAgICAgICAgdG9vbHRpcC5zdHlsZS50cmFuc2l0aW9uID0gJ25vbmUnO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRvb2x0aXAuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcHJldmlvdXNQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgICAgIHdhc1Zpc2libGVEdXJpbmdQcmV2aW91c1VwZGF0ZSA9IGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZTtcbiAgICAgIHZhciBiYXNpY1BsYWNlbWVudCA9IGdldEJhc2ljUGxhY2VtZW50KGluc3RhbmNlLnBvcHBlcik7XG4gICAgICB2YXIgc3R5bGVzID0gdG9vbHRpcC5zdHlsZTsgLy8gQWNjb3VudCBmb3IgdGhlIGBkaXN0YW5jZWAgb2Zmc2V0XG5cbiAgICAgIHN0eWxlcy50b3AgPSBzdHlsZXMuYm90dG9tID0gc3R5bGVzLmxlZnQgPSBzdHlsZXMucmlnaHQgPSAnJztcbiAgICAgIHN0eWxlc1tiYXNpY1BsYWNlbWVudF0gPSBnZXRPZmZzZXREaXN0YW5jZUluUHgoaW5zdGFuY2UucHJvcHMuZGlzdGFuY2UpO1xuICAgICAgdmFyIHBhZGRpbmcgPSBwcmV2ZW50T3ZlcmZsb3dNb2RpZmllciAmJiBwcmV2ZW50T3ZlcmZsb3dNb2RpZmllci5wYWRkaW5nICE9PSB1bmRlZmluZWQgPyBwcmV2ZW50T3ZlcmZsb3dNb2RpZmllci5wYWRkaW5nIDogUEFERElORztcbiAgICAgIHZhciBpc1BhZGRpbmdOdW1iZXIgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ251bWJlcic7XG5cbiAgICAgIHZhciBjb21wdXRlZFBhZGRpbmcgPSBfZXh0ZW5kcyh7XG4gICAgICAgIHRvcDogaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wLFxuICAgICAgICBib3R0b206IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmJvdHRvbSxcbiAgICAgICAgbGVmdDogaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcubGVmdCxcbiAgICAgICAgcmlnaHQ6IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLnJpZ2h0XG4gICAgICB9LCAhaXNQYWRkaW5nTnVtYmVyICYmIHBhZGRpbmcpO1xuXG4gICAgICBjb21wdXRlZFBhZGRpbmdbYmFzaWNQbGFjZW1lbnRdID0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyArIGluc3RhbmNlLnByb3BzLmRpc3RhbmNlIDogKHBhZGRpbmdbYmFzaWNQbGFjZW1lbnRdIHx8IDApICsgaW5zdGFuY2UucHJvcHMuZGlzdGFuY2U7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5tb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHJldHVybiBtLm5hbWUgPT09ICdwcmV2ZW50T3ZlcmZsb3cnO1xuICAgICAgfSlbMF0ucGFkZGluZyA9IGNvbXB1dGVkUGFkZGluZztcbiAgICB9XG5cbiAgICB2YXIgY29uZmlnID0gX2V4dGVuZHMoe1xuICAgICAgcGxhY2VtZW50OiBpbnN0YW5jZS5wcm9wcy5wbGFjZW1lbnRcbiAgICB9LCBwb3BwZXJPcHRpb25zLCB7XG4gICAgICBtb2RpZmllcnM6IF9leHRlbmRzKHt9LCBwb3BwZXJPcHRpb25zID8gcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMgOiB7fSwge1xuICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IF9leHRlbmRzKHtcbiAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogaW5zdGFuY2UucHJvcHMuYm91bmRhcnksXG4gICAgICAgICAgcGFkZGluZzogUEFERElOR1xuICAgICAgICB9LCBwcmV2ZW50T3ZlcmZsb3dNb2RpZmllciksXG4gICAgICAgIGFycm93OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgZWxlbWVudDogYXJyb3csXG4gICAgICAgICAgZW5hYmxlZDogISFhcnJvd1xuICAgICAgICB9LCBnZXRNb2RpZmllcihwb3BwZXJPcHRpb25zLCAnYXJyb3cnKSksXG4gICAgICAgIGZsaXA6IF9leHRlbmRzKHtcbiAgICAgICAgICBlbmFibGVkOiBpbnN0YW5jZS5wcm9wcy5mbGlwLFxuICAgICAgICAgIC8vIFRoZSB0b29sdGlwIGlzIG9mZnNldCBieSAxMHB4IGZyb20gdGhlIHBvcHBlciBpbiBDU1MsXG4gICAgICAgICAgLy8gd2UgbmVlZCB0byBhY2NvdW50IGZvciBpdHMgZGlzdGFuY2VcbiAgICAgICAgICBwYWRkaW5nOiBpbnN0YW5jZS5wcm9wcy5kaXN0YW5jZSArIFBBRERJTkcsXG4gICAgICAgICAgYmVoYXZpb3I6IGluc3RhbmNlLnByb3BzLmZsaXBCZWhhdmlvclxuICAgICAgICB9LCBnZXRNb2RpZmllcihwb3BwZXJPcHRpb25zLCAnZmxpcCcpKSxcbiAgICAgICAgb2Zmc2V0OiBfZXh0ZW5kcyh7XG4gICAgICAgICAgb2Zmc2V0OiBpbnN0YW5jZS5wcm9wcy5vZmZzZXRcbiAgICAgICAgfSwgZ2V0TW9kaWZpZXIocG9wcGVyT3B0aW9ucywgJ29mZnNldCcpKVxuICAgICAgfSksXG4gICAgICAvLyBUaGlzIGdldHMgaW52b2tlZCB3aGVuIGNhbGxpbmcgYC5zZXQoKWAgYW5kIHVwZGF0aW5nIGEgcG9wcGVyXG4gICAgICAvLyBpbnN0YW5jZSBkZXBlbmRlbmN5LCBzaW5jZSBhIG5ldyBwb3BwZXIgaW5zdGFuY2UgZ2V0cyBjcmVhdGVkXG4gICAgICBvbkNyZWF0ZTogZnVuY3Rpb24gb25DcmVhdGUoZGF0YSkge1xuICAgICAgICBhcHBseU11dGF0aW9ucyhkYXRhKTtcblxuICAgICAgICBpZiAocG9wcGVyT3B0aW9ucyAmJiBwb3BwZXJPcHRpb25zLm9uQ3JlYXRlKSB7XG4gICAgICAgICAgcG9wcGVyT3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIFRoaXMgZ2V0cyBpbnZva2VkIG9uIGluaXRpYWwgY3JlYXRlIGFuZCBzaG93KCkvc2Nyb2xsL3Jlc2l6ZSB1cGRhdGUuXG4gICAgICAvLyBUaGlzIGlzIGR1ZSB0byBgYWZ0ZXJQb3BwZXJQb3NpdGlvblVwZGF0ZXNgIG92ZXJ3cml0aW5nIG9uQ3JlYXRlKClcbiAgICAgIC8vIHdpdGggb25VcGRhdGUoKVxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEpIHtcbiAgICAgICAgYXBwbHlNdXRhdGlvbnMoZGF0YSk7XG5cbiAgICAgICAgaWYgKHBvcHBlck9wdGlvbnMgJiYgcG9wcGVyT3B0aW9ucy5vblVwZGF0ZSkge1xuICAgICAgICAgIHBvcHBlck9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlID0gbmV3IFBvcHBlcihpbnN0YW5jZS5yZWZlcmVuY2UsIGluc3RhbmNlLnBvcHBlciwgY29uZmlnKTtcbiAgfVxuICAvKipcbiAgICogTW91bnRzIHRoZSB0b29sdGlwIHRvIHRoZSBET00sIGNhbGxiYWNrIHRvIHNob3cgdG9vbHRpcCBpcyBydW4gKiphZnRlcioqXG4gICAqIHBvcHBlcidzIHBvc2l0aW9uIGhhcyB1cGRhdGVkXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gbW91bnQoY2FsbGJhY2spIHtcbiAgICB2YXIgc2hvdWxkRW5hYmxlTGlzdGVuZXJzID0gIWhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkgJiYgIShpbnN0YW5jZS5wcm9wcy5mb2xsb3dDdXJzb3IgPT09ICdpbml0aWFsJyAmJiBpc1VzaW5nVG91Y2gpO1xuXG4gICAgaWYgKCFpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgY3JlYXRlUG9wcGVySW5zdGFuY2UoKTtcblxuICAgICAgaWYgKCFzaG91bGRFbmFibGVMaXN0ZW5lcnMpIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSkge1xuICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5zY2hlZHVsZVVwZGF0ZSgpO1xuXG4gICAgICAgIGlmIChzaG91bGRFbmFibGVMaXN0ZW5lcnMpIHtcbiAgICAgICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNldEZsaXBNb2RpZmllckVuYWJsZWQoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UubW9kaWZpZXJzLCBpbnN0YW5jZS5wcm9wcy5mbGlwKTtcbiAgICB9IC8vIElmIHRoZSBpbnN0YW5jZSBwcmV2aW91c2x5IGhhZCBmb2xsb3dDdXJzb3IgYmVoYXZpb3IsIGl0IHdpbGwgYmVcbiAgICAvLyBwb3NpdGlvbmVkIGluY29ycmVjdGx5IGlmIHRyaWdnZXJlZCBieSBgZm9jdXNgIGFmdGVyd2FyZHMuXG4gICAgLy8gVXBkYXRlIHRoZSByZWZlcmVuY2UgYmFjayB0byB0aGUgcmVhbCBET00gZWxlbWVudFxuXG5cbiAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS5yZWZlcmVuY2UgPSBpbnN0YW5jZS5yZWZlcmVuY2U7XG4gICAgdmFyIGFycm93ID0gaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uYXJyb3c7XG5cbiAgICBpZiAoaGFzRm9sbG93Q3Vyc29yQmVoYXZpb3IoKSkge1xuICAgICAgaWYgKGFycm93KSB7XG4gICAgICAgIGFycm93LnN0eWxlLm1hcmdpbiA9ICcwJztcbiAgICAgIH1cblxuICAgICAgaWYgKGxhc3RNb3VzZU1vdmVFdmVudCkge1xuICAgICAgICBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKGxhc3RNb3VzZU1vdmVFdmVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcnJvdykge1xuICAgICAgYXJyb3cuc3R5bGUubWFyZ2luID0gJyc7XG4gICAgfSAvLyBBbGxvdyBmb2xsb3dDdXJzb3I6ICdpbml0aWFsJyBvbiB0b3VjaCBkZXZpY2VzXG5cblxuICAgIGlmIChpc1VzaW5nVG91Y2ggJiYgbGFzdE1vdXNlTW92ZUV2ZW50ICYmIGluc3RhbmNlLnByb3BzLmZvbGxvd0N1cnNvciA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICBwb3NpdGlvblZpcnR1YWxSZWZlcmVuY2VOZWFyQ3Vyc29yKGxhc3RNb3VzZU1vdmVFdmVudCk7XG5cbiAgICAgIGlmIChhcnJvdykge1xuICAgICAgICBhcnJvdy5zdHlsZS5tYXJnaW4gPSAnMCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWZ0ZXJQb3BwZXJQb3NpdGlvblVwZGF0ZXMoaW5zdGFuY2UucG9wcGVySW5zdGFuY2UsIGNhbGxiYWNrKTtcbiAgICB2YXIgYXBwZW5kVG8gPSBpbnN0YW5jZS5wcm9wcy5hcHBlbmRUbztcbiAgICBjdXJyZW50UGFyZW50Tm9kZSA9IGFwcGVuZFRvID09PSAncGFyZW50JyA/IGluc3RhbmNlLnJlZmVyZW5jZS5wYXJlbnROb2RlIDogZXZhbHVhdGVWYWx1ZShhcHBlbmRUbywgW2luc3RhbmNlLnJlZmVyZW5jZV0pO1xuXG4gICAgaWYgKCFjdXJyZW50UGFyZW50Tm9kZS5jb250YWlucyhpbnN0YW5jZS5wb3BwZXIpKSB7XG4gICAgICBjdXJyZW50UGFyZW50Tm9kZS5hcHBlbmRDaGlsZChpbnN0YW5jZS5wb3BwZXIpO1xuICAgICAgaW5zdGFuY2UucHJvcHMub25Nb3VudChpbnN0YW5jZSk7XG4gICAgICBpbnN0YW5jZS5zdGF0ZS5pc01vdW50ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0dXAgYmVmb3JlIHNob3coKSBpcyBpbnZva2VkIChkZWxheXMsIGV0Yy4pXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2NoZWR1bGVTaG93KGV2ZW50KSB7XG4gICAgY2xlYXJEZWxheVRpbWVvdXRzKCk7XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJcyBhIGRlbGVnYXRlLCBjcmVhdGUgYW4gaW5zdGFuY2UgZm9yIHRoZSBjaGlsZCB0YXJnZXRcblxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnRhcmdldCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZURlbGVnYXRlQ2hpbGRUaXBweShldmVudCk7XG4gICAgfVxuXG4gICAgaXNTY2hlZHVsZWRUb1Nob3cgPSB0cnVlO1xuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLndhaXQpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5wcm9wcy53YWl0KGluc3RhbmNlLCBldmVudCk7XG4gICAgfSAvLyBJZiB0aGUgdG9vbHRpcCBoYXMgYSBkZWxheSwgd2UgbmVlZCB0byBiZSBsaXN0ZW5pbmcgdG8gdGhlIG1vdXNlbW92ZSBhc1xuICAgIC8vIHNvb24gYXMgdGhlIHRyaWdnZXIgZXZlbnQgaXMgZmlyZWQsIHNvIHRoYXQgaXQncyBpbiB0aGUgY29ycmVjdCBwb3NpdGlvblxuICAgIC8vIHVwb24gbW91bnQuXG4gICAgLy8gRWRnZSBjYXNlOiBpZiB0aGUgdG9vbHRpcCBpcyBzdGlsbCBtb3VudGVkLCBidXQgdGhlbiBzY2hlZHVsZVNob3coKSBpc1xuICAgIC8vIGNhbGxlZCwgaXQgY2F1c2VzIGEganVtcC5cblxuXG4gICAgaWYgKGhhc0ZvbGxvd0N1cnNvckJlaGF2aW9yKCkgJiYgIWluc3RhbmNlLnN0YXRlLmlzTW91bnRlZCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgcG9zaXRpb25WaXJ0dWFsUmVmZXJlbmNlTmVhckN1cnNvcik7XG4gICAgfVxuXG4gICAgdmFyIGRlbGF5ID0gZ2V0VmFsdWUoaW5zdGFuY2UucHJvcHMuZGVsYXksIDAsIGRlZmF1bHRQcm9wcy5kZWxheSk7XG5cbiAgICBpZiAoZGVsYXkpIHtcbiAgICAgIHNob3dUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2hvdygpO1xuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG93KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTZXR1cCBiZWZvcmUgaGlkZSgpIGlzIGludm9rZWQgKGRlbGF5cywgZXRjLilcbiAgICovXG5cblxuICBmdW5jdGlvbiBzY2hlZHVsZUhpZGUoKSB7XG4gICAgY2xlYXJEZWxheVRpbWVvdXRzKCk7XG5cbiAgICBpZiAoIWluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSkge1xuICAgICAgcmV0dXJuIHJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgaXNTY2hlZHVsZWRUb1Nob3cgPSBmYWxzZTtcbiAgICB2YXIgZGVsYXkgPSBnZXRWYWx1ZShpbnN0YW5jZS5wcm9wcy5kZWxheSwgMSwgZGVmYXVsdFByb3BzLmRlbGF5KTtcblxuICAgIGlmIChkZWxheSkge1xuICAgICAgaGlkZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZpeGVzIGEgYHRyYW5zaXRpb25lbmRgIHByb2JsZW0gd2hlbiBpdCBmaXJlcyAxIGZyYW1lIHRvb1xuICAgICAgLy8gbGF0ZSBzb21ldGltZXMsIHdlIGRvbid0IHdhbnQgaGlkZSgpIHRvIGJlIGNhbGxlZC5cbiAgICAgIGFuaW1hdGlvbkZyYW1lSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICBoaWRlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyogPT09PT09PT09PT09PT09PT09PT09PT0g8J+UkSBQdWJsaWMgbWV0aG9kcyDwn5SRID09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgdGhlIGluc3RhbmNlIHRvIGFsbG93IGl0IHRvIHNob3cgb3IgaGlkZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQgPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBEaXNhYmxlcyB0aGUgaW5zdGFuY2UgdG8gZGlzYWxsb3cgaXQgdG8gc2hvdyBvciBoaWRlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc0VuYWJsZWQgPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIHBlbmRpbmcgdGltZW91dHMgcmVsYXRlZCB0byB0aGUgYGRlbGF5YCBwcm9wIGlmIGFueVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNsZWFyRGVsYXlUaW1lb3V0cygpIHtcbiAgICBjbGVhclRpbWVvdXQoc2hvd1RpbWVvdXRJZCk7XG4gICAgY2xlYXJUaW1lb3V0KGhpZGVUaW1lb3V0SWQpO1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGFuaW1hdGlvbkZyYW1lSWQpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIG5ldyBwcm9wcyBmb3IgdGhlIGluc3RhbmNlIGFuZCByZWRyYXdzIHRoZSB0b29sdGlwXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2V0KG9wdGlvbnMpIHtcbiAgICAvLyBCYWNrd2FyZHMtY29tcGF0aWJsZSBhZnRlciBUeXBlU2NyaXB0IGNoYW5nZVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zLCBkZWZhdWx0UHJvcHMpO1xuICAgIHZhciBwcmV2UHJvcHMgPSBpbnN0YW5jZS5wcm9wcztcbiAgICB2YXIgbmV4dFByb3BzID0gZXZhbHVhdGVQcm9wcyhpbnN0YW5jZS5yZWZlcmVuY2UsIF9leHRlbmRzKHt9LCBpbnN0YW5jZS5wcm9wcywgb3B0aW9ucywge1xuICAgICAgaWdub3JlQXR0cmlidXRlczogdHJ1ZVxuICAgIH0pKTtcbiAgICBuZXh0UHJvcHMuaWdub3JlQXR0cmlidXRlcyA9IGhhc093blByb3BlcnR5KG9wdGlvbnMsICdpZ25vcmVBdHRyaWJ1dGVzJykgPyBvcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMgfHwgZmFsc2UgOiBwcmV2UHJvcHMuaWdub3JlQXR0cmlidXRlcztcbiAgICBpbnN0YW5jZS5wcm9wcyA9IG5leHRQcm9wcztcblxuICAgIGlmIChoYXNPd25Qcm9wZXJ0eShvcHRpb25zLCAndHJpZ2dlcicpIHx8IGhhc093blByb3BlcnR5KG9wdGlvbnMsICd0b3VjaEhvbGQnKSkge1xuICAgICAgcmVtb3ZlVHJpZ2dlcnNGcm9tUmVmZXJlbmNlKCk7XG4gICAgICBhZGRUcmlnZ2Vyc1RvUmVmZXJlbmNlKCk7XG4gICAgfVxuXG4gICAgaWYgKGhhc093blByb3BlcnR5KG9wdGlvbnMsICdpbnRlcmFjdGl2ZURlYm91bmNlJykpIHtcbiAgICAgIGNsZWFudXBPbGRNb3VzZUxpc3RlbmVycygpO1xuICAgICAgZGVib3VuY2VkT25Nb3VzZU1vdmUgPSBkZWJvdW5jZShvbk1vdXNlTW92ZSwgb3B0aW9ucy5pbnRlcmFjdGl2ZURlYm91bmNlIHx8IDApO1xuICAgIH1cblxuICAgIHVwZGF0ZVBvcHBlckVsZW1lbnQoaW5zdGFuY2UucG9wcGVyLCBwcmV2UHJvcHMsIG5leHRQcm9wcyk7XG4gICAgaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4gPSBnZXRDaGlsZHJlbihpbnN0YW5jZS5wb3BwZXIpO1xuXG4gICAgaWYgKGluc3RhbmNlLnBvcHBlckluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZS51cGRhdGUoKTtcblxuICAgICAgaWYgKFBPUFBFUl9JTlNUQU5DRV9ERVBFTkRFTkNJRVMuc29tZShmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkob3B0aW9ucywgcHJvcCkgJiYgb3B0aW9uc1twcm9wXSAhPT0gcHJldlByb3BzW3Byb3BdO1xuICAgICAgfSkpIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgICBjcmVhdGVQb3BwZXJJbnN0YW5jZSgpO1xuXG4gICAgICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5zdGFuY2UucHJvcHMuZm9sbG93Q3Vyc29yICYmIGxhc3RNb3VzZU1vdmVFdmVudCkge1xuICAgICAgICAgIHBvc2l0aW9uVmlydHVhbFJlZmVyZW5jZU5lYXJDdXJzb3IobGFzdE1vdXNlTW92ZUV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2hvcnRjdXQgZm9yIC5zZXQoeyBjb250ZW50OiBuZXdDb250ZW50IH0pXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc2V0Q29udGVudCQkMShjb250ZW50KSB7XG4gICAgc2V0KHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2hvd3MgdGhlIHRvb2x0aXBcbiAgICovXG5cblxuICBmdW5jdGlvbiBzaG93KCkge1xuICAgIHZhciBkdXJhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZ2V0VmFsdWUoaW5zdGFuY2UucHJvcHMuZHVyYXRpb24sIDAsIGRlZmF1bHRQcm9wcy5kdXJhdGlvblsxXSk7XG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNEZXN0cm95ZWQgfHwgIWluc3RhbmNlLnN0YXRlLmlzRW5hYmxlZCB8fCBpc1VzaW5nVG91Y2ggJiYgIWluc3RhbmNlLnByb3BzLnRvdWNoKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTdGFuZGFyZGl6ZSBgZGlzYWJsZWRgIGJlaGF2aW9yIGFjcm9zcyBicm93c2Vycy5cbiAgICAvLyBGaXJlZm94IGFsbG93cyBldmVudHMgb24gZGlzYWJsZWQgZWxlbWVudHMsIGJ1dCBDaHJvbWUgZG9lc24ndC5cbiAgICAvLyBVc2luZyBhIHdyYXBwZXIgZWxlbWVudCAoaS5lLiA8c3Bhbj4pIGlzIHJlY29tbWVuZGVkLlxuXG5cbiAgICBpZiAoaW5zdGFuY2UucmVmZXJlbmNlLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5vblNob3coaW5zdGFuY2UpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnBvcHBlci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIGluc3RhbmNlLnN0YXRlLmlzVmlzaWJsZSA9IHRydWU7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGluc3RhbmNlLnJlZmVyZW5jZS5jbGFzc0xpc3QuYWRkKEFDVElWRV9DTEFTUyk7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zaXRpb25hYmxlRWxlbWVudHMgPSBnZXRUcmFuc2l0aW9uYWJsZUVsZW1lbnRzKCk7IC8vIFByZXZlbnQgYSB0cmFuc2l0aW9uIGlmIHRoZSBwb3BwZXIgaXMgYXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudFxuXG4gICAgc2V0VHJhbnNpdGlvbkR1cmF0aW9uKHRyYW5zaXRpb25hYmxlRWxlbWVudHMuY29uY2F0KGluc3RhbmNlLnBvcHBlciksIDApO1xuICAgIG1vdW50KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaW5zdGFuY2Uuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRG91YmxlIHVwZGF0ZSB3aWxsIGFwcGx5IGNvcnJlY3QgbXV0YXRpb25zXG5cblxuICAgICAgaWYgKCFoYXNGb2xsb3dDdXJzb3JCZWhhdmlvcigpKSB7XG4gICAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uYmFja2Ryb3ApIHtcbiAgICAgICAgaW5zdGFuY2UucG9wcGVyQ2hpbGRyZW4uY29udGVudC5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSBNYXRoLnJvdW5kKGR1cmF0aW9uIC8gMTIpICsgJ21zJztcbiAgICAgIH1cblxuICAgICAgaWYgKGluc3RhbmNlLnByb3BzLnN0aWNreSkge1xuICAgICAgICBtYWtlU3RpY2t5KCk7XG4gICAgICB9XG5cbiAgICAgIHNldFRyYW5zaXRpb25EdXJhdGlvbihbaW5zdGFuY2UucG9wcGVyXSwgcHJvcHMudXBkYXRlRHVyYXRpb24pO1xuICAgICAgc2V0VHJhbnNpdGlvbkR1cmF0aW9uKHRyYW5zaXRpb25hYmxlRWxlbWVudHMsIGR1cmF0aW9uKTtcbiAgICAgIHNldFZpc2liaWxpdHlTdGF0ZSh0cmFuc2l0aW9uYWJsZUVsZW1lbnRzLCAndmlzaWJsZScpO1xuICAgICAgb25UcmFuc2l0aW9uZWRJbihkdXJhdGlvbiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaW5zdGFuY2UucHJvcHMuYXJpYSkge1xuICAgICAgICAgIGluc3RhbmNlLnJlZmVyZW5jZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLVwiLmNvbmNhdChpbnN0YW5jZS5wcm9wcy5hcmlhKSwgaW5zdGFuY2UucG9wcGVyLmlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluc3RhbmNlLnByb3BzLm9uU2hvd24oaW5zdGFuY2UpO1xuICAgICAgICBpbnN0YW5jZS5zdGF0ZS5pc1Nob3duID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBIaWRlcyB0aGUgdG9vbHRpcFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBnZXRWYWx1ZShpbnN0YW5jZS5wcm9wcy5kdXJhdGlvbiwgMSwgZGVmYXVsdFByb3BzLmR1cmF0aW9uWzFdKTtcblxuICAgIGlmIChpbnN0YW5jZS5zdGF0ZS5pc0Rlc3Ryb3llZCB8fCAhaW5zdGFuY2Uuc3RhdGUuaXNFbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLm9uSGlkZShpbnN0YW5jZSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5zdGFuY2UucG9wcGVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc1Zpc2libGUgPSBmYWxzZTtcbiAgICBpbnN0YW5jZS5zdGF0ZS5pc1Nob3duID0gZmFsc2U7XG4gICAgd2FzVmlzaWJsZUR1cmluZ1ByZXZpb3VzVXBkYXRlID0gZmFsc2U7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMuaW50ZXJhY3RpdmUpIHtcbiAgICAgIGluc3RhbmNlLnJlZmVyZW5jZS5jbGFzc0xpc3QucmVtb3ZlKEFDVElWRV9DTEFTUyk7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zaXRpb25hYmxlRWxlbWVudHMgPSBnZXRUcmFuc2l0aW9uYWJsZUVsZW1lbnRzKCk7XG4gICAgc2V0VHJhbnNpdGlvbkR1cmF0aW9uKHRyYW5zaXRpb25hYmxlRWxlbWVudHMsIGR1cmF0aW9uKTtcbiAgICBzZXRWaXNpYmlsaXR5U3RhdGUodHJhbnNpdGlvbmFibGVFbGVtZW50cywgJ2hpZGRlbicpO1xuICAgIG9uVHJhbnNpdGlvbmVkT3V0KGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWlzU2NoZWR1bGVkVG9TaG93KSB7XG4gICAgICAgIHJlbW92ZUZvbGxvd0N1cnNvckxpc3RlbmVyKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnN0YW5jZS5wcm9wcy5hcmlhKSB7XG4gICAgICAgIGluc3RhbmNlLnJlZmVyZW5jZS5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLVwiLmNvbmNhdChpbnN0YW5jZS5wcm9wcy5hcmlhKSk7XG4gICAgICB9XG5cbiAgICAgIGluc3RhbmNlLnBvcHBlckluc3RhbmNlLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2Uub3B0aW9ucy5wbGFjZW1lbnQgPSBpbnN0YW5jZS5wcm9wcy5wbGFjZW1lbnQ7XG4gICAgICBjdXJyZW50UGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpbnN0YW5jZS5wb3BwZXIpO1xuICAgICAgaW5zdGFuY2UucHJvcHMub25IaWRkZW4oaW5zdGFuY2UpO1xuICAgICAgaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSB0b29sdGlwXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGVzdHJveShkZXN0cm95VGFyZ2V0SW5zdGFuY2VzKSB7XG4gICAgaWYgKGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiB0aGUgcG9wcGVyIGlzIGN1cnJlbnRseSBtb3VudGVkIHRvIHRoZSBET00sIHdlIHdhbnQgdG8gZW5zdXJlIGl0IGdldHNcbiAgICAvLyBoaWRkZW4gYW5kIHVubW91bnRlZCBpbnN0YW50bHkgdXBvbiBkZXN0cnVjdGlvblxuXG5cbiAgICBpZiAoaW5zdGFuY2Uuc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICBoaWRlKDApO1xuICAgIH1cblxuICAgIHJlbW92ZVRyaWdnZXJzRnJvbVJlZmVyZW5jZSgpO1xuICAgIGRlbGV0ZSBpbnN0YW5jZS5yZWZlcmVuY2UuX3RpcHB5O1xuXG4gICAgaWYgKGluc3RhbmNlLnByb3BzLnRhcmdldCAmJiBkZXN0cm95VGFyZ2V0SW5zdGFuY2VzKSB7XG4gICAgICBhcnJheUZyb20oaW5zdGFuY2UucmVmZXJlbmNlLnF1ZXJ5U2VsZWN0b3JBbGwoaW5zdGFuY2UucHJvcHMudGFyZ2V0KSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKGNoaWxkLl90aXBweSkge1xuICAgICAgICAgIGNoaWxkLl90aXBweS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wb3BwZXJJbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2UucG9wcGVySW5zdGFuY2UuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnN0YXRlLmlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEdyb3VwcyBhbiBhcnJheSBvZiBpbnN0YW5jZXMgYnkgdGFraW5nIGNvbnRyb2wgb2YgdGhlaXIgcHJvcHMgZHVyaW5nXG4gKiBjZXJ0YWluIGxpZmVjeWNsZXMuXG4gKi9cblxuZnVuY3Rpb24gZ3JvdXAoaW5zdGFuY2VzKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkZGVsYXkgPSBfcmVmLmRlbGF5LFxuICAgICAgZGVsYXkgPSBfcmVmJGRlbGF5ID09PSB2b2lkIDAgPyBpbnN0YW5jZXNbMF0ucHJvcHMuZGVsYXkgOiBfcmVmJGRlbGF5LFxuICAgICAgX3JlZiRkdXJhdGlvbiA9IF9yZWYuZHVyYXRpb24sXG4gICAgICBkdXJhdGlvbiA9IF9yZWYkZHVyYXRpb24gPT09IHZvaWQgMCA/IDAgOiBfcmVmJGR1cmF0aW9uO1xuXG4gIC8vIEFscmVhZHkgZ3JvdXBlZC4gQ2Fubm90IGdyb3VwIGluc3RhbmNlcyBtb3JlIHRoYW4gb25jZSAoeWV0KSBvciBzdGFsZSBsaWZlY3ljbGVcbiAgLy8gY2xvc3VyZXMgd2lsbCBiZSBpbnZva2VkLCBjYXVzaW5nIGEgc3RhY2sgb3ZlcmZsb3dcbiAgaWYgKGluc3RhbmNlcy5zb21lKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eShpbnN0YW5jZSwgJ19vcmlnaW5hbFByb3BzJyk7XG4gIH0pKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGlzQW55VGlwcHlPcGVuID0gZmFsc2U7XG4gIGluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlLl9vcmlnaW5hbFByb3BzID0gX2V4dGVuZHMoe30sIGluc3RhbmNlLnByb3BzKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2V0SXNBbnlUaXBweU9wZW4odmFsdWUpIHtcbiAgICBpc0FueVRpcHB5T3BlbiA9IHZhbHVlO1xuICAgIHVwZGF0ZUluc3RhbmNlcygpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25TaG93KGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMub25TaG93KGluc3RhbmNlKTtcblxuICAgIGluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgaW5zdGFuY2Uuc2V0KHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uXG4gICAgICB9KTtcbiAgICAgIGluc3RhbmNlLmhpZGUoKTtcbiAgICB9KTtcbiAgICBzZXRJc0FueVRpcHB5T3Blbih0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uSGlkZShpbnN0YW5jZSkge1xuICAgIGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLm9uSGlkZShpbnN0YW5jZSk7XG5cbiAgICBzZXRJc0FueVRpcHB5T3BlbihmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblNob3duKGluc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMub25TaG93bihpbnN0YW5jZSk7XG5cbiAgICBpbnN0YW5jZS5zZXQoe1xuICAgICAgZHVyYXRpb246IGluc3RhbmNlLl9vcmlnaW5hbFByb3BzLmR1cmF0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVJbnN0YW5jZXMoKSB7XG4gICAgaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS5zZXQoe1xuICAgICAgICBvblNob3c6IG9uU2hvdyxcbiAgICAgICAgb25TaG93bjogb25TaG93bixcbiAgICAgICAgb25IaWRlOiBvbkhpZGUsXG4gICAgICAgIGRlbGF5OiBpc0FueVRpcHB5T3BlbiA/IFswLCBBcnJheS5pc0FycmF5KGRlbGF5KSA/IGRlbGF5WzFdIDogZGVsYXldIDogZGVsYXksXG4gICAgICAgIGR1cmF0aW9uOiBpc0FueVRpcHB5T3BlbiA/IGR1cmF0aW9uIDogaW5zdGFuY2UuX29yaWdpbmFsUHJvcHMuZHVyYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlSW5zdGFuY2VzKCk7XG59XG5cbnZhciBnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kID0gZmFsc2U7XG4vKipcbiAqIEV4cG9ydGVkIG1vZHVsZVxuICovXG5cbmZ1bmN0aW9uIHRpcHB5KHRhcmdldHMsIG9wdGlvbnMpIHtcbiAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMgfHwge30sIGRlZmF1bHRQcm9wcyk7XG5cbiAgaWYgKCFnbG9iYWxFdmVudExpc3RlbmVyc0JvdW5kKSB7XG4gICAgYmluZEdsb2JhbEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgZ2xvYmFsRXZlbnRMaXN0ZW5lcnNCb3VuZCA9IHRydWU7XG4gIH1cblxuICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgZGVmYXVsdFByb3BzLCBvcHRpb25zKTsgLy8gSWYgdGhleSBhcmUgc3BlY2lmeWluZyBhIHZpcnR1YWwgcG9zaXRpb25pbmcgcmVmZXJlbmNlLCB3ZSBuZWVkIHRvIHBvbHlmaWxsXG4gIC8vIHNvbWUgbmF0aXZlIERPTSBwcm9wc1xuXG5cbiAgaWYgKGlzQmFyZVZpcnR1YWxFbGVtZW50KHRhcmdldHMpKSB7XG4gICAgcG9seWZpbGxFbGVtZW50UHJvdG90eXBlUHJvcGVydGllcyh0YXJnZXRzKTtcbiAgfVxuXG4gIHZhciBpbnN0YW5jZXMgPSBnZXRBcnJheU9mRWxlbWVudHModGFyZ2V0cykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHJlZmVyZW5jZSkge1xuICAgIHZhciBpbnN0YW5jZSA9IHJlZmVyZW5jZSAmJiBjcmVhdGVUaXBweShyZWZlcmVuY2UsIHByb3BzKTtcblxuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgYWNjLnB1c2goaW5zdGFuY2UpO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGlzU2luZ3VsYXIodGFyZ2V0cykgPyBpbnN0YW5jZXNbMF0gOiBpbnN0YW5jZXM7XG59XG4vKipcbiAqIFN0YXRpYyBwcm9wc1xuICovXG5cblxudGlwcHkudmVyc2lvbiA9IHZlcnNpb247XG50aXBweS5kZWZhdWx0cyA9IGRlZmF1bHRQcm9wcztcbi8qKlxuICogU3RhdGljIG1ldGhvZHNcbiAqL1xuXG50aXBweS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIChwYXJ0aWFsRGVmYXVsdHMpIHtcbiAgT2JqZWN0LmtleXMocGFydGlhbERlZmF1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZGVmYXVsdFByb3BzW2tleV0gPSBwYXJ0aWFsRGVmYXVsdHNba2V5XTtcbiAgfSk7XG59O1xuXG50aXBweS5oaWRlQWxsID0gaGlkZUFsbDtcbnRpcHB5Lmdyb3VwID0gZ3JvdXA7XG4vKipcbiAqIEF1dG8taW5pdCB0b29sdGlwcyBmb3IgZWxlbWVudHMgd2l0aCBhIGBkYXRhLXRpcHB5PVwiLi4uXCJgIGF0dHJpYnV0ZVxuICovXG5cbmZ1bmN0aW9uIGF1dG9Jbml0KCkge1xuICBhcnJheUZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGlwcHldJykpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgdmFyIGNvbnRlbnQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGlwcHknKTtcblxuICAgIGlmIChjb250ZW50KSB7XG4gICAgICB0aXBweShlbCwge1xuICAgICAgICBjb250ZW50OiBjb250ZW50XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG5pZiAoaXNCcm93c2VyKSB7XG4gIHNldFRpbWVvdXQoYXV0b0luaXQpO1xufVxuXG4vKipcbiAqIEluamVjdHMgYSBzdHJpbmcgb2YgQ1NTIHN0eWxlcyB0byBhIHN0eWxlIG5vZGUgaW4gPGhlYWQ+XG4gKi9cblxuZnVuY3Rpb24gaW5qZWN0Q1NTKGNzcykge1xuICBpZiAoaXNCcm93c2VyKSB7XG4gICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9IGNzcztcbiAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQ7XG4gICAgdmFyIGZpcnN0Q2hpbGQgPSBoZWFkLmZpcnN0Q2hpbGQ7XG5cbiAgICBpZiAoZmlyc3RDaGlsZCkge1xuICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGZpcnN0Q2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gIH1cbn1cblxuaW5qZWN0Q1NTKGNzcyk7XG5cbmV4cG9ydCBkZWZhdWx0IHRpcHB5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguYWxsLmpzLm1hcFxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiaW1wb3J0IFJvdXRlciBmcm9tICdAUm91dGVyJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBDVEFwcCB7XG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyLCBvcHRpb25zKXtcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2gob3B0aW9uID0+IHtcbiAgICAgICAgICAgIHRoaXNbb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluaXQocm91dGVyT3B0aW9ucyl7XG4gICAgICAgIGlmICggdGhpcy5uZWVkc1JvdXRlciApeyAvLyBjb21lcyBmcm9tIG9wdGlvbnMgb2JqZWN0XG4gICAgICAgICAgICB0aGlzLnJvdXRlciA9IG5ldyBSb3V0ZXIoKTtcbiAgICAgICAgICAgIHRoaXMucm91dGVyLmluaXQocm91dGVyT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNhYmxlSG92ZXJPblRvdWNoKCk7XG4gICAgfVxuICAgIGRpc2FibGVIb3Zlck9uVG91Y2goKXtcbiAgICAvLyBIVDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMwMzAzODk4XG4gICAgICAgIHZhciBoYXNIb3ZlckNsYXNzID0gZmFsc2U7XG4gICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICB2YXIgbGFzdFRvdWNoVGltZSA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gZW5hYmxlSG92ZXIoKSB7XG4gICAgICAgICAgICAvLyBmaWx0ZXIgZW11bGF0ZWQgZXZlbnRzIGNvbWluZyBmcm9tIHRvdWNoIGV2ZW50c1xuICAgICAgICAgICAgaWYgKG5ldyBEYXRlKCkgLSBsYXN0VG91Y2hUaW1lIDwgNTAwKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoaGFzSG92ZXJDbGFzcykgcmV0dXJuO1xuXG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnaGFzLWhvdmVyJyk7XG4gICAgICAgICAgICBoYXNIb3ZlckNsYXNzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRpc2FibGVIb3ZlcigpIHtcbiAgICAgICAgICAgIGlmICghaGFzSG92ZXJDbGFzcykgcmV0dXJuO1xuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1ob3ZlcicpO1xuICAgICAgICAgICAgaGFzSG92ZXJDbGFzcyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTGFzdFRvdWNoVGltZSgpIHtcbiAgICAgICAgICAgIGxhc3RUb3VjaFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHVwZGF0ZUxhc3RUb3VjaFRpbWUsIHRydWUpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZGlzYWJsZUhvdmVyLCB0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZW5hYmxlSG92ZXIsIHRydWUpO1xuXG4gICAgICAgIGVuYWJsZUhvdmVyKCk7XG4gICAgfVxuICAgIGNyZWF0ZUNvbXBvbmVudChtb2RlbCwgY29tcG9uZW50LCBzZWxlY3RvciwgX29wdGlvbnMpeyBcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIF9vcHRpb25zICE9PSBudWxsICYmIHR5cGVvZiBfb3B0aW9ucyA9PT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIGZvciAoIGxldCBrZXkgaW4gX29wdGlvbnMgKXtcbiAgICAgICAgICAgICAgICBpZiAoIF9vcHRpb25zLmhhc093blByb3BlcnR5KGtleSkgKXtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gX29wdGlvbnNba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgY29tcG9uZW50KHNlbGVjdG9yLCBvcHRpb25zKTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVyIHsgLy8gdGhpcyBjb3VsZCBiZSBpbnRlZ3JhdGVkIHdpdGggc3RhdGVmdWwgZGVhZFxuICAgIC8qXG4gICAgUm91dGVyIG9mZmVycyBiYXNpYyBzaGFyZWQgZnVuY3Rpb25zIGZvciBhbGwgcm91dGVycy4gTWV0aG9kcyBmb3IgdXBkYXRpbmcgIGhpc3Rvcnkgc3RhdGUgYW5kIHVwZGF0aW5nIHRoZSBoYXNoIHVybC4gQXJyYXkgb2Ygc3Vic2NyaXB0aW9uc1xuICAgIHRoYXQgYWZmZWN0IHRoZSB1cmwgaXMgcGFzc2VkIGluLiBUaGUgUHViU3ViIG1vZHVsZSBpcyBwYXNzZWQgaW4uIHNldEhhc2ggYW5kIGRlY29kZUhhc2ggZnVuY3Rpb25zIGFyZSBwYXNzZWQgaW4gYmMgdGhleSB3aWxsIGJlIGRpZmZcbiAgICBmb3IgZWFjaCBhcHAuIHZpZXdzIGFyZSBwYXNzZWQgaW4gc28gdGhhdCB0aGUgcmVzb2x1dGlvbnMgb2YgdGhlaXIgcHJvbWlzZXMgY2FuIGJlIHRyYWNrZWQgYW5kIGFjdGVkIHVwb24gKGllIHJvdXRlciBkZWNvZGVzIG9ubHkgYWZ0ZXIgXG4gICAgYWxsIHZpZXdzIGFyZSByZWFkeSlcbiAgICAqL1xuICAgIGluaXQocm91dGVyT3B0aW9ucyl7XG4gICAgICAgIFxuICAgICAgICBpZiAoIHJvdXRlck9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygcm91dGVyT3B0aW9ucyAhPT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIHRocm93ICdyb3V0ZXIuaW5pdCBtZXRob2QgcmVxdWlyZXMgYSBjb25maWcgb2JqZWN0IGFzIHBhcmFtZXRlciAxJ1xuICAgICAgICB9XG4gICAgICAgIGlmICggdHlwZW9mIHJvdXRlck9wdGlvbnMuZW5jb2RlICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiByb3V0ZXJPcHRpb25zLmRlY29kZSAhPT0gJ2Z1bmN0aW9uJyB8fCAhQXJyYXkuaXNBcnJheShyb3V0ZXJPcHRpb25zLnZpZXdzKSB8fCB0eXBlb2Ygcm91dGVyT3B0aW9ucy5QUyAhPT0gJ29iamVjdCcgKXtcbiAgICAgICAgICAgIHRocm93ICdyb3V0ZXJPcHRpb25zIG9iamVjdCBuZWVkcyBlbmNvZGUsIGRlY29kZSwgdmlld3MsIGFuZCBQUyBwcm9wZXJ0aWVzLiBlbmNvZGUgYW5kIGRlY29kZSBtdXN0IGJlIGZ1bmN0aW9uczsgdmlld3MgaXMgYW4gYXJyYXkgb2Ygdmlld3MgZnJvbSB0aGUgYXBwOyBQUyBuZWVkcyB0byBiZSB0aGUgUHViU3ViIHNldHRlci4nXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZU9iaiA9IHt9O1xuICAgICAgICB0aGlzLmhhc2hTdGF0ZSA9IHJvdXRlck9wdGlvbnMuZW5jb2RlO1xuICAgICAgICB0aGlzLmRlY29kZUhhc2ggPSByb3V0ZXJPcHRpb25zLmRlY29kZTtcbiAgICAgICAgdGhpcy52aWV3UHJvbWlzZXMgPSByb3V0ZXJPcHRpb25zLnZpZXdzLm1hcChlYWNoID0+IGVhY2guaXNSZWFkeSk7IC8vIHZpZXcuaXNSZWFkeSBpcyBhIHByb21pc2VkIHJlc29sdmVkIHRydWUgYWZ0ZXIgdGhlIHZpZXcgaXMgcmVuZGVyZWRcbiAgICAgICAgdGhpcy5QUyA9IHJvdXRlck9wdGlvbnMuUFM7XG4gICAgICAgIFxuICAgICAgICBQcm9taXNlLmFsbCh0aGlzLnZpZXdQcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlSGFzaCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5QUy5zZXRTdWJzKHJvdXRlck9wdGlvbnMuc3Vic2NyaXB0aW9ucy5tYXAoZWFjaCA9PiB7IC8vIHN1YnNjcmlwdGlvbnMgdGhhdCBtYXR0ZXIgZm9yIHJvdXRlciBhcmUgbWFkZSB0byB0cmlnZ2VyIGhhc2hDaGFuZ2UgbWV0aG9kIHdoZW4gcHVibGlzaGVkXG4gICAgICAgICAgICB2YXIgYXJyID0gW2VhY2gsIChtc2csZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzaENoYW5nZS5jYWxsKHRoaXMsbXNnLGRhdGEpO1xuICAgICAgICAgICAgfV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgaGFzaENoYW5nZShtc2csZGF0YSl7XG4gICAgICAgIHRoaXMuc2V0U3RhdGVPYmoobXNnLGRhdGEpO1xuICAgICAgICB0aGlzLmhhc2hTdGF0ZSgpO1xuICAgICAgICB0aGlzLnJlcGxhY2VTdGF0ZSgpO1xuICAgIH1cbiAgICBzZXRTdGF0ZU9iaihtc2csIGRhdGEpe1xuICAgICAgICB0aGlzLnN0YXRlT2JqW21zZ10gPSBkYXRhO1xuICAgICAgICBcbiAgICB9XG4gICAgcmVwbGFjZVN0YXRlKCl7ICAgIFxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUodGhpcy5zdGF0ZU9iaiwnJyx0aGlzLmhhc2hTdHJpbmcpXG4gICAgfVxuXG59IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzZWN0aW9uIGlkPVxcXCJpbnRyb1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImpzLWlubmVyLWNvbnRlbnRcXFwiPlxcbiAgICA8L2Rpdj5cXG48L3NlY3Rpb24+XFxuPHNlY3Rpb24gaWQ9XFxcInNlY3Rpb24tY29tcGFyaXNvblxcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImpzLWlubmVyLWNvbnRlbnRcXFwiPlxcbiAgICAgICAgPGgyPkFudGliaW90aWNzIGluIERldmVsb3BtZW50IFNpbmNlIDIwMTQ8L2gyPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiYWJ4LWxlZ2VuZFxcXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYWJ4LWxlZ2VuZC0td3JhcHBlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXCJhYngtbGVnZW5kLS1pdGVtIGFieC1sZWdlbmQtLWl0ZW0tLWFieFxcXCI+QW50aWJpb3RpYzwvcD5cXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcImFieC1sZWdlbmQtLWl0ZW0gYWJ4LWxlZ2VuZC0taXRlbS0tdXJnZW50XFxcIj5Qb3RlbnRpYWwgdG8gdHJlYXQgQ0RDIHVyZ2VudCBwYXRob2dlbjwvcD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhYngtbGVnZW5kLS13cmFwcGVyXFxcIj5cXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcImFieC1sZWdlbmQtLWl0ZW0gYWJ4LWxlZ2VuZC0taXRlbS0tbm92ZWxcXFwiPk5vdmVsIGFudGliaW90aWNzPC9wPlxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwiYWJ4LWxlZ2VuZC0taXRlbSBhYngtbGVnZW5kLS1pdGVtLS1ncmFtXFxcIj5Qb3RlbnRpYWwgdG8gdHJlYXQgR3JhbS1uZWdhdGl2ZSBiYWN0ZXJpYTwvcD5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBpZD1cXFwiYWJ4LXZpc3VhbGl6YXRpb25cXFwiPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGlkPVxcXCJhYngtdG90YWxzXFxcIj5cXG4gICAgICAgICAgICA8cD5Ub3RhbCBhcHByb3ZlZCBhbnRpYmlvdGljcyBzaW5jZSAyMDE0OiA8c3BhbiBpZD1cXFwidG90YWwtYXBwcm92ZWRcXFwiIGNsYXNzPVxcXCJ0b3RhbC1zcGFuXFxcIj48L3NwYW4+PC9wPlxcbiAgICAgICAgICAgIDxwPlRvdGFsIGRpc2NvbnRpbnVlZCBhbnRpYmlvdGljcyBzaW5jZSAyMDE0OiA8c3BhbiBpZD1cXFwidG90YWwtZGlzY29udGludWVkXFxcIiBjbGFzcz1cXFwidG90YWwtc3BhblxcXCI+PC9zcGFuPjwvcD5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L3NlY3Rpb24+XFxuPGRpdiBpZD1cXFwiYWJ4LW5vdGVzXFxcIj48L2Rpdj5cXG48Zm9vdGVyIGNsYXNzPVxcXCJkb3dubG9hZC1yZXNvdXJjZXNcXFwiPlxcbiAgICA8ZGl2PlxcbiAgICAgICAgPHA+PHN0cm9uZz5Eb3dubG9hZCByZXNvdXJjZXM6PC9zdHJvbmc+XFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcInBjdC1kb3dubG9hZFxcXCIgaHJlZj1cXFwiXFxcIj5NZXRob2RvbG9neTwvYT5cXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFwicGN0LWRvd25sb2FkXFxcIiBocmVmPVxcXCJcXFwiPlJlcG9ydDwvYT5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuPC9mb290ZXI+XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxoMiBpZD1cXFwiYW50aWJpb3RpYy1pbm5vdmF0aW9uXFxcIj5BbnRpYmlvdGljIElubm92YXRpb248L2gyPlxcbjxwPlRoZSBQZXcgQ2hhcml0YWJsZSBUcnVzdHMgaGFzIHRyYWNrZWQgdGhlIHBpcGVsaW5lIG9mIGFudGliaW90aWNzIGluIGNsaW5pY2FsIGRldmVsb3BtZW50IHNpbmNlIDIwMTQgYW5kIGhhcyBhZ2dyZWdhdGVkIHRoZVxcbnVwZGF0ZXMgaW50byBhbiBpbnRlcmFjdGl2ZSB0b29sIHRoYXQgaWxsdXN0cmF0ZXMgdHJlbmRzIGluIHRoZSBwaXBlbGluZS4gVGhpcyBsb25naXR1ZGluYWwgZGF0YSB2aXN1YWxpemF0aW9uIHVuZGVyc2NvcmVzIHRoZSBsb25nc3RhbmRpbmcgY29uY2VybnMgb2Ygc2NpZW50aXN0cywgZG9jdG9ycywgcHVibGljIGhlYWx0aCBvZmZpY2lhbHMsIGFuZCBvdGhlciBzdGFrZWhvbGRlcnMgcmVnYXJkaW5nIHRoZSBkYW5nZXJvdXNseSBsb3cgbnVtYmVyIG9mIGFudGliaW90aWNzIGluIGRldmVsb3BtZW50IHRvIGFkZHJlc3MgY3VycmVudCBhbmQgZnV0dXJlIHBhdGllbnQgbmVlZHMsIHBhcnRpY3VsYXJseSBmb3IgdHJlYXRpbmcgdGhlIG1vc3QgdXJnZW50IGJhY3RlcmlhbCB0aHJlYXRzLCBzdWNoIGFzIEdyYW0tbmVnYXRpdmUgcGF0aG9nZW5zLjwvcD5cXG48cD5DbGljayB0aGUgcGxheSBidXR0b24gdG8gc2VlIHRoZSBldm9sdXRpb24gb2YgdGhlIGFudGliaW90aWMgcGlwZWxpbmUgc2luY2UgMjAxNCwgb3IgY2xpY2sgb24gYW4gaW5kaXZpZHVhbCB5ZWFyIHRvIHNlZSB0aGUgc3RhdHVzIG9mIHRoZSBwaXBlbGluZSBhdCBhIHBhcnRpY3VsYXIgcG9pbnQgaW4gdGltZS4gVG8gc2VlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBkcnVnLCBob3ZlciBvdmVyIGFueSBvZiB0aGUgcmVjdGFuZ2xlcy48L3A+XFxuXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxwPjxzdHJvbmc+Tm90ZXM6PC9zdHJvbmc+IENsaW5pY2FsIGNhbmRpZGF0ZXMgaW5jbHVkZWQgaW4gdGhpcyBkYXRhIHZpc3VhbGl6YXRpb24gYXJlIGNvbnNpc3RlbnQgd2l0aCBQZXfigJlzIG1ldGhvZG9sb2d5IGZvciB0cmFja2luZyBhbnRpYmlvdGljcyBpbiBjbGluaWNhbCBkZXZlbG9wbWVudC4gTW9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbWV0aG9kcyBhbmQgdGhlIGZ1bGwgdW5kZXJseWluZyBkYXRhIGNhbiBiZSBmb3VuZCBpbiB0aGUgbGF0ZXN0IGFuYWx5c2lzIG9mIHRoZSBwaXBlbGluZS4gUGV34oCZcyB1cGRhdGVzIGFyZSBjb25kdWN0ZWQgc2VtaWFubnVhbGx5LCBleGNlcHQgZm9yIDIwMTQsIHdoZW4gdGhleSB3ZXJlIHB1Ymxpc2hlZCBxdWFydGVybHksIGFuZCAyMDE4LCB3aGVuIGEgdGltZWxpbmUgYWRqdXN0bWVudCByZXN1bHRlZCBpbiBqdXN0IG9uZSB1cGRhdGUgZm9yIHRoZSB5ZWFyLjwvcD5cXG5cIjsiXSwic291cmNlUm9vdCI6IiJ9