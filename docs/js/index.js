!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=5)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.GTMPush=function(t){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:t})},e.publishWindowResize=function(t){var e;window.addEventListener("resize",(function(){e||(e=setTimeout((function(){t.setState("resize",[document.documentElement.clientWidth,document.documentElement.clientHeight]),e=null}),350))}),!1)};e.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(t,e){var n=this,r=e||0;return e&&(this.style.transition="opacity "+e+"s ease-in-out"),new Promise((function(e){var i=window.getComputedStyle(n).getPropertyValue("transition-duration")||r,o=1e3*parseFloat(i);n.fadeOutContent(),setTimeout((function(){n.innerHTML=t,n.classList.remove("no-opacity"),e(!0)}),o)}))})),e.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ /]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(t,e){if(this.length<=t)return this;var n=this.substr(0,t-1);return(e?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var t,e=0;if(0===this.length)return e;for(t=0;t<this.length;t++)e=(e<<5)-e+this.charCodeAt(t),e|=0;return e})),e.DOMHelpers={c:function(t){if(-1!==t.indexOf(".")||-1!==t.indexOf("#")){var e=t.match(/\.([^#.]*)/g)||[],n=t.match(/#([^.]*)/),r=t.match(/^([^.#]+)/),i=document.createElement(r[0]);return e.forEach((function(t){i.classList.add(t.replace(".",""))})),null!==n&&i.setAttribute("id",n[1]),i}return document.createElement(t)},q:function(t){return document.querySelector(t)},qa:function(t){return document.querySelectorAll(t)}}},function(t,e,n){const r=n(2),i={};function o(){console.log(i)}Array.prototype.compare=Array.prototype.compare||function(t){if(this.length!=t.length)return!1;if(0===this.length&&0===t.length)return!0;console.log("in compare"),console.log(this);for(var e=0;e<t.length;e++)if(this[e]!==t[e])return!1;return!0},e.stateModule={logState:o,getState:function(t){return void 0!==i[t]?i[t][0]:void 0},getPreviousState:function(t){return void 0!==i[t]&&void 0!==i[t][1]?i[t][1]:void 0},setState:function(t,e){if(void 0===i[t])i[t]=[e],r.publish(t,e),o();else{("string"==typeof e||"number"==typeof e?i[t][0]!==e:!Array.isArray(e)||!Array.isArray(i[t][0])||!e.compare(i[t][0]))&&(i[t].unshift(e),r.publish(t,e),o(),i[t].length>2&&(i[t].length=2))}}}},function(t,e,n){(function(t){!function(n,r){"use strict";var i={};n.PubSub=i;var o=n.define;!function(t){var e={},n=-1;function r(t){var e;for(e in t)if(t.hasOwnProperty(e))return!0;return!1}function i(t,e,n){try{t(e,n)}catch(t){setTimeout(function(t){return function(){throw t}}(t),0)}}function o(t,e,n){t(e,n)}function a(t,n,r,a){var s,p=e[n],u=a?o:i;if(e.hasOwnProperty(n))for(s in p)p.hasOwnProperty(s)&&u(p[s],t,r)}function s(t,n,i,o){var s=function(t,e,n){return function(){var r=String(t),i=r.lastIndexOf(".");for(a(t,t,e,n);-1!==i;)i=(r=r.substr(0,i)).lastIndexOf("."),a(t,r,e,n)}}(t="symbol"==typeof t?t.toString():t,n,o);return!!function(t){for(var n=String(t),i=Boolean(e.hasOwnProperty(n)&&r(e[n])),o=n.lastIndexOf(".");!i&&-1!==o;)o=(n=n.substr(0,o)).lastIndexOf("."),i=Boolean(e.hasOwnProperty(n)&&r(e[n]));return i}(t)&&(!0===i?s():setTimeout(s,0),!0)}t.publish=function(e,n){return s(e,n,!1,t.immediateExceptions)},t.publishSync=function(e,n){return s(e,n,!0,t.immediateExceptions)},t.subscribe=function(t,r){if("function"!=typeof r)return!1;t="symbol"==typeof t?t.toString():t,e.hasOwnProperty(t)||(e[t]={});var i="uid_"+String(++n);return e[t][i]=r,i},t.subscribeOnce=function(e,n){var r=t.subscribe(e,(function(){t.unsubscribe(r),n.apply(this,arguments)}));return t},t.clearAllSubscriptions=function(){e={}},t.clearSubscriptions=function(t){var n;for(n in e)e.hasOwnProperty(n)&&0===n.indexOf(t)&&delete e[n]},t.unsubscribe=function(n){var r,i,o,a="string"==typeof n&&(e.hasOwnProperty(n)||function(t){var n;for(n in e)if(e.hasOwnProperty(n)&&0===n.indexOf(t))return!0;return!1}(n)),s=!a&&"string"==typeof n,p="function"==typeof n,u=!1;if(!a){for(r in e)if(e.hasOwnProperty(r)){if(i=e[r],s&&i[n]){delete i[n],u=n;break}if(p)for(o in i)i.hasOwnProperty(o)&&i[o]===n&&(delete i[o],u=!0)}return u}t.clearSubscriptions(n)}}(i),"function"==typeof o&&o.amd?o((function(){return i})):(void 0!==t&&t.exports&&(e=t.exports=i),e.PubSub=i,t.exports=e=i)}("object"==typeof window&&window||this)}).call(this,n(8)(t))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(e,n){var r=this;if(o(this,t),"string"!=typeof e)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=e,this.model=n.model,this.parent=n.parent,this.renderToSelector=n.renderToSelector,this.container=i.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.el=this.prerender(arguments),this.isReady=new Promise((function(t,e){r.resolve=t,r.reject=e}))}return r(t,[{key:"prerender",value:function(){var t=i.DOMHelpers.q(this.selector);return t&&!this.rerender?(this.prerendered=!0,t):t?(t.innerHTML="",t):i.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),t}();e.default=a},function(t,e,n){"use strict";(function(t){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,r=function(){for(var t=["Edge","Trident","Firefox"],e=0;e<t.length;e+=1)if(n&&navigator.userAgent.indexOf(t[e])>=0)return 1;return 0}();var i=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then((function(){e=!1,t()})))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout((function(){e=!1,t()}),r))}};function o(t){return t&&"[object Function]"==={}.toString.call(t)}function a(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function s(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function p(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=a(t),n=e.overflow,r=e.overflowX,i=e.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?t:p(s(t))}function u(t){return t&&t.referenceNode?t.referenceNode:t}var l=n&&!(!window.MSInputMethodContext||!document.documentMode),c=n&&/MSIE 10/.test(navigator.userAgent);function d(t){return 11===t?l:10===t?c:l||c}function f(t){if(!t)return document.documentElement;for(var e=d(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===a(n,"position")?f(n):n:t?t.ownerDocument.documentElement:document.documentElement}function h(t){return null!==t.parentNode?h(t.parentNode):t}function m(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?t:e,i=n?e:t,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,s,p=o.commonAncestorContainer;if(t!==p&&e!==p||r.contains(i))return"BODY"===(s=(a=p).nodeName)||"HTML"!==s&&f(a.firstElementChild)!==a?f(p):p;var u=h(t);return u.host?m(u.host,e):m(t,h(e).host)}function v(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===e?"scrollTop":"scrollLeft",r=t.nodeName;if("BODY"===r||"HTML"===r){var i=t.ownerDocument.documentElement,o=t.ownerDocument.scrollingElement||i;return o[n]}return t[n]}function y(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=v(e,"top"),i=v(e,"left"),o=n?-1:1;return t.top+=r*o,t.bottom+=r*o,t.left+=i*o,t.right+=i*o,t}function g(t,e){var n="x"===e?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"])+parseFloat(t["border"+r+"Width"])}function b(t,e,n,r){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],d(10)?parseInt(n["offset"+t])+parseInt(r["margin"+("Height"===t?"Top":"Left")])+parseInt(r["margin"+("Height"===t?"Bottom":"Right")]):0)}function w(t){var e=t.body,n=t.documentElement,r=d(10)&&getComputedStyle(n);return{height:b("Height",e,n,r),width:b("Width",e,n,r)}}var x=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},k=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),E=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},_=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function S(t){return _({},t,{right:t.left+t.width,bottom:t.top+t.height})}function O(t){var e={};try{if(d(10)){e=t.getBoundingClientRect();var n=v(t,"top"),r=v(t,"left");e.top+=n,e.left+=r,e.bottom+=n,e.right+=r}else e=t.getBoundingClientRect()}catch(t){}var i={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?w(t.ownerDocument):{},s=o.width||t.clientWidth||i.width,p=o.height||t.clientHeight||i.height,u=t.offsetWidth-s,l=t.offsetHeight-p;if(u||l){var c=a(t);u-=g(c,"x"),l-=g(c,"y"),i.width-=u,i.height-=l}return S(i)}function P(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=d(10),i="HTML"===e.nodeName,o=O(t),s=O(e),u=p(t),l=a(e),c=parseFloat(l.borderTopWidth),f=parseFloat(l.borderLeftWidth);n&&i&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var h=S({top:o.top-s.top-c,left:o.left-s.left-f,width:o.width,height:o.height});if(h.marginTop=0,h.marginLeft=0,!r&&i){var m=parseFloat(l.marginTop),v=parseFloat(l.marginLeft);h.top-=c-m,h.bottom-=c-m,h.left-=f-v,h.right-=f-v,h.marginTop=m,h.marginLeft=v}return(r&&!n?e.contains(u):e===u&&"BODY"!==u.nodeName)&&(h=y(h,e)),h}function C(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,r=P(t,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=e?0:v(n),s=e?0:v(n,"left"),p={top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:o};return S(p)}function A(t){var e=t.nodeName;if("BODY"===e||"HTML"===e)return!1;if("fixed"===a(t,"position"))return!0;var n=s(t);return!!n&&A(n)}function T(t){if(!t||!t.parentElement||d())return document.documentElement;for(var e=t.parentElement;e&&"none"===a(e,"transform");)e=e.parentElement;return e||document.documentElement}function L(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=i?T(t):m(t,u(e));if("viewport"===r)o=C(a,i);else{var l=void 0;"scrollParent"===r?"BODY"===(l=p(s(e))).nodeName&&(l=t.ownerDocument.documentElement):l="window"===r?t.ownerDocument.documentElement:r;var c=P(l,a,i);if("HTML"!==l.nodeName||A(a))o=c;else{var d=w(t.ownerDocument),f=d.height,h=d.width;o.top+=c.top-c.marginTop,o.bottom=f+c.top,o.left+=c.left-c.marginLeft,o.right=h+c.left}}var v="number"==typeof(n=n||0);return o.left+=v?n:n.left||0,o.top+=v?n:n.top||0,o.right-=v?n:n.right||0,o.bottom-=v?n:n.bottom||0,o}function D(t){return t.width*t.height}function M(t,e,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=L(n,r,o,i),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},p=Object.keys(s).map((function(t){return _({key:t},s[t],{area:D(s[t])})})).sort((function(t,e){return e.area-t.area})),u=p.filter((function(t){var e=t.width,r=t.height;return e>=n.clientWidth&&r>=n.clientHeight})),l=u.length>0?u[0].key:p[0].key,c=t.split("-")[1];return l+(c?"-"+c:"")}function B(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i=r?T(e):m(e,u(n));return P(n,i,r)}function I(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),r=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+r,height:t.offsetHeight+n}}function R(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,(function(t){return e[t]}))}function j(t,e,n){n=n.split("-")[0];var r=I(t),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",p=o?"height":"width",u=o?"width":"height";return i[a]=e[a]+e[p]/2-r[p]/2,i[s]=n===s?e[s]-r[u]:e[R(s)],i}function N(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function z(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex((function(t){return t[e]===n}));var r=N(t,(function(t){return t[e]===n}));return t.indexOf(r)}(t,"name",n))).forEach((function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&o(n)&&(e.offsets.popper=S(e.offsets.popper),e.offsets.reference=S(e.offsets.reference),e=n(e,t))})),e}function F(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=B(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=M(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=j(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=z(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}function H(t,e){return t.some((function(t){var n=t.name;return t.enabled&&n===e}))}function q(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),r=0;r<e.length;r++){var i=e[r],o=i?""+i+n:t;if(void 0!==document.body.style[o])return o}return null}function Y(){return this.state.isDestroyed=!0,H(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[q("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function X(t){var e=t.ownerDocument;return e?e.defaultView:window}function W(t,e,n,r){n.updateBound=r,X(t).addEventListener("resize",n.updateBound,{passive:!0});var i=p(t);return function t(e,n,r,i){var o="BODY"===e.nodeName,a=o?e.ownerDocument.defaultView:e;a.addEventListener(n,r,{passive:!0}),o||t(p(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function U(){this.state.eventsEnabled||(this.state=W(this.reference,this.options,this.state,this.scheduleUpdate))}function V(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,X(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach((function(t){t.removeEventListener("scroll",e.updateBound)})),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function G(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function K(t,e){Object.keys(e).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&G(e[n])&&(r="px"),t.style[n]=e[n]+r}))}var Q=n&&/Firefox/i.test(navigator.userAgent);function J(t,e,n){var r=N(t,(function(t){return t.name===e})),i=!!r&&t.some((function(t){return t.name===n&&t.enabled&&t.order<r.order}));if(!i){var o="`"+e+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var $=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Z=$.slice(3);function tt(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Z.indexOf(t),r=Z.slice(n+1).concat(Z.slice(0,n));return e?r.reverse():r}var et="flip",nt="clockwise",rt="counterclockwise";function it(t,e,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=t.split(/(\+|\-)/).map((function(t){return t.trim()})),s=a.indexOf(N(a,(function(t){return-1!==t.search(/,|\s/)})));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var p=/\s*,\s*|\s+/,u=-1!==s?[a.slice(0,s).concat([a[s].split(p)[0]]),[a[s].split(p)[1]].concat(a.slice(s+1))]:[a];return(u=u.map((function(t,r){var i=(1===r?!o:o)?"height":"width",a=!1;return t.reduce((function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)}),[]).map((function(t){return function(t,e,n,r){var i=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return S(s)[e]/100*o}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}(t,i,e,n)}))}))).forEach((function(t,e){t.forEach((function(n,r){G(n)&&(i[e]+=n*("-"===t[r-1]?-1:1))}))})),i}var ot={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],r=e.split("-")[1];if(r){var i=t.offsets,o=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(n),p=s?"left":"top",u=s?"width":"height",l={start:E({},p,o[p]),end:E({},p,o[p]+o[u]-a[u])};t.offsets.popper=_({},a,l[r])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,r=t.placement,i=t.offsets,o=i.popper,a=i.reference,s=r.split("-")[0],p=void 0;return p=G(+n)?[+n,0]:it(n,o,a,s),"left"===s?(o.top+=p[0],o.left-=p[1]):"right"===s?(o.top+=p[0],o.left+=p[1]):"top"===s?(o.left+=p[0],o.top-=p[1]):"bottom"===s&&(o.left+=p[0],o.top+=p[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||f(t.instance.popper);t.instance.reference===n&&(n=f(n));var r=q("transform"),i=t.instance.popper.style,o=i.top,a=i.left,s=i[r];i.top="",i.left="",i[r]="";var p=L(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);i.top=o,i.left=a,i[r]=s,e.boundaries=p;var u=e.priority,l=t.offsets.popper,c={primary:function(t){var n=l[t];return l[t]<p[t]&&!e.escapeWithReference&&(n=Math.max(l[t],p[t])),E({},t,n)},secondary:function(t){var n="right"===t?"left":"top",r=l[n];return l[t]>p[t]&&!e.escapeWithReference&&(r=Math.min(l[n],p[t]-("right"===t?l.width:l.height))),E({},n,r)}};return u.forEach((function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";l=_({},l,c[e](t))})),t.offsets.popper=l,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,r=e.reference,i=t.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",p=a?"left":"top",u=a?"width":"height";return n[s]<o(r[p])&&(t.offsets.popper[p]=o(r[p])-n[u]),n[p]>o(r[s])&&(t.offsets.popper[p]=o(r[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!J(t.instance.modifiers,"arrow","keepTogether"))return t;var r=e.element;if("string"==typeof r){if(!(r=t.instance.popper.querySelector(r)))return t}else if(!t.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var i=t.placement.split("-")[0],o=t.offsets,s=o.popper,p=o.reference,u=-1!==["left","right"].indexOf(i),l=u?"height":"width",c=u?"Top":"Left",d=c.toLowerCase(),f=u?"left":"top",h=u?"bottom":"right",m=I(r)[l];p[h]-m<s[d]&&(t.offsets.popper[d]-=s[d]-(p[h]-m)),p[d]+m>s[h]&&(t.offsets.popper[d]+=p[d]+m-s[h]),t.offsets.popper=S(t.offsets.popper);var v=p[d]+p[l]/2-m/2,y=a(t.instance.popper),g=parseFloat(y["margin"+c]),b=parseFloat(y["border"+c+"Width"]),w=v-t.offsets.popper[d]-g-b;return w=Math.max(Math.min(s[l]-m,w),0),t.arrowElement=r,t.offsets.arrow=(E(n={},d,Math.round(w)),E(n,f,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(H(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=L(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),r=t.placement.split("-")[0],i=R(r),o=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case et:a=[r,i];break;case nt:a=tt(r);break;case rt:a=tt(r,!0);break;default:a=e.behavior}return a.forEach((function(s,p){if(r!==s||a.length===p+1)return t;r=t.placement.split("-")[0],i=R(r);var u=t.offsets.popper,l=t.offsets.reference,c=Math.floor,d="left"===r&&c(u.right)>c(l.left)||"right"===r&&c(u.left)<c(l.right)||"top"===r&&c(u.bottom)>c(l.top)||"bottom"===r&&c(u.top)<c(l.bottom),f=c(u.left)<c(n.left),h=c(u.right)>c(n.right),m=c(u.top)<c(n.top),v=c(u.bottom)>c(n.bottom),y="left"===r&&f||"right"===r&&h||"top"===r&&m||"bottom"===r&&v,g=-1!==["top","bottom"].indexOf(r),b=!!e.flipVariations&&(g&&"start"===o&&f||g&&"end"===o&&h||!g&&"start"===o&&m||!g&&"end"===o&&v),w=!!e.flipVariationsByContent&&(g&&"start"===o&&h||g&&"end"===o&&f||!g&&"start"===o&&v||!g&&"end"===o&&m),x=b||w;(d||y||x)&&(t.flipped=!0,(d||y)&&(r=a[p+1]),x&&(o=function(t){return"end"===t?"start":"start"===t?"end":t}(o)),t.placement=r+(o?"-"+o:""),t.offsets.popper=_({},t.offsets.popper,j(t.instance.popper,t.offsets.reference,t.placement)),t=z(t.instance.modifiers,t,"flip"))})),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],r=t.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(s?i[a?"width":"height"]:0),t.placement=R(e),t.offsets.popper=S(i),t}},hide:{order:800,enabled:!0,fn:function(t){if(!J(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=N(t.instance.modifiers,(function(t){return"preventOverflow"===t.name})).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,r=e.y,i=t.offsets.popper,o=N(t.instance.modifiers,(function(t){return"applyStyle"===t.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:e.gpuAcceleration,s=f(t.instance.popper),p=O(s),u={position:i.position},l=function(t,e){var n=t.offsets,r=n.popper,i=n.reference,o=Math.round,a=Math.floor,s=function(t){return t},p=o(i.width),u=o(r.width),l=-1!==["left","right"].indexOf(t.placement),c=-1!==t.placement.indexOf("-"),d=e?l||c||p%2==u%2?o:a:s,f=e?o:s;return{left:d(p%2==1&&u%2==1&&!c&&e?r.left-1:r.left),top:f(r.top),bottom:f(r.bottom),right:d(r.right)}}(t,window.devicePixelRatio<2||!Q),c="bottom"===n?"top":"bottom",d="right"===r?"left":"right",h=q("transform"),m=void 0,v=void 0;if(v="bottom"===c?"HTML"===s.nodeName?-s.clientHeight+l.bottom:-p.height+l.bottom:l.top,m="right"===d?"HTML"===s.nodeName?-s.clientWidth+l.right:-p.width+l.right:l.left,a&&h)u[h]="translate3d("+m+"px, "+v+"px, 0)",u[c]=0,u[d]=0,u.willChange="transform";else{var y="bottom"===c?-1:1,g="right"===d?-1:1;u[c]=v*y,u[d]=m*g,u.willChange=c+", "+d}var b={"x-placement":t.placement};return t.attributes=_({},b,t.attributes),t.styles=_({},u,t.styles),t.arrowStyles=_({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return K(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach((function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)})),t.arrowElement&&Object.keys(t.arrowStyles).length&&K(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,r,i){var o=B(i,e,t,n.positionFixed),a=M(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",a),K(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},at=function(){function t(e,n){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=_({},t.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(_({},t.Defaults.modifiers,a.modifiers)).forEach((function(e){r.options.modifiers[e]=_({},t.Defaults.modifiers[e]||{},a.modifiers?a.modifiers[e]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(t){return _({name:t},r.options.modifiers[t])})).sort((function(t,e){return t.order-e.order})),this.modifiers.forEach((function(t){t.enabled&&o(t.onLoad)&&t.onLoad(r.reference,r.popper,r.options,t,r.state)})),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return k(t,[{key:"update",value:function(){return F.call(this)}},{key:"destroy",value:function(){return Y.call(this)}},{key:"enableEventListeners",value:function(){return U.call(this)}},{key:"disableEventListeners",value:function(){return V.call(this)}}]),t}();at.Utils=("undefined"!=typeof window?window:t).PopperUtils,at.placements=$,at.Defaults=ot,e.a=at}).call(this,n(15))},function(t,e,n){"use strict";n(0);var r,i=n(6),o=(r=i)&&r.__esModule?r:{default:r};n(23);var a=new o.default("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&a.prerender(),a.init()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=h(n(7)),o=n(1),a=n(0),s=h(n(9)),p=h(n(10)),u=h(n(17)),l=h(n(18)),c=h(n(20)),d=h(n(21)),f=h(n(22));function h(t){return t&&t.__esModule?t:{default:t}}function m(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function y(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(0,a.publishWindowResize)(o.stateModule);var g={},b=[];function w(){var t=this;return new Promise((function(e,n){var r=t.el;i.default.parse(""+s.default,{download:!0,dynamicTyping:!0,header:!0,fastMode:!1,skipEmptyLines:!0,beforeFirstChunk:function(t){var e=t.hashCode();window.IS_PRERENDERING?r.setAttribute("data-data-hash",e):e.toString()!==r.getAttribute("data-data-hash")&&(r.setAttribute("data-data-mismatch",!0),g.isMismatched=!0)},complete:function(n){b.length=0,g.years=[];for(var r=!0,i=0;r;)n.data[0].hasOwnProperty(2014+i)?g.years.push(2014+i):r=!1,i++;g.unnestedData=n.data,g.nestedByYear=g.years.map((function(t){return{year:t,values:[1,2,3,4,5].map((function(e){return{phase:e,values:g.unnestedData.filter((function(n){return parseInt(n[t])==e}))}}))}}));var o=[1,2,3,4,5].map((function(){return g.years.map((function(){return 0}))})),a=[1,2,3,4,5].map((function(){return g.years.map((function(){return 0}))}));g.unnestedData.forEach((function(t){g.years.forEach((function(e,n){var r=parseInt(t[e]);isNaN(t[e])&&"d"===t[e].charAt(1)?a[r-1][n]++:0!==t[e]&&o[r-1][n]++}))})),g.maxActive=Math.max.apply(Math,y(o.map((function(t){return Math.max.apply(Math,y(t))}))))+4,g.maxDiscontinued=Math.max.apply(Math,y(a.map((function(t){return Math.max.apply(Math,y(t))})))),b.push(t.createComponent(g,p.default,"div#viz-view",{renderToSelector:"#abx-visualization",rerenderOnDataMismatch:!0,parent:t}),t.createComponent(g,u.default,"div#visually-hidden-view",{renderToSelector:"#visually-hidden-container",rerenderOnDataMismatch:!0,parent:t})),e(!0)},error:function(t){n(t)}})}))}var x=function(t){function e(){return m(this,e),v(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"prerender",value:function(){this.el.insertAdjacentHTML("beforeend",c.default),document.querySelector("#intro").insertAdjacentHTML("afterbegin",d.default),document.querySelector("#abx-notes").insertAdjacentHTML("afterbegin",f.default),w.call(this).then((function(){b.forEach((function(t){t.container.appendChild(t.el)}))}))}},{key:"init",value:function(){var t=this;(function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0})(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"init",this).call(this),w.call(this).then((function(){b.forEach((function(e){e.init(t)}))}))}}]),e}(l.default);e.default=x},function(t,e,n){var r,i,o;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),i=[],void 0===(o="function"==typeof(r=function(){"use strict";var t,e,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},r=!n.document&&!!n.postMessage,i=r&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),o=!1,a={},s=0,p={parse:function(e,r){var i=(r=r||{}).dynamicTyping||!1;if(E(i)&&(r.dynamicTypingFunction=i,i={}),r.dynamicTyping=i,r.transform=!!E(r.transform)&&r.transform,r.worker&&p.WORKERS_SUPPORTED){var u=function(){if(!p.WORKERS_SUPPORTED)return!1;if(!o&&null===p.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var e=p.SCRIPT_PATH||t;e+=(-1!==e.indexOf("?")?"&":"?")+"papaworker";var r=new n.Worker(e);return r.onmessage=g,r.id=s++,a[r.id]=r}();return u.userStep=r.step,u.userChunk=r.chunk,u.userComplete=r.complete,u.userError=r.error,r.step=E(r.step),r.chunk=E(r.chunk),r.complete=E(r.complete),r.error=E(r.error),delete r.worker,void u.postMessage({input:e,config:r,workerId:u.id})}var l=null;return p.NODE_STREAM_INPUT,"string"==typeof e?l=r.download?new c(r):new f(r):!0===e.readable&&E(e.read)&&E(e.on)?l=new h(r):(n.File&&e instanceof File||e instanceof Object)&&(l=new d(r)),l.stream(e)},unparse:function(t,e){var n=!1,r=!0,i=",",o="\r\n",a='"',s=!1;"object"==typeof e&&("string"!=typeof e.delimiter||p.BAD_DELIMITERS.filter((function(t){return-1!==e.delimiter.indexOf(t)})).length||(i=e.delimiter),("boolean"==typeof e.quotes||Array.isArray(e.quotes))&&(n=e.quotes),"boolean"!=typeof e.skipEmptyLines&&"string"!=typeof e.skipEmptyLines||(s=e.skipEmptyLines),"string"==typeof e.newline&&(o=e.newline),"string"==typeof e.quoteChar&&(a=e.quoteChar),"boolean"==typeof e.header&&(r=e.header));var u=new RegExp(v(a),"g");if("string"==typeof t&&(t=JSON.parse(t)),Array.isArray(t)){if(!t.length||Array.isArray(t[0]))return c(null,t,s);if("object"==typeof t[0])return c(l(t[0]),t,s)}else if("object"==typeof t)return"string"==typeof t.data&&(t.data=JSON.parse(t.data)),Array.isArray(t.data)&&(t.fields||(t.fields=t.meta&&t.meta.fields),t.fields||(t.fields=Array.isArray(t.data[0])?t.fields:l(t.data[0])),Array.isArray(t.data[0])||"object"==typeof t.data[0]||(t.data=[t.data])),c(t.fields||[],t.data||[],s);throw"exception: Unable to serialize unrecognized input";function l(t){if("object"!=typeof t)return[];var e=[];for(var n in t)e.push(n);return e}function c(t,e,n){var a="";"string"==typeof t&&(t=JSON.parse(t)),"string"==typeof e&&(e=JSON.parse(e));var s=Array.isArray(t)&&0<t.length,p=!Array.isArray(e[0]);if(s&&r){for(var u=0;u<t.length;u++)0<u&&(a+=i),a+=d(t[u],u);0<e.length&&(a+=o)}for(var l=0;l<e.length;l++){var c=s?t.length:e[l].length,f=!1,h=s?0===Object.keys(e[l]).length:0===e[l].length;if(n&&!s&&(f="greedy"===n?""===e[l].join("").trim():1===e[l].length&&0===e[l][0].length),"greedy"===n&&s){for(var m=[],v=0;v<c;v++){var y=p?t[v]:v;m.push(e[l][y])}f=""===m.join("").trim()}if(!f){for(var g=0;g<c;g++){0<g&&!h&&(a+=i);var b=s&&p?t[g]:g;a+=d(e[l][b],g)}l<e.length-1&&(!n||0<c&&!h)&&(a+=o)}}return a}function d(t,e){return null==t?"":t.constructor===Date?JSON.stringify(t).slice(1,25):(t=t.toString().replace(u,a+a),"boolean"==typeof n&&n||Array.isArray(n)&&n[e]||function(t,e){for(var n=0;n<e.length;n++)if(-1<t.indexOf(e[n]))return!0;return!1}(t,p.BAD_DELIMITERS)||-1<t.indexOf(i)||" "===t.charAt(0)||" "===t.charAt(t.length-1)?a+t+a:t)}}};if(p.RECORD_SEP=String.fromCharCode(30),p.UNIT_SEP=String.fromCharCode(31),p.BYTE_ORDER_MARK="\ufeff",p.BAD_DELIMITERS=["\r","\n",'"',p.BYTE_ORDER_MARK],p.WORKERS_SUPPORTED=!r&&!!n.Worker,p.SCRIPT_PATH=null,p.NODE_STREAM_INPUT=1,p.LocalChunkSize=10485760,p.RemoteChunkSize=5242880,p.DefaultDelimiter=",",p.Parser=y,p.ParserHandle=m,p.NetworkStreamer=c,p.FileStreamer=d,p.StringStreamer=f,p.ReadableStreamStreamer=h,n.jQuery){var u=n.jQuery;u.fn.parse=function(t){var e=t.config||{},r=[];return this.each((function(t){if("INPUT"!==u(this).prop("tagName").toUpperCase()||"file"!==u(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var i=0;i<this.files.length;i++)r.push({file:this.files[i],inputElem:this,instanceConfig:u.extend({},e)})})),i(),this;function i(){if(0!==r.length){var e,n,i,a=r[0];if(E(t.before)){var s=t.before(a.file,a.inputElem);if("object"==typeof s){if("abort"===s.action)return e=a.file,n=a.inputElem,i=s.reason,void(E(t.error)&&t.error({name:"AbortError"},e,n,i));if("skip"===s.action)return void o();"object"==typeof s.config&&(a.instanceConfig=u.extend(a.instanceConfig,s.config))}else if("skip"===s)return void o()}var l=a.instanceConfig.complete;a.instanceConfig.complete=function(t){E(l)&&l(t,a.file,a.inputElem),o()},p.parse(a.file,a.instanceConfig)}else E(t.complete)&&t.complete()}function o(){r.splice(0,1),i()}}}function l(t){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(t){var e=x(t);e.chunkSize=parseInt(e.chunkSize),t.step||t.chunk||(e.chunkSize=null),this._handle=new m(e),(this._handle.streamer=this)._config=e}.call(this,t),this.parseChunk=function(t,e){if(this.isFirstChunk&&E(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(t);void 0!==r&&(t=r)}this.isFirstChunk=!1;var o=this._partialLine+t;this._partialLine="";var a=this._handle.parse(o,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=a.meta.cursor;this._finished||(this._partialLine=o.substring(s-this._baseIndex),this._baseIndex=s),a&&a.data&&(this._rowCount+=a.data.length);var u=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(i)n.postMessage({results:a,workerId:p.WORKER_ID,finished:u});else if(E(this._config.chunk)&&!e){if(this._config.chunk(a,this._handle),this._handle.paused()||this._handle.aborted())return;a=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(a.data),this._completeResults.errors=this._completeResults.errors.concat(a.errors),this._completeResults.meta=a.meta),this._completed||!u||!E(this._config.complete)||a&&a.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),u||a&&a.meta.paused||this._nextChunk(),a}},this._sendError=function(t){E(this._config.error)?this._config.error(t):i&&this._config.error&&n.postMessage({workerId:p.WORKER_ID,error:t,finished:!1})}}function c(t){var e;(t=t||{}).chunkSize||(t.chunkSize=p.RemoteChunkSize),l.call(this,t),this._nextChunk=r?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(t){this._input=t,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(e=new XMLHttpRequest,this._config.withCredentials&&(e.withCredentials=this._config.withCredentials),r||(e.onload=k(this._chunkLoaded,this),e.onerror=k(this._chunkError,this)),e.open("GET",this._input,!r),this._config.downloadRequestHeaders){var t=this._config.downloadRequestHeaders;for(var n in t)e.setRequestHeader(n,t[n])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;e.setRequestHeader("Range","bytes="+this._start+"-"+i),e.setRequestHeader("If-None-Match","webkit-no-cache")}try{e.send()}catch(t){this._chunkError(t.message)}r&&0===e.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){4===e.readyState&&(e.status<200||400<=e.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>function(t){var e=t.getResponseHeader("Content-Range");return null===e?-1:parseInt(e.substr(e.lastIndexOf("/")+1))}(e),this.parseChunk(e.responseText)))},this._chunkError=function(t){var n=e.statusText||t;this._sendError(new Error(n))}}function d(t){var e,n;(t=t||{}).chunkSize||(t.chunkSize=p.LocalChunkSize),l.call(this,t);var r="undefined"!=typeof FileReader;this.stream=function(t){this._input=t,n=t.slice||t.webkitSlice||t.mozSlice,r?((e=new FileReader).onload=k(this._chunkLoaded,this),e.onerror=k(this._chunkError,this)):e=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var t=this._input;if(this._config.chunkSize){var i=Math.min(this._start+this._config.chunkSize,this._input.size);t=n.call(t,this._start,i)}var o=e.readAsText(t,this._config.encoding);r||this._chunkLoaded({target:{result:o}})},this._chunkLoaded=function(t){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(t.target.result)},this._chunkError=function(){this._sendError(e.error)}}function f(t){var e;l.call(this,t=t||{}),this.stream=function(t){return e=t,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var t=this._config.chunkSize,n=t?e.substr(0,t):e;return e=t?e.substr(t):"",this._finished=!e,this.parseChunk(n)}}}function h(t){l.call(this,t=t||{});var e=[],n=!0,r=!1;this.pause=function(){l.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){l.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(t){this._input=t,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){r&&1===e.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),e.length?this.parseChunk(e.shift()):n=!0},this._streamData=k((function(t){try{e.push("string"==typeof t?t:t.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(e.shift()))}catch(t){this._streamError(t)}}),this),this._streamError=k((function(t){this._streamCleanUp(),this._sendError(t)}),this),this._streamEnd=k((function(){this._streamCleanUp(),r=!0,this._streamData("")}),this),this._streamCleanUp=k((function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)}),this)}function m(t){var e,n,r,i=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,o=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,a=this,s=0,u=0,l=!1,c=!1,d=[],f={data:[],errors:[],meta:{}};if(E(t.step)){var h=t.step;t.step=function(e){if(f=e,b())g();else{if(g(),0===f.data.length)return;s+=e.data.length,t.preview&&s>t.preview?n.abort():h(f,a)}}}function m(e){return"greedy"===t.skipEmptyLines?""===e.join("").trim():1===e.length&&0===e[0].length}function g(){if(f&&r&&(k("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+p.DefaultDelimiter+"'"),r=!1),t.skipEmptyLines)for(var e=0;e<f.data.length;e++)m(f.data[e])&&f.data.splice(e--,1);return b()&&function(){if(f){for(var e=0;b()&&e<f.data.length;e++)for(var n=0;n<f.data[e].length;n++){var r=f.data[e][n];t.trimHeaders&&(r=r.trim()),d.push(r)}f.data.splice(0,1)}}(),function(){if(!f||!t.header&&!t.dynamicTyping&&!t.transform)return f;for(var e=0;e<f.data.length;e++){var n,r=t.header?{}:[];for(n=0;n<f.data[e].length;n++){var i=n,o=f.data[e][n];t.header&&(i=n>=d.length?"__parsed_extra":d[n]),t.transform&&(o=t.transform(o,i)),o=w(i,o),"__parsed_extra"===i?(r[i]=r[i]||[],r[i].push(o)):r[i]=o}f.data[e]=r,t.header&&(n>d.length?k("FieldMismatch","TooManyFields","Too many fields: expected "+d.length+" fields but parsed "+n,u+e):n<d.length&&k("FieldMismatch","TooFewFields","Too few fields: expected "+d.length+" fields but parsed "+n,u+e))}return t.header&&f.meta&&(f.meta.fields=d),u+=f.data.length,f}()}function b(){return t.header&&0===d.length}function w(e,n){return r=e,t.dynamicTypingFunction&&void 0===t.dynamicTyping[r]&&(t.dynamicTyping[r]=t.dynamicTypingFunction(r)),!0===(t.dynamicTyping[r]||t.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(i.test(n)?parseFloat(n):o.test(n)?new Date(n):""===n?null:n):n;var r}function k(t,e,n,r){f.errors.push({type:t,code:e,message:n,row:r})}this.parse=function(i,o,a){var s=t.quoteChar||'"';if(t.newline||(t.newline=function(t,e){t=t.substr(0,1048576);var n=new RegExp(v(e)+"([^]*?)"+v(e),"gm"),r=(t=t.replace(n,"")).split("\r"),i=t.split("\n"),o=1<i.length&&i[0].length<r[0].length;if(1===r.length||o)return"\n";for(var a=0,s=0;s<r.length;s++)"\n"===r[s][0]&&a++;return a>=r.length/2?"\r\n":"\r"}(i,s)),r=!1,t.delimiter)E(t.delimiter)&&(t.delimiter=t.delimiter(i),f.meta.delimiter=t.delimiter);else{var u=function(e,n,r,i){for(var o,a,s,u=[",","\t","|",";",p.RECORD_SEP,p.UNIT_SEP],l=0;l<u.length;l++){var c=u[l],d=0,f=0,h=0;s=void 0;for(var v=new y({comments:i,delimiter:c,newline:n,preview:10}).parse(e),g=0;g<v.data.length;g++)if(r&&m(v.data[g]))h++;else{var b=v.data[g].length;f+=b,void 0!==s?1<b&&(d+=Math.abs(b-s),s=b):s=0}0<v.data.length&&(f/=v.data.length-h),(void 0===a||a<d)&&1.99<f&&(a=d,o=c)}return{successful:!!(t.delimiter=o),bestDelimiter:o}}(i,t.newline,t.skipEmptyLines,t.comments);u.successful?t.delimiter=u.bestDelimiter:(r=!0,t.delimiter=p.DefaultDelimiter),f.meta.delimiter=t.delimiter}var c=x(t);return t.preview&&t.header&&c.preview++,e=i,n=new y(c),f=n.parse(e,o,a),g(),l?{meta:{paused:!0}}:f||{meta:{paused:!1}}},this.paused=function(){return l},this.pause=function(){l=!0,n.abort(),e=e.substr(n.getCharIndex())},this.resume=function(){l=!1,a.streamer.parseChunk(e,!0)},this.aborted=function(){return c},this.abort=function(){c=!0,n.abort(),f.meta.aborted=!0,E(t.complete)&&t.complete(f),e=""}}function v(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function y(t){var e,n=(t=t||{}).delimiter,r=t.newline,i=t.comments,o=t.step,a=t.preview,s=t.fastMode,u=e=void 0===t.quoteChar?'"':t.quoteChar;if(void 0!==t.escapeChar&&(u=t.escapeChar),("string"!=typeof n||-1<p.BAD_DELIMITERS.indexOf(n))&&(n=","),i===n)throw"Comment character same as delimiter";!0===i?i="#":("string"!=typeof i||-1<p.BAD_DELIMITERS.indexOf(i))&&(i=!1),"\n"!==r&&"\r"!==r&&"\r\n"!==r&&(r="\n");var l=0,c=!1;this.parse=function(t,p,d){if("string"!=typeof t)throw"Input must be a string";var f=t.length,h=n.length,m=r.length,y=i.length,g=E(o),b=[],w=[],x=[],k=l=0;if(!t)return R();if(s||!1!==s&&-1===t.indexOf(e)){for(var _=t.split(r),S=0;S<_.length;S++){if(x=_[S],l+=x.length,S!==_.length-1)l+=r.length;else if(d)return R();if(!i||x.substr(0,y)!==i){if(g){if(b=[],D(x.split(n)),j(),c)return R()}else D(x.split(n));if(a&&a<=S)return b=b.slice(0,a),R(!0)}}return R()}for(var O,P=t.indexOf(n,l),C=t.indexOf(r,l),A=new RegExp(v(u)+v(e),"g");;)if(t[l]!==e)if(i&&0===x.length&&t.substr(l,y)===i){if(-1===C)return R();l=C+m,C=t.indexOf(r,l),P=t.indexOf(n,l)}else if(-1!==P&&(P<C||-1===C))x.push(t.substring(l,P)),l=P+h,P=t.indexOf(n,l);else{if(-1===C)break;if(x.push(t.substring(l,C)),I(C+m),g&&(j(),c))return R();if(a&&b.length>=a)return R(!0)}else for(O=l,l++;;){if(-1===(O=t.indexOf(e,O+1)))return d||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:b.length,index:l}),B();if(O===f-1)return B(t.substring(l,O).replace(A,e));if(e!==u||t[O+1]!==u){if(e===u||0===O||t[O-1]!==u){var T=M(-1===C?P:Math.min(P,C));if(t[O+1+T]===n){x.push(t.substring(l,O).replace(A,e)),l=O+1+T+h,P=t.indexOf(n,l),C=t.indexOf(r,l);break}var L=M(C);if(t.substr(O+1+L,m)===r){if(x.push(t.substring(l,O).replace(A,e)),I(O+1+L+m),P=t.indexOf(n,l),g&&(j(),c))return R();if(a&&b.length>=a)return R(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:b.length,index:l}),O++}}else O++}return B();function D(t){b.push(t),k=l}function M(e){var n=0;if(-1!==e){var r=t.substring(O+1,e);r&&""===r.trim()&&(n=r.length)}return n}function B(e){return d||(void 0===e&&(e=t.substr(l)),x.push(e),l=f,D(x),g&&j()),R()}function I(e){l=e,D(x),x=[],C=t.indexOf(r,l)}function R(t){return{data:b,errors:w,meta:{delimiter:n,linebreak:r,aborted:c,truncated:!!t,cursor:k+(p||0)}}}function j(){o(R()),b=[],w=[]}},this.abort=function(){c=!0},this.getCharIndex=function(){return l}}function g(t){var e=t.data,n=a[e.workerId],r=!1;if(e.error)n.userError(e.error,e.file);else if(e.results&&e.results.data){var i={abort:function(){r=!0,b(e.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(E(n.userStep)){for(var o=0;o<e.results.data.length&&(n.userStep({data:[e.results.data[o]],errors:e.results.errors,meta:e.results.meta},i),!r);o++);delete e.results}else E(n.userChunk)&&(n.userChunk(e.results,i,e.file),delete e.results)}e.finished&&!r&&b(e.workerId,e.results)}function b(t,e){var n=a[t];E(n.userComplete)&&n.userComplete(e),n.terminate(),delete a[t]}function w(){throw"Not implemented."}function x(t){if("object"!=typeof t||null===t)return t;var e=Array.isArray(t)?[]:{};for(var n in t)e[n]=x(t[n]);return e}function k(t,e){return function(){t.apply(e,arguments)}}function E(t){return"function"==typeof t}return i?n.onmessage=function(t){var e=t.data;if(void 0===p.WORKER_ID&&e&&(p.WORKER_ID=e.workerId),"string"==typeof e.input)n.postMessage({workerId:p.WORKER_ID,results:p.parse(e.input,e.config),finished:!0});else if(n.File&&e.input instanceof File||e.input instanceof Object){var r=p.parse(e.input,e.config);r&&n.postMessage({workerId:p.WORKER_ID,results:r,finished:!0})}}:p.WORKERS_SUPPORTED&&(e=document.getElementsByTagName("script"),t=e.length?e[e.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",(function(){o=!0}),!0):o=!0),(c.prototype=Object.create(l.prototype)).constructor=c,(d.prototype=Object.create(l.prototype)).constructor=d,(f.prototype=Object.create(f.prototype)).constructor=f,(h.prototype=Object.create(l.prototype)).constructor=h,p})?r.apply(e,i):r)||(t.exports=o)},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){t.exports=n.p+"data/abx-data-2020.csv?v=edfef6"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=l(n(3)),o=l(n(11)),a=n(1),s=l(n(12)),p=l(n(14));n(16);var u=n(0);function l(t){return t&&t.__esModule?t:{default:t}}function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function d(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var f=[["Phase 1","P1"],["Phase 2","P2"],["Phase 3","P3"],["Application","NDA"],["Approved","&#x2713"]],h=function(t){function e(){return c(this,e),d(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),r(e,[{key:"prerender",value:function(){this.minUnitDimension=30,this.headerHeight=45,this.unitPadding=2,this.headers=f,this.heightNeeded=(this.model.maxActive+this.model.maxDiscontinued+1)*(this.minUnitDimension+this.unitPadding)+this.headerHeight+this.unitPadding+200;var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);if(this.prerendered&&!this.rerender)return t;function n(t){for(var e=0;e<5;e++){var n=document.createElement("div");n.classList.add(o.default.column);for(var r=t.name===o.default.activeContainer?this.model.maxActive:this.model.maxDiscontinued,i=0;i<r;i++){var a=document.createElement("div");a.classList.add(o.default.drug,o.default.drugEmpty),n.appendChild(a)}t.appendChild(n)}}var r=document.createElement("div");r.classList.add(o.default.controlContainer);var i=document.createElement("button");i.classList.add(o.default.playButton),i.type="button",i.title="Play",r.appendChild(i),this.model.years.forEach((function(t,e){var n=document.createElement("button");n.classList.add(o.default.yearButton,""+(0===e?o.default.yearButtonActive:"nope")),n.type="button",n.value=t,n.textContent=t,r.appendChild(n)}));var a=document.createElement("div");a.classList.add(o.default.inputWrapper);var s=document.createElement("input");s.classList.add("js-animate-checkbox"),s.setAttribute("type","checkbox"),s.setAttribute("checked","checked"),s.id="toggle-animate-on-off";var p=document.createElement("label");p.classList.add(o.default.inputLabel),p.setAttribute("for","toggle-animate-on-off"),p.textContent="Animate change",a.appendChild(s),a.appendChild(p),r.appendChild(a),t.appendChild(r);var u=document.createElement("div");u.classList.add(o.default.container),t.appendChild(u);var l=document.createElement("div");l.classList.add(o.default.activeContainer),l.name=o.default.activeContainer,u.appendChild(l);var c=document.createElement("div");c.classList.add(o.default.headerContainer),c.name=o.default.headerContainer,f.forEach((function(t){var e=document.createElement("div");e.classList.add(o.default.headerDiv),e.innerHTML='<span class="'+o.default.phaseFull+'">'+t[0].toUpperCase()+'</span><span class="'+o.default.phaseAbbr+'">'+t[1]+"</span>",c.appendChild(e)})),u.appendChild(c);var d=document.createElement("div");return d.classList.add(o.default.discontinuedContainer),d.name=o.default.discontinuedContainer,u.appendChild(d),n.call(this,l),n.call(this,d),t}},{key:"init",value:function(){s.default.setSubs([["resize",this.checkHeight.bind(this)],["year",this.update.bind(this)]]),this.columns={},this.columns.active=document.querySelector("."+o.default.activeContainer).querySelectorAll("."+o.default.column),this.columns.discontinued=document.querySelector("."+o.default.discontinuedContainer).querySelectorAll("."+o.default.column),this.headers=document.querySelectorAll("."+o.default.headerDiv),this.positionMap={active:f.map((function(){return[]})),discontinued:f.map((function(){return[]}))},this.checkHeight(),this.initializeYearButtons(),this.initializeAnimateOnOff(),this.initializePlayButton(),this.approvedSpan=document.querySelector("#total-approved"),this.discontinuedSpan=document.querySelector("#total-discontinued"),this.totals=document.querySelector("#abx-totals"),this.container=document.querySelector("."+o.default.container),this.replayBind=this.replay.bind(this),this.pausePlayBind=this.pausePlay.bind(this),a.stateModule.setState("year",{year:this.model.years[0],source:"load"})}},{key:"initializeAnimateOnOff",value:function(){this.animateYears=!0;var t=document.querySelector(".js-animate-checkbox"),e=function(t){t.checked?((0,u.GTMPush)("ABXAnimation|ToggleAnimation|On"),this.animateYears=!0):((0,u.GTMPush)("ABXAnimation|ToggleAnimation|Off"),this.animateYears=!1)}.bind(this);t.addEventListener("change",(function(){e(this)}))}},{key:"initializePlayButton",value:function(){this.playYearsBind=this.playYears.bind(this),this.playBind=this.play.bind(this);var t=document.querySelector("."+o.default.playButton);t.addEventListener("click",this.playBind),this.playBtn=t}},{key:"initializeYearButtons",value:function(){var t=this;document.querySelectorAll("."+o.default.yearButton).forEach((function(e){var n=t;e.addEventListener("click",(function(){var t=this;n.showPlayOption();var e=a.stateModule.getState("year")[0];e!=this.value&&((0,u.GTMPush)("ABXAnimation|Year|"+this.value),a.stateModule.setState("isPaused",!1),this.blur(),n.disablePlayButton(),n.removeReplayOption(),+this.value>+e?(a.stateModule.setState("isBackward",!1),new Promise((function(){a.stateModule.setState("year",{year:t.value,resolve:null,source:"yearButton"})}))):(a.stateModule.setState("isBackward",!0),new Promise((function(){a.stateModule.setState("year",{year:t.value,resolve:null,source:"yearButton"})}))))}))}))}},{key:"disableYearButtons",value:function(){this.yearButtons=this.yearButtons||document.querySelectorAll("."+o.default.yearButton),this.yearButtons.forEach((function(t){t.setAttribute("disabled","disabled")}))}},{key:"disablePlayButton",value:function(){this.playBtn=this.playBtn||document.querySelector("."+o.default.playButton),this.playBtn.setAttribute("disabled","disabled")}},{key:"enablePlayButton",value:function(){this.playBtn=this.playBtn||document.querySelector("."+o.default.playButton),this.playBtn.removeAttribute("disabled")}},{key:"enableYearButtons",value:function(){this.yearButtons=this.yearButtons||document.querySelectorAll("."+o.default.yearButton),this.yearButtons.forEach((function(t){t.removeAttribute("disabled")}))}},{key:"removePauseOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.replayBtn.removeEventListener("click",this.pausePlayBind),this.replayBtn.classList.remove(o.default.pause),this.replayBtn.classList.remove(o.default.willPause)}},{key:"removePlayOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.replayBtn.removeEventListener("click",this.playBind)}},{key:"removeReplayOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.replayBtn.classList.remove(o.default.replay),this.replayBtn.removeEventListener("click",this.replayBind)}},{key:"showPauseOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.removeReplayOption(),this.removePlayOption(),this.replayBtn.addEventListener("click",this.pausePlayBind),this.replayBtn.classList.add(o.default.pause),this.replayBtn.title="Pause"}},{key:"showPlayOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.removeReplayOption(),this.removePauseOption(),this.replayBtn.addEventListener("click",this.playBind),this.replayBtn.title="Play"}},{key:"showReplayOption",value:function(){this.replayBtn=this.replayBtn||document.querySelector("."+o.default.playButton),this.removePauseOption(),this.removePlayOption(),this.replayBtn.addEventListener("click",this.replayBind),this.replayBtn.classList.add(o.default.replay),this.replayBtn.title="Replay"}},{key:"addIdsAndClasses",value:function(t,e){var n=this;return new Promise((function(r){requestAnimationFrame((function(){t.forEach((function(t,i,a){t.domDrug.id="drug-"+t.id,t.domDrug.classList.remove(o.default.drugEmpty),t.domDrug.classList.add(""+(t.gramNegative?o.default.gramNegative:"nope"),""+(t.novel?o.default.novel:"nope"),""+(t.urgent?o.default.urgent:"nope")),isNaN(t[e])&&t.domDrug.classList.add(o.default.isDiscontinued),t.domDrug.setAttribute("data-tippy-content","<strong>"+t.name+"</strong><br />"+t.company),n.setTippys(t.domDrug),i==a.length-1&&setTimeout((function(){r(!0)}))}))}))}))}},{key:"animateDrugs",value:function(t,e){var n=t.filter((function(t){return t.moved})),r=0;n.length>0?n.forEach((function(t,n,i){var a=t.keptSameStatus?100:1200,s=t.keptSameStatus?a/4:t.isEntering?a/6:a;t.domDrug.style.transitionDuration=a+"ms",setTimeout((function(){requestAnimationFrame((function(){var r;t.keptSameStatus||t.isEntering?t.domDrug.style.transform="translate(0, 0)":(t.domDrug._tippy.show(),t.domDrug.classList.add(o.default.isMoving),setTimeout((function(){r=t.domDrug._tippy.popper.style.transform.match(/translate3d\((.*?)\)/)[1].split(",").map((function(t){return parseInt(t)})),t.domDrug._tippy.popper.style.transitionDuration=a+"ms",t.domDrug._tippy.popper.style.transitionTimingFunction="ease-in-out",t.domDrug._tippy.popper.style.transform="translate3d("+(r[0]-t.deltaX)+"px, "+(r[1]-t.deltaY)+"px, "+r[2]+"px)",t.domDrug.style.transform="translate(0, 0)"}))),setTimeout((function(){t.domDrug._tippy.hide(),t.domDrug.classList.remove(o.default.isTranslated),t.domDrug.classList.remove(o.default.isMoving),n==i.length-1&&e(!0)}),a)}))}),r),r+=s})):e(!0)}},{key:"checkHeight",value:function(){window.innerHeight<this.heightNeeded?document.body.classList.add(o.default.squat):document.body.classList.remove(o.default.squat),function(){var t=document.documentElement,e=Math.floor((this.heightNeeded-this.unitPadding-this.headerHeight)*(this.maxActive/(this.maxActive+this.maxDiscontinued)));t.style.setProperty("--unit-dimension",this.minUnitDimension+"px"),t.style.setProperty("--header-height",this.headerHeight+"px"),t.style.setProperty("--max-container-height",this.heightNeeded+"px"),t.style.setProperty("--active-max-height",e+"px"),t.style.setProperty("--discontinued-max-height",Math.floor(this.heightNeeded-e-this.headerHeight)+"px")}.call(this)}},{key:"clearAddedDrugAttributes",value:function(){this.model.unnestedData.forEach((function(t){delete t.previousSlot,delete t.slot,delete t.phaseIndex,delete t.moved,delete t.previousScreenPosition,delete t.movedFromProcessedColumn,delete t.movedFromSamePhase,delete t.previousMapPosition,delete t.deltaX,delete t.deltaY,delete t.isEntering,delete t.keptSameStatus}))}},{key:"clearPhase",value:function(t,e){var n=this;return new Promise((function(r){Array.from(n.columns[e][t].children).forEach((function(t,e,n){t.className=o.default.drug+" "+o.default.drugEmpty,t.id="",t.removeAttribute("data-tippy-content"),t.innerHTML="",t._tippy&&(t.removeAttribute("tabindex"),t._tippy.destroy()),e==n.length-1&&r(!0)}))}))}},{key:"enterDrugs",value:function(t,e,n){var r=this;t.forEach((function(t){var n=isNaN(t[e])?"discontinued":"active",i=parseInt(t[e])-1,o=r.positionMap[n][i].length;t.phaseIndex=i,t.type=n,t.previousScreenPosition={top:-3e3,left:-3e3},t.moved=!0,t.slot=o,t.isEntering=!0,r.mapPositions({type:n,phaseIndex:i,slot:o,drug:t})})),this.placeDrugs(t.sort(this.sortBySlot).sort(this.sortByPhase),n,e)}},{key:"highlightColumn",value:function(t){this.headers.forEach((function(t){t.classList.remove(o.default.isAnimating)})),"number"==typeof t&&this.headers[t].classList.add(o.default.isAnimating)}},{key:"invertDrugs",value:function(t){return new Promise((function(e){var n=t.filter((function(t){return t.moved}));0==n.length&&e(!0);for(var r=0;r<n.length;r++){n[r].domDrug.classList.add(o.default.isTranslated),n[r].domDrug.style.transitionDuration="0s";var i=n[r].domDrug.getBoundingClientRect();n[r].deltaY=n[r].previousScreenPosition.top-i.top,n[r].deltaX=n[r].previousScreenPosition.left-i.left}for(var a=function(t){requestAnimationFrame((function(){n[t].domDrug.style.transform="translate("+n[t].deltaX+"px, "+n[t].deltaY+"px)",n[t].domDrug.style.opacity=.99,requestAnimationFrame((function(){n[t].domDrug.style.opacity=1,t==n.length-1&&e(!0)}))}))},s=0;s<n.length;s++)a(s)}))}},{key:"mapPositions",value:function(t){var e=t.type,n=t.phaseIndex,r=t.slot,i=t.drug;this.positionMap[e][n][r]=i}},{key:"pausePlay",value:function(){(0,u.GTMPush)("ABXAnimation|Pause"),this.playBtn.blur(),this.playBtn.removeEventListener("click",this.pausePlayBind),a.stateModule.setState("isPaused",!0),this.playBtn.classList.add(o.default.willPause)}},{key:"placeDrugs",value:function(t,e,n){var r=this;if(0!=t.length){for(var i=0;i<t.length;i++){var a=this.positionMap[t[i].type][t[i].phaseIndex].indexOf(t[i]),s=this.columns[t[i].type][t[i].phaseIndex].children[a];if(!s){var p=document.createElement("div");p.classList.add(o.default.drug,o.default.drugEmpty),p.setAttribute("tabindex",0),p.setAttribute("data-temporary",!0),this.columns[t[i].type][t[i].phaseIndex].appendChild(p),s=p}t[i].domDrug=s}this.animateYears&&!this.isBackward?this.invertDrugs(t).then((function(){r.addIdsAndClasses(t,n).then((function(){r.animateDrugs(t,e)}))})):this.addIdsAndClasses(t,n).then((function(){e(!0)}))}else e(!0)}},{key:"play",value:function(){this.showPauseOption(),this.playYearsBind()}},{key:"playYears",value:function(t,e){var n=this;"replay"==t?(0,u.GTMPush)("ABXAnimation|Replay"):(0,u.GTMPush)("ABXAnimation|Play"),new Promise((function(t){var r="replay"==e?n.model.years[0]-1:a.stateModule.getState("year").year;+r<n.model.years[n.model.years.length-1]&&!a.stateModule.getState("isPaused")?a.stateModule.setState("year",{year:+r+1,source:e||"play"}):(n.removePauseOption(),r==n.model.years[n.model.years.length-1]?n.showReplayOption():n.showPlayOption(),a.stateModule.setState("isPaused",!1),t(!0))}))}},{key:"populateInitialDrugs",value:function(t){var e=this;["active","discontinued"].forEach((function(n,r){var i=0===r?e.model.unnestedData.filter((function(e){return!isNaN(e[t])})):e.model.unnestedData.filter((function(e){return isNaN(e[t])}));f.forEach((function(r,o){var a=i.filter((function(e){return parseInt(e[t])===o+1}));a.forEach((function(t,r){t.domDrug=e.columns[n][o].children[r],e.mapPositions({type:n,phaseIndex:o,slot:r,drug:t})})),e.addIdsAndClasses(a,t)}))})),this.updateText(t)}},{key:"recordMapPosition",value:function(t){var e=t.type,n=t.phaseIndex,r=t.slot;t.drug.previousMapPosition=e+"-"+n+"-"+r}},{key:"recordScreenPosition",value:function(t){!this.isBackward&&this.animateYears&&(t.previousScreenPosition=t.domDrug.getBoundingClientRect())}},{key:"removeTemporaryPlaceholders",value:function(){document.querySelectorAll("[data-temporary]").forEach((function(t){t.parentElement.removeChild(t)}))}},{key:"replay",value:function(t){this.showPauseOption(),this.playYearsBind(t,"replay")}},{key:"setTippys",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"[data-tippy-content]";(0,p.default)(t,{arrow:!0,distance:3})}},{key:"sortBySlot",value:function(t,e){return t.slot-e.slot}},{key:"sortByPhase",value:function(t,e){return t.phaseIndex-e.phaseIndex}},{key:"switchYears",value:function(t){var e=this,n=t.year,r=t.source;return new Promise((function(t){var i=f.length-1,o=a.stateModule.getPreviousState("year").year;e.isBackward=+o>n,e.disableYearButtons(),["play","replay"].includes(r)||e.disablePlayButton();var s=function(){var e=this;this.highlightColumn(i),new Promise((function(t){var r=function(e){var a=this;new Promise((function(t){for(var r=[],s=[],p=a.positionMap[e][i].length-1;p>=0;p--){var u=a.positionMap[e][i][p];u.previousSlot=p;var l=u.movedFromProcessedColumn?n:o;if(u[n]!=u[l]&&0!=u[n]){a.recordScreenPosition(u),a.recordMapPosition({type:e,phaseIndex:i,slot:p,drug:u});var c=isNaN(u[n])?"discontinued":"active",d=parseInt(u[n])-1;a.mapPositions({type:c,phaseIndex:d,slot:a.positionMap[c][d].length,drug:u}),a.positionMap[e][i].splice(p,1),u.movedFromProcessedColumn=!0,u.moved=!0,u.movedFromSamePhase=parseInt(u[n])===parseInt(u[l]),r.push(u)}else 0!=u[n]?(s.push(u),a.recordMapPosition({type:e,phaseIndex:i,slot:p,drug:u})):(a.recordMapPosition({type:e,phaseIndex:i,slot:p,drug:u}),a.positionMap[e][i].splice(p,1));u.phaseIndex=parseInt(u[n])-1,u.type=isNaN(u[n])?"discontinued":"active"}s.reverse().forEach((function(t,e){t.previousSlot!=e?(t.moved=!0,t.keptSameStatus=!0,a.recordScreenPosition(t)):t.moved=!1})),s.reverse(),a.clearPhase(i,e).then((function(){a.placeDrugs([].concat(r,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(s.reverse())),t,n)}))})).then((function(){"active"==e?r(e="discontinued"):t(!0)}))}.bind(e);r("active")})).then((function(){if(i>0)i--,s();else{var a=e.model.unnestedData.filter((function(t){return 0==t[o]&&0!=t[n]}));new Promise((function(t){e.enterDrugs(a,n,t)})).then((function(){e.updateText(n),e.removeTemporaryPlaceholders(),e.clearAddedDrugAttributes(),setTimeout((function(){t(!0),e.highlightColumn()}),n==e.model.years[0]&&"replay"==r?500:0)}))}}))}.bind(e);s()})).then((function(){e.enableYearButtons(),e.enablePlayButton()}))}},{key:"update",value:function(t,e){var n=this;a.stateModule.setState("isPaused",!1),document.querySelector("."+o.default.yearButtonActive).classList.remove(o.default.yearButtonActive,o.default.observation,o.default.observation0,o.default.observation1),document.querySelector('button[value="'+e.year+'"]').classList.add(o.default.yearButtonActive),"load"===e.source&&this.populateInitialDrugs(e.year),"yearButton"===e.source&&this.switchYears(e),["play","replay"].includes(e.source)&&this.switchYears(e).then((function(){setTimeout((function(){n.playYears()}),500)}))}},{key:"updateText",value:function(t){var e=this.model.unnestedData.filter((function(e){return 0!==parseInt(e[t])})),n=e.filter((function(e){return 5==e[t]})).length,r=e.filter((function(e){return isNaN(e[t])})).length;+t>this.model.years[0]?this.totals.classList.add("is-subsequent"):this.totals.classList.remove("is-subsequent"),this.approvedSpan.innerHTML!=n&&document.querySelector("#total-approved").fadeInContent(n),this.discontinuedSpan.innerHTML!=r&&document.querySelector("#total-discontinued").fadeInContent(r)}}]),e}(i.default);e.default=h},function(t,e,n){t.exports={container:"src-views-viz-view--container",superSquat:"src-views-viz-view--superSquat",activeContainer:"src-views-viz-view--activeContainer",headerContainer:"src-views-viz-view--headerContainer",squat:"src-views-viz-view--squat",column:"src-views-viz-view--column",discontinuedContainer:"src-views-viz-view--discontinuedContainer",drug:"src-views-viz-view--drug",drugEmpty:"src-views-viz-view--drugEmpty",isTranslated:"src-views-viz-view--isTranslated",novel:"src-views-viz-view--novel",urgent:"src-views-viz-view--urgent",gramNegative:"src-views-viz-view--gramNegative",wasDiscontinued:"src-views-viz-view--wasDiscontinued",isMoving:"src-views-viz-view--isMoving",headerDiv:"src-views-viz-view--headerDiv",isAnimating:"src-views-viz-view--isAnimating",phaseFull:"src-views-viz-view--phaseFull",phaseAbbr:"src-views-viz-view--phaseAbbr",controlContainer:"src-views-viz-view--controlContainer",playButton:"src-views-viz-view--playButton",yearButton:"src-views-viz-view--yearButton",inputWrapper:"src-views-viz-view--inputWrapper",pause:"src-views-viz-view--pause",replay:"src-views-viz-view--replay",willPause:"src-views-viz-view--willPause",pauseSpinner:"src-views-viz-view--pauseSpinner",yearButtonActive:"src-views-viz-view--yearButtonActive",inputLabel:"src-views-viz-view--inputLabel"}},function(t,e,n){var r=n(13),i=n(2),o={};function a(t,e){var n=r(e.toString());return{token:"sub"+r(t+e),fn:n}}t.exports={logSubs:function(){console.log(o)},setSubs:function(t){t.forEach((function(t){var e=t[0],n=t[1],r=a(e,n);if(void 0===o[r.fn]&&(o[r.fn]={}),void 0!==o[r.fn][e])throw"Subscription token is already in use.";o[r.fn][e]=i.subscribe(e,n)}))},cancelSub:function(t,e){var n=a(t,e);if(void 0===o[n.fn]||void 0===o[n.fn][t])throw"Subscription does not exist.";i.unsubscribe(o[n.fn][t]),delete o[n.fn][t],0===Object.keys(o[n.fn]).length&&delete o[n.fn]}}},function(t,e,n){"use strict";t.exports=function(t){for(var e=5381,n=t.length;n;)e=33*e^t.charCodeAt(--n);return e>>>0}},function(t,e,n){"use strict";n.r(e);var r=n(4);
/**!
* tippy.js v4.3.5
* (c) 2017-2019 atomiks
* MIT License
*/function i(){return(i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}var o="undefined"!=typeof window&&"undefined"!=typeof document,a=o?navigator.userAgent:"",s=/MSIE |Trident\//.test(a),p=/UCBrowser\//.test(a),u=o&&/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,l={a11y:!0,allowHTML:!0,animateFill:!0,animation:"shift-away",appendTo:function(){return document.body},aria:"describedby",arrow:!1,arrowType:"sharp",boundary:"scrollParent",content:"",delay:0,distance:10,duration:[325,275],flip:!0,flipBehavior:"flip",flipOnUpdate:!1,followCursor:!1,hideOnClick:!0,ignoreAttributes:!1,inertia:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,lazy:!0,maxWidth:350,multiple:!1,offset:0,onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},placement:"top",popperOptions:{},role:"tooltip",showOnInit:!1,size:"regular",sticky:!1,target:"",theme:"dark",touch:!0,touchHold:!1,trigger:"mouseenter focus",triggerTarget:null,updateDuration:0,wait:null,zIndex:9999},c=["arrow","arrowType","boundary","distance","flip","flipBehavior","flipOnUpdate","offset","placement","popperOptions"],d=o?Element.prototype:{},f=d.matches||d.matchesSelector||d.webkitMatchesSelector||d.mozMatchesSelector||d.msMatchesSelector;function h(t){return[].slice.call(t)}function m(t,e){return v(t,(function(t){return f.call(t,e)}))}function v(t,e){for(;t;){if(e(t))return t;t=t.parentElement}return null}var y={passive:!0},g=".".concat("tippy-popper"),b=".".concat("tippy-tooltip"),w=".".concat("tippy-content"),x=".".concat("tippy-backdrop"),k=".".concat("tippy-arrow"),E=".".concat("tippy-roundarrow"),_=!1;function S(){_||(_=!0,u&&document.body.classList.add("tippy-iOS"),window.performance&&document.addEventListener("mousemove",P))}var O=0;function P(){var t=performance.now();t-O<20&&(_=!1,document.removeEventListener("mousemove",P),u||document.body.classList.remove("tippy-iOS")),O=t}function C(){var t=document.activeElement;t&&t.blur&&t._tippy&&t.blur()}var A=Object.keys(l);function T(t){return!!t._tippy&&!f.call(t,g)}function L(t,e){return{}.hasOwnProperty.call(t,e)}function D(t,e,n){if(Array.isArray(t)){var r=t[e];return null==r?n:r}return t}function M(t,e){return 0===e?t:function(r){clearTimeout(n),n=setTimeout((function(){t(r)}),e)};var n}function B(t,e){return t&&t.modifiers&&t.modifiers[e]}function I(t,e){return t.indexOf(e)>-1}function R(t){return t instanceof Element}function j(t){return!(!t||!L(t,"isVirtual"))||R(t)}function N(t,e){return"function"==typeof t?t.apply(null,e):t}function z(t,e){t.filter((function(t){return"flip"===t.name}))[0].enabled=e}function F(){return document.createElement("div")}function H(t,e){t.forEach((function(t){t&&(t.style.transitionDuration="".concat(e,"ms"))}))}function q(t,e){t.forEach((function(t){t&&t.setAttribute("data-state",e)}))}function Y(t,e){var n=i({},e,{content:N(e.content,[t])},e.ignoreAttributes?{}:function(t){return A.reduce((function(e,n){var r=(t.getAttribute("data-tippy-".concat(n))||"").trim();if(!r)return e;if("content"===n)e[n]=r;else try{e[n]=JSON.parse(r)}catch(t){e[n]=r}return e}),{})}(t));return(n.arrow||p)&&(n.animateFill=!1),n}function X(t,e){Object.keys(t).forEach((function(t){if(!L(e,t))throw new Error("[tippy]: `".concat(t,"` is not a valid option"))}))}function W(t,e){t.innerHTML=R(e)?e.innerHTML:e}function U(t,e){if(R(e.content))W(t,""),t.appendChild(e.content);else if("function"!=typeof e.content){t[e.allowHTML?"innerHTML":"textContent"]=e.content}}function V(t){return{tooltip:t.querySelector(b),backdrop:t.querySelector(x),content:t.querySelector(w),arrow:t.querySelector(k)||t.querySelector(E)}}function G(t){t.setAttribute("data-inertia","")}function K(t){var e=F();return"round"===t?(e.className="tippy-roundarrow",W(e,'<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>')):e.className="tippy-arrow",e}function Q(){var t=F();return t.className="tippy-backdrop",t.setAttribute("data-state","hidden"),t}function J(t,e){t.setAttribute("tabindex","-1"),e.setAttribute("data-interactive","")}function $(t,e,n){var r=p&&void 0!==document.body.style.webkitTransition?"webkitTransitionEnd":"transitionend";t[e+"EventListener"](r,n)}function Z(t){var e=t.getAttribute("x-placement");return e?e.split("-")[0]:""}function tt(t,e,n){n.split(" ").forEach((function(n){t.classList[e](n+"-theme")}))}function et(t,e){var n=F();n.className="tippy-popper",n.id="tippy-".concat(t),n.style.zIndex=""+e.zIndex,n.style.position="absolute",n.style.top="0",n.style.left="0",e.role&&n.setAttribute("role",e.role);var r=F();r.className="tippy-tooltip",r.style.maxWidth=e.maxWidth+("number"==typeof e.maxWidth?"px":""),r.setAttribute("data-size",e.size),r.setAttribute("data-animation",e.animation),r.setAttribute("data-state","hidden"),tt(r,"add",e.theme);var i=F();return i.className="tippy-content",i.setAttribute("data-state","hidden"),e.interactive&&J(n,r),e.arrow&&r.appendChild(K(e.arrowType)),e.animateFill&&(r.appendChild(Q()),r.setAttribute("data-animatefill","")),e.inertia&&G(r),U(i,e),r.appendChild(i),n.appendChild(r),n}function nt(t,e,n){var r=V(t),i=r.tooltip,o=r.content,a=r.backdrop,s=r.arrow;t.style.zIndex=""+n.zIndex,i.setAttribute("data-size",n.size),i.setAttribute("data-animation",n.animation),i.style.maxWidth=n.maxWidth+("number"==typeof n.maxWidth?"px":""),n.role?t.setAttribute("role",n.role):t.removeAttribute("role"),e.content!==n.content&&U(o,n),!e.animateFill&&n.animateFill?(i.appendChild(Q()),i.setAttribute("data-animatefill","")):e.animateFill&&!n.animateFill&&(i.removeChild(a),i.removeAttribute("data-animatefill")),!e.arrow&&n.arrow?i.appendChild(K(n.arrowType)):e.arrow&&!n.arrow&&i.removeChild(s),e.arrow&&n.arrow&&e.arrowType!==n.arrowType&&i.replaceChild(K(n.arrowType),s),!e.interactive&&n.interactive?J(t,i):e.interactive&&!n.interactive&&function(t,e){t.removeAttribute("tabindex"),e.removeAttribute("data-interactive")}(t,i),!e.inertia&&n.inertia?G(i):e.inertia&&!n.inertia&&function(t){t.removeAttribute("data-inertia")}(i),e.theme!==n.theme&&(tt(i,"remove",e.theme),tt(i,"add",n.theme))}var rt=1,it=[];function ot(t,e){var n,o,a,p,u,d=Y(t,e);if(!d.multiple&&t._tippy)return null;var b,w,x,k,E,S=!1,O=!1,P=!1,C=!1,A=[],T=M(yt,d.interactiveDebounce),j=rt++,F=et(j,d),W=V(F),U={id:j,reference:t,popper:F,popperChildren:W,popperInstance:null,props:d,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},clearDelayTimeouts:At,set:Tt,setContent:function(t){Tt({content:t})},show:Lt,hide:Dt,enable:function(){U.state.isEnabled=!0},disable:function(){U.state.isEnabled=!1},destroy:function(e){if(U.state.isDestroyed)return;O=!0,U.state.isMounted&&Dt(0);ht(),delete t._tippy;var n=U.props.target;n&&e&&R(t)&&h(t.querySelectorAll(n)).forEach((function(t){t._tippy&&t._tippy.destroy()}));U.popperInstance&&U.popperInstance.destroy();O=!1,U.state.isDestroyed=!0}};return t._tippy=U,F._tippy=U,ft(),d.lazy||_t(),d.showOnInit&&Ot(),!d.a11y||d.target||(!R(E=Q())||f.call(E,"a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]")&&!E.hasAttribute("disabled"))||Q().setAttribute("tabindex","0"),F.addEventListener("mouseenter",(function(t){U.props.interactive&&U.state.isVisible&&"mouseenter"===n&&Ot(t,!0)})),F.addEventListener("mouseleave",(function(){U.props.interactive&&"mouseenter"===n&&document.addEventListener("mousemove",T)})),U;function G(){document.removeEventListener("mousemove",mt)}function K(){document.body.removeEventListener("mouseleave",Pt),document.removeEventListener("mousemove",T),it=it.filter((function(t){return t!==T}))}function Q(){return U.props.triggerTarget||t}function J(){document.addEventListener("click",Ct,!0)}function tt(){document.removeEventListener("click",Ct,!0)}function at(){return[U.popperChildren.tooltip,U.popperChildren.backdrop,U.popperChildren.content]}function st(){var t=U.props.followCursor;return t&&"focus"!==n||_&&"initial"===t}function pt(){H([F],s?0:U.props.updateDuration);var e=t.getBoundingClientRect();!function n(){var r=t.getBoundingClientRect();e.top===r.top&&e.right===r.right&&e.bottom===r.bottom&&e.left===r.left||U.popperInstance.scheduleUpdate(),e=r,U.state.isMounted&&requestAnimationFrame(n)}()}function ut(t,e){ct(t,(function(){!U.state.isVisible&&F.parentNode&&F.parentNode.contains(F)&&e()}))}function lt(t,e){ct(t,e)}function ct(t,e){var n=U.popperChildren.tooltip;function r(t){t.target===n&&($(n,"remove",r),e())}if(0===t)return e();$(n,"remove",x),$(n,"add",r),x=r}function dt(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];Q().addEventListener(t,e,n),A.push({eventType:t,handler:e,options:n})}function ft(){U.props.touchHold&&!U.props.target&&(dt("touchstart",vt,y),dt("touchend",gt,y)),U.props.trigger.trim().split(" ").forEach((function(t){if("manual"!==t)if(U.props.target)switch(t){case"mouseenter":dt("mouseover",wt),dt("mouseout",xt);break;case"focus":dt("focusin",wt),dt("focusout",xt);break;case"click":dt(t,wt)}else switch(dt(t,vt),t){case"mouseenter":dt("mouseleave",gt);break;case"focus":dt(s?"focusout":"blur",bt)}}))}function ht(){A.forEach((function(t){var e=t.eventType,n=t.handler,r=t.options;Q().removeEventListener(e,n,r)})),A=[]}function mt(e){var n=o=e,r=n.clientX,a=n.clientY;if(k){var s=v(e.target,(function(e){return e===t})),p=t.getBoundingClientRect(),u=U.props.followCursor,l="horizontal"===u,c="vertical"===u,d=I(["top","bottom"],Z(F)),f=F.getAttribute("x-placement"),h=!!f&&!!f.split("-")[1],m=d?F.offsetWidth:F.offsetHeight,y=m/2,g=d?0:h?m:y,b=d?h?m:y:0;!s&&U.props.interactive||(U.popperInstance.reference=i({},U.popperInstance.reference,{referenceNode:t,clientWidth:0,clientHeight:0,getBoundingClientRect:function(){return{width:d?m:0,height:d?0:m,top:(l?p.top:a)-g,bottom:(l?p.bottom:a)+g,left:(c?p.left:r)-b,right:(c?p.right:r)+b}}}),U.popperInstance.update()),"initial"===u&&U.state.isVisible&&G()}}function vt(t){U.state.isEnabled&&!kt(t)&&(U.state.isVisible||(n=t.type,t instanceof MouseEvent&&(o=t,it.forEach((function(e){return e(t)})))),"click"===t.type&&!1!==U.props.hideOnClick&&U.state.isVisible?Pt():Ot(t))}function yt(e){var n=m(e.target,g)===F,r=v(e.target,(function(e){return e===t}));n||r||function(t,e,n,r){if(!t)return!0;var i=n.clientX,o=n.clientY,a=r.interactiveBorder,s=r.distance,p=e.top-o>("top"===t?a+s:a),u=o-e.bottom>("bottom"===t?a+s:a),l=e.left-i>("left"===t?a+s:a),c=i-e.right>("right"===t?a+s:a);return p||u||l||c}(Z(F),F.getBoundingClientRect(),e,U.props)&&(K(),Pt())}function gt(t){if(!kt(t))return U.props.interactive?(document.body.addEventListener("mouseleave",Pt),document.addEventListener("mousemove",T),void it.push(T)):void Pt()}function bt(t){t.target===Q()&&(U.props.interactive&&t.relatedTarget&&F.contains(t.relatedTarget)||Pt())}function wt(t){m(t.target,U.props.target)&&Ot(t)}function xt(t){m(t.target,U.props.target)&&Pt()}function kt(t){var e="ontouchstart"in window,n=I(t.type,"touch"),r=U.props.touchHold;return e&&_&&r&&!n||_&&!r&&n}function Et(){!C&&w&&(C=!0,function(t){t.offsetHeight}(F),w())}function _t(){var e=U.props.popperOptions,n=U.popperChildren,o=n.tooltip,a=n.arrow,s=B(e,"preventOverflow");function p(t){U.props.flip&&!U.props.flipOnUpdate&&(t.flipped&&(U.popperInstance.options.placement=t.placement),z(U.popperInstance.modifiers,!1)),o.setAttribute("x-placement",t.placement),!1!==t.attributes["x-out-of-boundaries"]?o.setAttribute("x-out-of-boundaries",""):o.removeAttribute("x-out-of-boundaries"),b&&b!==t.placement&&P&&(o.style.transition="none",requestAnimationFrame((function(){o.style.transition=""}))),b=t.placement,P=U.state.isVisible;var e=Z(F),n=o.style;n.top=n.bottom=n.left=n.right="",n[e]=-(U.props.distance-10)+"px";var r=s&&void 0!==s.padding?s.padding:4,a="number"==typeof r,p=i({top:a?r:r.top,bottom:a?r:r.bottom,left:a?r:r.left,right:a?r:r.right},!a&&r);p[e]=a?r+U.props.distance:(r[e]||0)+U.props.distance,U.popperInstance.modifiers.filter((function(t){return"preventOverflow"===t.name}))[0].padding=p,k=p}var u=i({eventsEnabled:!1,placement:U.props.placement},e,{modifiers:i({},e?e.modifiers:{},{preventOverflow:i({boundariesElement:U.props.boundary,padding:4},s),arrow:i({element:a,enabled:!!a},B(e,"arrow")),flip:i({enabled:U.props.flip,padding:U.props.distance+4,behavior:U.props.flipBehavior},B(e,"flip")),offset:i({offset:U.props.offset},B(e,"offset"))}),onCreate:function(t){p(t),Et(),e&&e.onCreate&&e.onCreate(t)},onUpdate:function(t){p(t),Et(),e&&e.onUpdate&&e.onUpdate(t)}});U.popperInstance=new r.a(t,F,u)}function St(){C=!1;var e=st();U.popperInstance?(z(U.popperInstance.modifiers,U.props.flip),e||(U.popperInstance.reference=t,U.popperInstance.enableEventListeners()),U.popperInstance.scheduleUpdate()):(_t(),e||U.popperInstance.enableEventListeners());var n=U.props.appendTo,r="parent"===n?t.parentNode:N(n,[t]);r.contains(F)||(r.appendChild(F),U.props.onMount(U),U.state.isMounted=!0)}function Ot(t,n){if(At(),!U.state.isVisible){if(U.props.target)return function(t){if(t){var n=m(t.target,U.props.target);n&&!n._tippy&&ot(n,i({},U.props,{content:N(e.content,[n]),appendTo:e.appendTo,target:"",showOnInit:!0}))}}(t);if(S=!0,t&&!n&&U.props.onTrigger(U,t),U.props.wait)return U.props.wait(U,t);st()&&!U.state.isMounted&&(U.popperInstance||_t(),document.addEventListener("mousemove",mt)),J();var r=D(U.props.delay,0,l.delay);r?a=setTimeout((function(){Lt()}),r):Lt()}}function Pt(){if(At(),!U.state.isVisible)return G(),void tt();S=!1;var t=D(U.props.delay,1,l.delay);t?p=setTimeout((function(){U.state.isVisible&&Dt()}),t):u=requestAnimationFrame((function(){Dt()}))}function Ct(t){if(!U.props.interactive||!F.contains(t.target)){if(Q().contains(t.target)){if(_)return;if(U.state.isVisible&&I(U.props.trigger,"click"))return}!0===U.props.hideOnClick&&(At(),Dt())}}function At(){clearTimeout(a),clearTimeout(p),cancelAnimationFrame(u)}function Tt(e){X(e=e||{},l),ht();var n=U.props,r=Y(t,i({},U.props,{},e,{ignoreAttributes:!0}));r.ignoreAttributes=L(e,"ignoreAttributes")?e.ignoreAttributes||!1:n.ignoreAttributes,U.props=r,ft(),K(),T=M(yt,r.interactiveDebounce),nt(F,n,r),U.popperChildren=V(F),U.popperInstance&&(c.some((function(t){return L(e,t)&&e[t]!==n[t]}))?(U.popperInstance.destroy(),_t(),U.state.isVisible&&U.popperInstance.enableEventListeners(),U.props.followCursor&&o&&mt(o)):U.popperInstance.update())}function Lt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:D(U.props.duration,0,l.duration[1]);if(!U.state.isDestroyed&&U.state.isEnabled&&(!_||U.props.touch)&&!Q().hasAttribute("disabled")&&!1!==U.props.onShow(U)){J(),F.style.visibility="visible",U.state.isVisible=!0,U.props.interactive&&Q().classList.add("tippy-active");var e=at();H(e.concat(F),0),w=function(){if(U.state.isVisible){var n=st();n&&o?mt(o):n||U.popperInstance.update(),U.popperChildren.backdrop&&(U.popperChildren.content.style.transitionDelay=Math.round(t/12)+"ms"),U.props.sticky&&pt(),H([F],U.props.updateDuration),H(e,t),q(e,"visible"),lt(t,(function(){U.props.aria&&Q().setAttribute("aria-".concat(U.props.aria),F.id),U.props.onShown(U),U.state.isShown=!0}))}},St()}}function Dt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:D(U.props.duration,1,l.duration[1]);if(!U.state.isDestroyed&&(U.state.isEnabled||O)&&(!1!==U.props.onHide(U)||O)){tt(),F.style.visibility="hidden",U.state.isVisible=!1,U.state.isShown=!1,P=!1,U.props.interactive&&Q().classList.remove("tippy-active");var e=at();H(e,t),q(e,"hidden"),ut(t,(function(){S||G(),U.props.aria&&Q().removeAttribute("aria-".concat(U.props.aria)),U.popperInstance.disableEventListeners(),U.popperInstance.options.placement=U.props.placement,F.parentNode.removeChild(F),U.props.onHidden(U),U.state.isMounted=!1}))}}}var at=!1;function st(t,e){X(e||{},l),at||(document.addEventListener("touchstart",S,y),window.addEventListener("blur",C),at=!0);var n,r=i({},l,{},e);n=t,"[object Object]"!=={}.toString.call(n)||n.addEventListener||function(t){var e={isVirtual:!0,attributes:t.attributes||{},contains:function(){},setAttribute:function(e,n){t.attributes[e]=n},getAttribute:function(e){return t.attributes[e]},removeAttribute:function(e){delete t.attributes[e]},hasAttribute:function(e){return e in t.attributes},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(e){t.classList.classNames[e]=!0},remove:function(e){delete t.classList.classNames[e]},contains:function(e){return e in t.classList.classNames}}};for(var n in e)t[n]=e[n]}(t);var o=function(t){if(j(t))return[t];if(t instanceof NodeList)return h(t);if(Array.isArray(t))return t;try{return h(document.querySelectorAll(t))}catch(t){return[]}}(t).reduce((function(t,e){var n=e&&ot(e,r);return n&&t.push(n),t}),[]);return j(t)?o[0]:o}st.version="4.3.5",st.defaults=l,st.setDefaults=function(t){Object.keys(t).forEach((function(e){l[e]=t[e]}))},st.hideAll=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.exclude,n=t.duration;h(document.querySelectorAll(g)).forEach((function(t){var r=t._tippy;if(r){var i=!1;e&&(i=T(e)?r.reference===e:t===e.popper),i||r.hide(n)}}))},st.group=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.delay,r=void 0===n?t[0].props.delay:n,o=e.duration,a=void 0===o?0:o,s=!1;function p(t){s=t,d()}function u(e){e._originalProps.onShow(e),t.forEach((function(t){t.set({duration:a}),t.state.isVisible&&t.hide()})),p(!0)}function l(t){t._originalProps.onHide(t),p(!1)}function c(t){t._originalProps.onShown(t),t.set({duration:t._originalProps.duration})}function d(){t.forEach((function(t){t.set({onShow:u,onShown:c,onHide:l,delay:s?[0,Array.isArray(r)?r[1]:r]:r,duration:s?a:t._originalProps.duration})}))}t.forEach((function(t){t._originalProps?t.set(t._originalProps):t._originalProps=i({},t.props)})),d()},o&&setTimeout((function(){h(document.querySelectorAll("[data-tippy]")).forEach((function(t){var e=t.getAttribute("data-tippy");e&&st(t,{content:e})}))})),function(t){if(o){var e=document.createElement("style");e.type="text/css",e.textContent=t,e.setAttribute("data-tippy-stylesheet","");var n=document.head,r=n.querySelector("style,link");r?n.insertBefore(e,r):n.appendChild(e)}}('.tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px);transform:perspective(700px) translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(60deg);transform:perspective(700px) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px);transform:perspective(700px) translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(-60deg);transform:perspective(700px) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px);transform:perspective(700px) translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(-60deg);transform:perspective(700px) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px);transform:perspective(700px) translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(60deg);transform:perspective(700px) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:initial}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] .tippy-roundarrow path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}'),e.default=st},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=n(3);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}var p=function(t){function e(){return a(this,e),s(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),i(e,[{key:"prerender",value:function(){var t=function t(e,n,r){null===e&&(e=Function.prototype);var i=Object.getOwnPropertyDescriptor(e,n);if(void 0===i){var o=Object.getPrototypeOf(e);return null===o?void 0:t(o,n,r)}if("value"in i)return i.value;var a=i.get;return void 0!==a?a.call(r):void 0}(e.prototype.__proto__||Object.getPrototypeOf(e.prototype),"prerender",this).call(this);return this.name="VisuallyHidden",this.prerendered&&!this.rerender?t:(t.classList.add("visually-hidden"),this.model.nestedByYear.forEach((function(e){var n=document.createElement("h2");t.appendChild(n),n.textContent=e.year,e.values.forEach((function(n){var r=document.createElement("h3");r.textContent=4===n.phase?"New drug application":5===n.phase?"Approved":"Phase "+n.phase,t.appendChild(r),["Active","Inactive"].forEach((function(r,i){var o=document.createElement("h4");o.textContent=r,t.appendChild(o);var a=document.createElement("ul");n.values.filter((function(t){return 0==i?!isNaN(t[e.year]):isNaN(t[e.year])})).forEach((function(t){var e=document.createElement("li");e.textContent=t.name+" ("+t.company+")",a.appendChild(e)})),t.appendChild(a)}))}))})),t)}},{key:"init",value:function(){}}]),e}(((r=o)&&r.__esModule?r:{default:r}).default);e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(19),s=(r=a)&&r.__esModule?r:{default:r};var p=function(){function t(e,n){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.container=e,this.el=document.querySelector(e),Object.keys(n).forEach((function(t){r[t]=n[t]}))}return o(t,[{key:"init",value:function(t){this.needsRouter&&(this.router=new s.default,this.router.init(t)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var t=!1,e=document.body,n=0;function r(){new Date-n<500||t||(e.classList.add("has-hover"),t=!0)}document.addEventListener("touchstart",(function(){n=new Date}),!0),document.addEventListener("touchstart",(function(){t&&(e.classList.remove("has-hover"),t=!1)}),!0),document.addEventListener("mousemove",r,!0),r()}},{key:"createComponent",value:function(t,e,n,r){var o=Object.create({children:[],data:null,model:t,parent:null,rerenderOnDataMismatch:!1});if(null!==r&&"object"===(void 0===r?"undefined":i(r)))for(var a in r)r.hasOwnProperty(a)&&(o[a]=r[a]);return new e(n,o)}}]),t}();e.default=p},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return i(t,[{key:"init",value:function(t){var e=this;if(void 0===t||"object"!==(void 0===t?"undefined":r(t)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof t.encode||"function"!=typeof t.decode||!Array.isArray(t.views)||"object"!==r(t.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=t.encode,this.decodeHash=t.decode,this.viewPromises=t.views.map((function(t){return t.isReady})),this.PS=t.PS,Promise.all(this.viewPromises).then((function(){e.decodeHash()})),this.PS.setSubs(t.subscriptions.map((function(t){return[t,function(t,n){e.hashChange.call(e,t,n)}]})))}},{key:"hashChange",value:function(t,e){this.setStateObj(t,e),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(t,e){this.stateObj[t]=e}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),t}();e.default=o},function(t,e){t.exports='<section id="intro">\n    <div class="js-inner-content">\n    </div>\n</section>\n<section id="section-comparison">\n    <div class="js-inner-content">\n        <h2>Antibiotics in Development Since 2014</h2>\n        <div class="abx-legend">\n            <div class="abx-legend--wrapper">\n                <p class="abx-legend--item abx-legend--item--abx">Antibiotic</p>\n                <p class="abx-legend--item abx-legend--item--urgent">Expected to treat CDC urgent pathogen</p>\n            </div>\n            <div class="abx-legend--wrapper">\n                <p class="abx-legend--item abx-legend--item--novel">Novel antibiotics</p>\n                <p class="abx-legend--item abx-legend--item--gram">Expected to treat Gram-negative ESKAPE pathogens</p>\n            </div>\n        </div>\n        <div id="abx-visualization">\n        </div>\n        <div id="abx-totals">\n            <p>Total <strong>approved</strong> antibiotics <span class="since-2014">since 2014</span>: <span id="total-approved" class="total-span"></span></p>\n            <p>Total <strong>discontinued</strong> antibiotics <span class="since-2014">since 2014</span>: <span id="total-discontinued" class="total-span"></span></p>\n        </div>\n        <a name="summary" id="summary"></a>\n        <div id=visually-hidden-container>\n\n        </div>\n    </div>\n</section>\n<div id="abx-notes"></div>\n<footer class="download-resources">\n    <div>\n        <p class="flex"><strong>Resources: </strong>\n            <span class="flex">\n                <a class="pct-download" href="https://www.pewtrusts.org/en/research-and-analysis/issue-briefs/2020/04/tracking-the-global-pipeline-of-antibiotics-in-development">Methodology</a>\n                <a class="pct-download" href="https://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/antibiotics-currently-in-clinical-development">Report</a>\n            </span>\n        </p>\n    </div>\n</footer>'},function(t,e){t.exports='<p>The Pew Charitable Trusts has tracked the pipeline of antibiotics in clinical development since 2014 and has aggregated updates into an interactive tool that illustrates trends in the pipeline—as drugs are either approved, discontinued from development, or remain stagnant. This longitudinal assessment underscores the long-standing concerns of scientists, doctors, public health officials, and other stakeholders regarding the dangerously low number of antibiotics in development to address current and future patient needs, particularly for treating the most urgent bacterial threats, such as Gram-negative pathogens, and those prioritized by the <a href="https://www.cdc.gov/drugresistance/biggest_threats.html">Centers for Disease Control and Prevention</a> and the <a href="https://www.who.int/news-room/detail/27-02-2017-who-publishes-list-of-bacteria-for-which-new-antibiotics-are-urgently-needed">World Health Organization</a>.</p>\n<p>Click the play button to see the evolution of the antibiotic pipeline since 2014, or click on an individual year to see the status of the pipeline at a particular point in time. (To view without animation, uncheck the “animate change” box.) To see additional information about each drug, hover over or tap any of the rectangles.</p>\n<p class="visually-hidden">Visually impaired users may wish to skip to <a href="#summary">the summary of the content</a>.</p>'},function(t,e){t.exports='<p><strong>Notes:</strong> Candidates included in this data visualization are consistent with Pew’s methodology for tracking antibiotics in clinical development. The analysis captures the status of antibiotics in the pipeline beginning in 2014, including those approved by the FDA and other regulatory agencies that year. More information about methodology and the full underlying data can be found in <a href="https://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2014/antibiotics-currently-in-clinical-development">Pew’s latest pipeline analysis</a>. This interactive tool is updated annually. </p>\n'},function(t,e,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,