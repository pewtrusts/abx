!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=16)}([function(e,t,n){e.exports={container:"src-views-viz-view--container",superSquat:"src-views-viz-view--superSquat",activeContainer:"src-views-viz-view--activeContainer",headerContainer:"src-views-viz-view--headerContainer",discontinuedContainer:"src-views-viz-view--discontinuedContainer",column:"src-views-viz-view--column",squat:"src-views-viz-view--squat",drug:"src-views-viz-view--drug",drugEmpty:"src-views-viz-view--drugEmpty",novel:"src-views-viz-view--novel",urgent:"src-views-viz-view--urgent",gramNegative:"src-views-viz-view--gramNegative",detailDrawer:"src-views-viz-view--detailDrawer",headerDiv:"src-views-viz-view--headerDiv",phaseFull:"src-views-viz-view--phaseFull",phaseAbbr:"src-views-viz-view--phaseAbbr",controlContainer:"src-views-viz-view--controlContainer",playButton:"src-views-viz-view--playButton",yearButton:"src-views-viz-view--yearButton",isPaused:"src-views-viz-view--isPaused",yearButtonActive:"src-views-viz-view--yearButtonActive",observation:"src-views-viz-view--observation",observation0:"src-views-viz-view--observation0",observation1:"src-views-viz-view--observation1"}},function(e,t,n){const i=n(3),r={};function s(){console.log(r)}Array.prototype.compare=Array.prototype.compare||function(e){if(this.length!=e.length)return!1;if(0===this.length&&0===e.length)return!0;console.log("in compare"),console.log(this);for(var t=0;t<e.length;t++)if(this[t]!==e[t])return!1;return!0},t.stateModule={logState:s,getState:function(e){return void 0!==r[e]?r[e][0]:void 0},getPreviousState:function(e){return void 0!==r[e]&&void 0!==r[e][1]?r[e][1]:void 0},setState:function(e,t){void 0===r[e]?(r[e]=[t],i.publish(e,t),s()):("string"==typeof t||"number"==typeof t?r[e][0]!==t:!Array.isArray(t)||!Array.isArray(r[e][0])||!t.compare(r[e][0]))&&(r[e].unshift(t),i.publish(e,t),s(),r[e].length>2&&(r[e].length=2))}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GTMPush=function(e){dataLayer&&dataLayer.push({event:"Interactive Click",eventData:e})},t.publishWindowResize=function(e){var t;window.addEventListener("resize",function(){t||(t=setTimeout(function(){e.setState("resize",[document.documentElement.clientWidth,document.documentElement.clientHeight]),t=null},350))},!1)};t.FadeInText=(HTMLElement.prototype.fadeOutContent=function(){this.classList.add("no-opacity")},void(HTMLElement.prototype.fadeInContent=function(e,t){var n=this,i=t||0;return t&&(this.style.transition="opacity "+t+"s ease-in-out"),new Promise(function(t){var r=window.getComputedStyle(n).getPropertyValue("transition-duration")||i,s=1e3*parseFloat(r);n.fadeOutContent(),setTimeout(function(){n.innerHTML=e,n.classList.remove("no-opacity"),t(!0)},s)})})),t.StringHelpers=(String.prototype.cleanString=function(){return this.replace(/[ \/]/g,"-").replace(/['"”’“‘,.!?;()&:]/g,"").toLowerCase()},String.prototype.removeUnderscores=function(){return this.replace(/_/g," ")},String.prototype.undoCamelCase=function(){return this.replace(/([A-Z])/g," $1").toLowerCase()},String.prototype.trunc=String.prototype.trunc||function(e,t){if(this.length<=e)return this;var n=this.substr(0,e-1);return(t?n.substr(0,n.lastIndexOf(" ")):n)+"..."},void(String.prototype.hashCode=function(){var e,t=0;if(0===this.length)return t;for(e=0;e<this.length;e++)t=(t<<5)-t+this.charCodeAt(e),t|=0;return t})),t.DOMHelpers={c:function(e){if(-1!==e.indexOf(".")||-1!==e.indexOf("#")){var t=e.match(/\.([^#.]*)/g)||[],n=e.match(/#([^.]*)/),i=e.match(/^([^.#]+)/),r=document.createElement(i[0]);return t.forEach(function(e){r.classList.add(e.replace(".",""))}),null!==n&&r.setAttribute("id",n[1]),r}return document.createElement(e)},q:function(e){return document.querySelector(e)},qa:function(e){return document.querySelectorAll(e)}}},function(e,t,n){(function(e){!function(n,i){"use strict";var r={};n.PubSub=r;var s=n.define;!function(e){var t={},n=-1;function i(e){var t;for(t in e)if(e.hasOwnProperty(t))return!0;return!1}function r(e,t,n){try{e(t,n)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function s(e,t,n){e(t,n)}function a(e,n,i,a){var o,u=t[n],c=a?s:r;if(t.hasOwnProperty(n))for(o in u)u.hasOwnProperty(o)&&c(u[o],e,i)}function o(e,n,r,s){var o=function(e,t,n){return function(){var i=String(e),r=i.lastIndexOf(".");for(a(e,e,t,n);-1!==r;)i=i.substr(0,r),r=i.lastIndexOf("."),a(e,i,t,n)}}(e="symbol"==typeof e?e.toString():e,n,s),u=function(e){var n=String(e),r=Boolean(t.hasOwnProperty(n)&&i(t[n])),s=n.lastIndexOf(".");for(;!r&&-1!==s;)n=n.substr(0,s),s=n.lastIndexOf("."),r=Boolean(t.hasOwnProperty(n)&&i(t[n]));return r}(e);return!!u&&(!0===r?o():setTimeout(o,0),!0)}e.publish=function(t,n){return o(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return o(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,i){if("function"!=typeof i)return!1;e="symbol"==typeof e?e.toString():e,t.hasOwnProperty(e)||(t[e]={});var r="uid_"+String(++n);return t[e][r]=i,r},e.subscribeOnce=function(t,n){var i=e.subscribe(t,function(){e.unsubscribe(i),n.apply(this,arguments)});return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)t.hasOwnProperty(n)&&0===n.indexOf(e)&&delete t[n]},e.unsubscribe=function(n){var i,r,s,a="string"==typeof n&&(t.hasOwnProperty(n)||function(e){var n;for(n in t)if(t.hasOwnProperty(n)&&0===n.indexOf(e))return!0;return!1}(n)),o=!a&&"string"==typeof n,u="function"==typeof n,c=!1;if(!a){for(i in t)if(t.hasOwnProperty(i)){if(r=t[i],o&&r[n]){delete r[n],c=n;break}if(u)for(s in r)r.hasOwnProperty(s)&&r[s]===n&&(delete r[s],c=!0)}return c}e.clearSubscriptions(n)}}(r),"function"==typeof s&&s.amd?s(function(){return r}):(void 0!==e&&e.exports&&(t=e.exports=r),t.PubSub=r,e.exports=t=r)}("object"==typeof window&&window||this)}).call(this,n(12)(e))},function(e,t,n){var i,r,s;
/* @license
Papa Parse
v4.6.3
https://github.com/mholt/PapaParse
License: MIT
*/Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),r=[],void 0===(s="function"==typeof(i=function(){"use strict";var e,t,n="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n?n:{},i=!n.document&&!!n.postMessage,r=i&&/(\?|&)papaworker(=|&|$)/.test(n.location.search),s=!1,a={},o=0,u={parse:function(t,i){var r=(i=i||{}).dynamicTyping||!1;if(E(r)&&(i.dynamicTypingFunction=r,r={}),i.dynamicTyping=r,i.transform=!!E(i.transform)&&i.transform,i.worker&&u.WORKERS_SUPPORTED){var c=function(){if(!u.WORKERS_SUPPORTED)return!1;if(!s&&null===u.SCRIPT_PATH)throw new Error("Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.");var t=u.SCRIPT_PATH||e;t+=(-1!==t.indexOf("?")?"&":"?")+"papaworker";var i=new n.Worker(t);return i.onmessage=y,i.id=o++,a[i.id]=i}();return c.userStep=i.step,c.userChunk=i.chunk,c.userComplete=i.complete,c.userError=i.error,i.step=E(i.step),i.chunk=E(i.chunk),i.complete=E(i.complete),i.error=E(i.error),delete i.worker,void c.postMessage({input:t,config:i,workerId:c.id})}var d=null;return u.NODE_STREAM_INPUT,"string"==typeof t?d=i.download?new l(i):new f(i):!0===t.readable&&E(t.read)&&E(t.on)?d=new p(i):(n.File&&t instanceof File||t instanceof Object)&&(d=new h(i)),d.stream(t)},unparse:function(e,t){var n=!1,i=!0,r=",",s="\r\n",a='"',o=!1;"object"==typeof t&&("string"!=typeof t.delimiter||u.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(r=t.delimiter),("boolean"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(o=t.skipEmptyLines),"string"==typeof t.newline&&(s=t.newline),"string"==typeof t.quoteChar&&(a=t.quoteChar),"boolean"==typeof t.header&&(i=t.header));var c=new RegExp(v(a),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return l(null,e,o);if("object"==typeof e[0])return l(d(e[0]),e,o)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:d(e.data[0])),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),l(e.fields||[],e.data||[],o);throw"exception: Unable to serialize unrecognized input";function d(e){if("object"!=typeof e)return[];var t=[];for(var n in e)t.push(n);return t}function l(e,t,n){var a="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var o=Array.isArray(e)&&0<e.length,u=!Array.isArray(t[0]);if(o&&i){for(var c=0;c<e.length;c++)0<c&&(a+=r),a+=h(e[c],c);0<t.length&&(a+=s)}for(var d=0;d<t.length;d++){var l=o?e.length:t[d].length,f=!1,p=o?0===Object.keys(t[d]).length:0===t[d].length;if(n&&!o&&(f="greedy"===n?""===t[d].join("").trim():1===t[d].length&&0===t[d][0].length),"greedy"===n&&o){for(var m=[],v=0;v<l;v++){var g=u?e[v]:v;m.push(t[d][g])}f=""===m.join("").trim()}if(!f){for(var y=0;y<l;y++){0<y&&!p&&(a+=r);var b=o&&u?e[y]:y;a+=h(t[d][b],y)}d<t.length-1&&(!n||0<l&&!p)&&(a+=s)}}return a}function h(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);e=e.toString().replace(c,a+a);var i="boolean"==typeof n&&n||Array.isArray(n)&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(-1<e.indexOf(t[n]))return!0;return!1}(e,u.BAD_DELIMITERS)||-1<e.indexOf(r)||" "===e.charAt(0)||" "===e.charAt(e.length-1);return i?a+e+a:e}}};if(u.RECORD_SEP=String.fromCharCode(30),u.UNIT_SEP=String.fromCharCode(31),u.BYTE_ORDER_MARK="\ufeff",u.BAD_DELIMITERS=["\r","\n",'"',u.BYTE_ORDER_MARK],u.WORKERS_SUPPORTED=!i&&!!n.Worker,u.SCRIPT_PATH=null,u.NODE_STREAM_INPUT=1,u.LocalChunkSize=10485760,u.RemoteChunkSize=5242880,u.DefaultDelimiter=",",u.Parser=g,u.ParserHandle=m,u.NetworkStreamer=l,u.FileStreamer=h,u.StringStreamer=f,u.ReadableStreamStreamer=p,n.jQuery){var c=n.jQuery;c.fn.parse=function(e){var t=e.config||{},i=[];return this.each(function(e){if("INPUT"!==c(this).prop("tagName").toUpperCase()||"file"!==c(this).attr("type").toLowerCase()||!n.FileReader||!this.files||0===this.files.length)return!0;for(var r=0;r<this.files.length;r++)i.push({file:this.files[r],inputElem:this,instanceConfig:c.extend({},t)})}),r(),this;function r(){if(0!==i.length){var t,n,r,a=i[0];if(E(e.before)){var o=e.before(a.file,a.inputElem);if("object"==typeof o){if("abort"===o.action)return t=a.file,n=a.inputElem,r=o.reason,void(E(e.error)&&e.error({name:"AbortError"},t,n,r));if("skip"===o.action)return void s();"object"==typeof o.config&&(a.instanceConfig=c.extend(a.instanceConfig,o.config))}else if("skip"===o)return void s()}var d=a.instanceConfig.complete;a.instanceConfig.complete=function(e){E(d)&&d(e,a.file,a.inputElem),s()},u.parse(a.file,a.instanceConfig)}else E(e.complete)&&e.complete()}function s(){i.splice(0,1),r()}}}function d(e){this._handle=null,this._finished=!1,this._completed=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=_(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new m(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&E(this._config.beforeFirstChunk)){var i=this._config.beforeFirstChunk(e);void 0!==i&&(e=i)}this.isFirstChunk=!1;var s=this._partialLine+e;this._partialLine="";var a=this._handle.parse(s,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var o=a.meta.cursor;this._finished||(this._partialLine=s.substring(o-this._baseIndex),this._baseIndex=o),a&&a.data&&(this._rowCount+=a.data.length);var c=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(r)n.postMessage({results:a,workerId:u.WORKER_ID,finished:c});else if(E(this._config.chunk)&&!t){if(this._config.chunk(a,this._handle),this._handle.paused()||this._handle.aborted())return;a=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(a.data),this._completeResults.errors=this._completeResults.errors.concat(a.errors),this._completeResults.meta=a.meta),this._completed||!c||!E(this._config.complete)||a&&a.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),c||a&&a.meta.paused||this._nextChunk(),a}},this._sendError=function(e){E(this._config.error)?this._config.error(e):r&&this._config.error&&n.postMessage({workerId:u.WORKER_ID,error:e,finished:!1})}}function l(e){var t;(e=e||{}).chunkSize||(e.chunkSize=u.RemoteChunkSize),d.call(this,e),this._nextChunk=i?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),i||(t.onload=S(this._chunkLoaded,this),t.onerror=S(this._chunkError,this)),t.open("GET",this._input,!i),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var n in e)t.setRequestHeader(n,e[n])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+r),t.setRequestHeader("If-None-Match","webkit-no-cache")}try{t.send()}catch(e){this._chunkError(e.message)}i&&0===t.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var e;4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(e=t.getResponseHeader("Content-Range"))?-1:parseInt(e.substr(e.lastIndexOf("/")+1))),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(new Error(n))}}function h(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=u.LocalChunkSize),d.call(this,e);var i="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,i?((t=new FileReader).onload=S(this._chunkLoaded,this),t.onerror=S(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var r=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,r)}var s=t.readAsText(e,this._config.encoding);i||this._chunkLoaded({target:{result:s}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function f(e){var t;d.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,n=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(n)}}}function p(e){d.call(this,e=e||{});var t=[],n=!0,i=!1;this.pause=function(){d.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){d.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){i&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):n=!0},this._streamData=S(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=S(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=S(function(){this._streamCleanUp(),i=!0,this._streamData("")},this),this._streamCleanUp=S(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function m(e){var t,n,i,r=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,s=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,a=this,o=0,c=0,d=!1,l=!1,h=[],f={data:[],errors:[],meta:{}};if(E(e.step)){var p=e.step;e.step=function(t){if(f=t,b())y();else{if(y(),0===f.data.length)return;o+=t.data.length,e.preview&&o>e.preview?n.abort():p(f,a)}}}function m(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function y(){if(f&&i&&(S("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+u.DefaultDelimiter+"'"),i=!1),e.skipEmptyLines)for(var t=0;t<f.data.length;t++)m(f.data[t])&&f.data.splice(t--,1);return b()&&function(){if(f){for(var t=0;b()&&t<f.data.length;t++)for(var n=0;n<f.data[t].length;n++){var i=f.data[t][n];e.trimHeaders&&(i=i.trim()),h.push(i)}f.data.splice(0,1)}}(),function(){if(!f||!e.header&&!e.dynamicTyping&&!e.transform)return f;for(var t=0;t<f.data.length;t++){var n,i=e.header?{}:[];for(n=0;n<f.data[t].length;n++){var r=n,s=f.data[t][n];e.header&&(r=n>=h.length?"__parsed_extra":h[n]),e.transform&&(s=e.transform(s,r)),s=w(r,s),"__parsed_extra"===r?(i[r]=i[r]||[],i[r].push(s)):i[r]=s}f.data[t]=i,e.header&&(n>h.length?S("FieldMismatch","TooManyFields","Too many fields: expected "+h.length+" fields but parsed "+n,c+t):n<h.length&&S("FieldMismatch","TooFewFields","Too few fields: expected "+h.length+" fields but parsed "+n,c+t))}return e.header&&f.meta&&(f.meta.fields=h),c+=f.data.length,f}()}function b(){return e.header&&0===h.length}function w(t,n){return i=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[i]&&(e.dynamicTyping[i]=e.dynamicTypingFunction(i)),!0===(e.dynamicTyping[i]||e.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(r.test(n)?parseFloat(n):s.test(n)?new Date(n):""===n?null:n):n;var i}function S(e,t,n,i){f.errors.push({type:e,code:t,message:n,row:i})}this.parse=function(r,s,a){var o=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substr(0,1048576);var n=new RegExp(v(t)+"([^]*?)"+v(t),"gm"),i=(e=e.replace(n,"")).split("\r"),r=e.split("\n"),s=1<r.length&&r[0].length<i[0].length;if(1===i.length||s)return"\n";for(var a=0,o=0;o<i.length;o++)"\n"===i[o][0]&&a++;return a>=i.length/2?"\r\n":"\r"}(r,o)),i=!1,e.delimiter)E(e.delimiter)&&(e.delimiter=e.delimiter(r),f.meta.delimiter=e.delimiter);else{var c=function(t,n,i,r){for(var s,a,o,c=[",","\t","|",";",u.RECORD_SEP,u.UNIT_SEP],d=0;d<c.length;d++){var l=c[d],h=0,f=0,p=0;o=void 0;for(var v=new g({comments:r,delimiter:l,newline:n,preview:10}).parse(t),y=0;y<v.data.length;y++)if(i&&m(v.data[y]))p++;else{var b=v.data[y].length;f+=b,void 0!==o?1<b&&(h+=Math.abs(b-o),o=b):o=0}0<v.data.length&&(f/=v.data.length-p),(void 0===a||a<h)&&1.99<f&&(a=h,s=l)}return{successful:!!(e.delimiter=s),bestDelimiter:s}}(r,e.newline,e.skipEmptyLines,e.comments);c.successful?e.delimiter=c.bestDelimiter:(i=!0,e.delimiter=u.DefaultDelimiter),f.meta.delimiter=e.delimiter}var l=_(e);return e.preview&&e.header&&l.preview++,t=r,n=new g(l),f=n.parse(t,s,a),y(),d?{meta:{paused:!0}}:f||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,n.abort(),t=t.substr(n.getCharIndex())},this.resume=function(){d=!1,a.streamer.parseChunk(t,!0)},this.aborted=function(){return l},this.abort=function(){l=!0,n.abort(),f.meta.aborted=!0,E(e.complete)&&e.complete(f),t=""}}function v(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function g(e){var t,n=(e=e||{}).delimiter,i=e.newline,r=e.comments,s=e.step,a=e.preview,o=e.fastMode,c=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(c=e.escapeChar),("string"!=typeof n||-1<u.BAD_DELIMITERS.indexOf(n))&&(n=","),r===n)throw"Comment character same as delimiter";!0===r?r="#":("string"!=typeof r||-1<u.BAD_DELIMITERS.indexOf(r))&&(r=!1),"\n"!==i&&"\r"!==i&&"\r\n"!==i&&(i="\n");var d=0,l=!1;this.parse=function(e,u,h){if("string"!=typeof e)throw"Input must be a string";var f=e.length,p=n.length,m=i.length,g=r.length,y=E(s),b=[],w=[],_=[],S=d=0;if(!e)return z();if(o||!1!==o&&-1===e.indexOf(t)){for(var C=e.split(i),k=0;k<C.length;k++){if(_=C[k],d+=_.length,k!==C.length-1)d+=i.length;else if(h)return z();if(!r||_.substr(0,g)!==r){if(y){if(b=[],T(_.split(n)),j(),l)return z()}else T(_.split(n));if(a&&a<=k)return b=b.slice(0,a),z(!0)}}return z()}for(var x,P=e.indexOf(n,d),O=e.indexOf(i,d),A=new RegExp(v(c)+v(t),"g");;)if(e[d]!==t)if(r&&0===_.length&&e.substr(d,g)===r){if(-1===O)return z();d=O+m,O=e.indexOf(i,d),P=e.indexOf(n,d)}else if(-1!==P&&(P<O||-1===O))_.push(e.substring(d,P)),d=P+p,P=e.indexOf(n,d);else{if(-1===O)break;if(_.push(e.substring(d,O)),I(O+m),y&&(j(),l))return z();if(a&&b.length>=a)return z(!0)}else for(x=d,d++;;){if(-1===(x=e.indexOf(t,x+1)))return h||w.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:b.length,index:d}),M();if(x===f-1)return M(e.substring(d,x).replace(A,t));if(t!==c||e[x+1]!==c){if(t===c||0===x||e[x-1]!==c){var D=L(-1===O?P:Math.min(P,O));if(e[x+1+D]===n){_.push(e.substring(d,x).replace(A,t)),d=x+1+D+p,P=e.indexOf(n,d),O=e.indexOf(i,d);break}var R=L(O);if(e.substr(x+1+R,m)===i){if(_.push(e.substring(d,x).replace(A,t)),I(x+1+R+m),P=e.indexOf(n,d),y&&(j(),l))return z();if(a&&b.length>=a)return z(!0);break}w.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:b.length,index:d}),x++}}else x++}return M();function T(e){b.push(e),S=d}function L(t){var n=0;if(-1!==t){var i=e.substring(x+1,t);i&&""===i.trim()&&(n=i.length)}return n}function M(t){return h||(void 0===t&&(t=e.substr(d)),_.push(t),d=f,T(_),y&&j()),z()}function I(t){d=t,T(_),_=[],O=e.indexOf(i,d)}function z(e){return{data:b,errors:w,meta:{delimiter:n,linebreak:i,aborted:l,truncated:!!e,cursor:S+(u||0)}}}function j(){s(z()),b=[],w=[]}},this.abort=function(){l=!0},this.getCharIndex=function(){return d}}function y(e){var t=e.data,n=a[t.workerId],i=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var r={abort:function(){i=!0,b(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:w,resume:w};if(E(n.userStep)){for(var s=0;s<t.results.data.length&&(n.userStep({data:[t.results.data[s]],errors:t.results.errors,meta:t.results.meta},r),!i);s++);delete t.results}else E(n.userChunk)&&(n.userChunk(t.results,r,t.file),delete t.results)}t.finished&&!i&&b(t.workerId,t.results)}function b(e,t){var n=a[e];E(n.userComplete)&&n.userComplete(t),n.terminate(),delete a[e]}function w(){throw"Not implemented."}function _(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var n in e)t[n]=_(e[n]);return t}function S(e,t){return function(){e.apply(t,arguments)}}function E(e){return"function"==typeof e}return r?n.onmessage=function(e){var t=e.data;if(void 0===u.WORKER_ID&&t&&(u.WORKER_ID=t.workerId),"string"==typeof t.input)n.postMessage({workerId:u.WORKER_ID,results:u.parse(t.input,t.config),finished:!0});else if(n.File&&t.input instanceof File||t.input instanceof Object){var i=u.parse(t.input,t.config);i&&n.postMessage({workerId:u.WORKER_ID,results:i,finished:!0})}}:u.WORKERS_SUPPORTED&&(t=document.getElementsByTagName("script"),e=t.length?t[t.length-1].src:"",document.body?document.addEventListener("DOMContentLoaded",function(){s=!0},!0):s=!0),(l.prototype=Object.create(d.prototype)).constructor=l,(h.prototype=Object.create(d.prototype)).constructor=h,(f.prototype=Object.create(f.prototype)).constructor=f,(p.prototype=Object.create(d.prototype)).constructor=p,u})?i.apply(t,r):i)||(e.exports=s)},function(e,t,n){e.exports=n.p+"data/abx-data.csv?v=3d4592"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=n(2);var s=function(){function e(t,n){var i=this;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"!=typeof t)throw'First parameter must be a string referencing the CSS-like selector of the element to be created \n                    ("div#divID.divClass").';this.selector=t,this.model=n.model,this.parent=n.parent,this.renderToSelector=n.renderToSelector,this.container=r.DOMHelpers.q(this.renderToSelector),this.children=n.children,this.rerender=n.rerenderOnDataMismatch&&n.model.isMismatched,this.data=n.data,this.el=this.prerender(arguments),this.isReady=new Promise(function(e,t){i.resolve=e,i.reject=t})}return i(e,[{key:"prerender",value:function(){var e=r.DOMHelpers.q(this.selector);return e&&!this.rerender?(this.prerendered=!0,e):e?(e.innerHTML="",e):r.DOMHelpers.c(this.selector)}},{key:"init",value:function(){}}]),e}();t.default=s},function(e,t,n){var i=n(13),r=n(3),s={};function a(e,t){var n=i(t.toString());return{token:"sub"+i(e+t),fn:n}}e.exports={logSubs:function(){console.log(s)},setSubs:function(e){e.forEach(function(e){var t=e[0],n=e[1],i=a(t,n);if(void 0===s[i.fn]&&(s[i.fn]={}),void 0!==s[i.fn][t])throw"Subscription token is already in use.";s[i.fn][t]=r.subscribe(t,n)})},cancelSub:function(e,t){var n=a(e,t);if(void 0===s[n.fn]||void 0===s[n.fn][e])throw"Subscription does not exist.";r.unsubscribe(s[n.fn][e]),delete s[n.fn][e],0===Object.keys(s[n.fn]).length&&delete s[n.fn]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),a=n(14),o=(i=a)&&i.__esModule?i:{default:i};var u=function(){function e(t,n){var i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.el=document.querySelector(t),Object.keys(n).forEach(function(e){i[e]=n[e]})}return s(e,[{key:"init",value:function(e){this.needsRouter&&(this.router=new o.default,this.router.init(e)),this.disableHoverOnTouch()}},{key:"disableHoverOnTouch",value:function(){var e=!1,t=document.body,n=0;function i(){new Date-n<500||e||(t.classList.add("has-hover"),e=!0)}document.addEventListener("touchstart",function(){n=new Date},!0),document.addEventListener("touchstart",function(){e&&(t.classList.remove("has-hover"),e=!1)},!0),document.addEventListener("mousemove",i,!0),i()}},{key:"createComponent",value:function(e,t,n,i){var s=Object.create({children:[],data:null,model:e,parent:null,rerenderOnDataMismatch:!1});if(null!==i&&"object"===(void 0===i?"undefined":r(i)))for(var a in i)i.hasOwnProperty(a)&&(s[a]=i[a]);return new t(n,s)}}]),e}();t.default=u},function(e,t){e.exports='<section id="intro">\n    <div class="js-inner-content">\n    </div>\n</section>\n<section id="section-comparison">\n    <div class="js-inner-content">\n        <h2>Antibiotics in Development Since 2014</h2>\n        <div class="abx-legend">\n            <div class="abx-legend--wrapper">\n                <p class="abx-legend--item abx-legend--item--abx">Antibiotic</p>\n                <p class="abx-legend--item abx-legend--item--urgent">Potential to treat CDC urgent pathogen</p>\n            </div>\n            <div class="abx-legend--wrapper">\n                <p class="abx-legend--item abx-legend--item--novel">Novel antibiotics</p>\n                <p class="abx-legend--item abx-legend--item--gram">Potential to treat Gram-negative bacteria</p>\n            </div>\n        </div>\n        <div id="abx-visualization">\n        </div>\n        <div id="abx-totals">\n            <p>Total approved antibiotics since 2014 / <span id="total-approved" class="total-span"></span></p>\n            <p>Total discontinued antibiotics since 2014 / <span id="total-discontinued" class="total-span"></span></p>\n        </div>\n    </div>\n</section>\n<div id="abx-notes"></div>\n<footer class="download-resources">\n    <div>\n        <p><strong>Download resources:</strong>\n            <a class="pct-download" href="">Methodology</a>\n            <a class="pct-download" href="">Report</a>\n        </p>\n    </div>\n</footer>'},function(e,t){e.exports='<h2 id="antibiotic-innovation">Antibiotic Innovation</h2>\n<p>The Pew Charitable Trusts has tracked the pipeline of antibiotics in clinical development since 2014 and has aggregated the\nupdates into an interactive tool that illustrates trends in the pipeline. This longitudinal data visualization underscores the longstanding concerns of scientists, doctors, public health officials, and other stakeholders regarding the dangerously low number of antibiotics in development to address current and future patient needs, particularly for treating the most urgent bacterial threats, such as Gram-negative pathogens.</p>\n<p>Click the play button to see the evolution of the antibiotic pipeline since 2014, or click on an individual year to see the status of the pipeline at a particular point in time. To see additional information about each drug, hover over any of the [rectangles].</p>\n'},function(e,t){e.exports="<p><strong>Notes:</strong> Clinical candidates included in this data visualization are consistent with Pew’s methodology for tracking antibiotics in clinical development. More information about the methods and the full underlying data can be found in the latest analysis of the pipeline. Pew’s updates are conducted semiannually, except for 2014, when they were published quarterly, and 2018, when a timeline adjustment resulted in just one update for the year.</p>\n"},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"init",value:function(e){var t=this;if(void 0===e||"object"!==(void 0===e?"undefined":i(e)))throw"router.init method requires a config object as parameter 1";if("function"!=typeof e.encode||"function"!=typeof e.decode||!Array.isArray(e.views)||"object"!==i(e.PS))throw"routerOptions object needs encode, decode, views, and PS properties. encode and decode must be functions; views is an array of views from the app; PS needs to be the PubSub setter.";this.stateObj={},this.hashState=e.encode,this.decodeHash=e.decode,this.viewPromises=e.views.map(function(e){return e.isReady}),this.PS=e.PS,Promise.all(this.viewPromises).then(function(){t.decodeHash()}),this.PS.setSubs(e.subscriptions.map(function(e){return[e,function(e,n){t.hashChange.call(t,e,n)}]}))}},{key:"hashChange",value:function(e,t){this.setStateObj(e,t),this.hashState(),this.replaceState()}},{key:"setStateObj",value:function(e,t){this.stateObj[e]=t}},{key:"replaceState",value:function(){window.history.replaceState(this.stateObj,"",this.hashString)}}]),e}();t.default=s},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var i=n(2),r=n(4),s=n.n(r),a=n(1),o=n(5),u=n.n(o),c=n(6),d=n.n(c),l=n(0),h=n.n(l),f=n(7),p=n.n(f);console.log(h.a);const m=30,v=1.5*m,g=2,y=[["Phase 1","P1"],["Phase 2","P2"],["Phase 3","P3"],["Application","NDA"],["Approved","&#10004"]];class b extends d.a{prerender(){this.minUnitDimension=m,this.headerHeight=v,this.unitPadding=g,this.headers=y,this.phaseMembers=[0,1].map(()=>y.map(()=>({active:[],discontinued:[]}))),console.log(this.phaseMembers),this.heightNeeded=(this.model.maxActive+this.model.maxDiscontinued+1)*(this.minUnitDimension+this.unitPadding)+this.headerHeight+this.unitPadding+51+90+61+40;var e=super.prerender();if(this.prerendered&&!this.rerender)return e;function t(e){for(let t=0;t<5;t++){let t=document.createElement("div");t.classList.add(h.a.column);let n=e.name===h.a.activeContainer?this.model.maxActive:this.model.maxDiscontinued;for(let e=0;e<n;e++){let e=document.createElement("div");e.classList.add(h.a.drug,h.a.drugEmpty),t.appendChild(e)}e.appendChild(t)}}var n=document.createElement("div");n.classList.add(h.a.controlContainer);var i=document.createElement("button");i.classList.add(h.a.playButton),i.type="button",n.appendChild(i),this.model.years.forEach((e,t)=>{var i=document.createElement("button");i.classList.add(h.a.yearButton,`${0===t?h.a.yearButtonActive:"nope"}`),i.type="button",i.value=e,i.textContent=e,n.appendChild(i)}),e.appendChild(n);var r=document.createElement("div");r.classList.add(h.a.container),e.appendChild(r);var s=document.createElement("div");s.classList.add(h.a.activeContainer),s.name=h.a.activeContainer,r.appendChild(s);var a=document.createElement("div");a.classList.add(h.a.headerContainer),a.name=h.a.headerContainer,y.forEach(e=>{var t=document.createElement("div");t.classList.add(h.a.headerDiv),t.innerHTML=`<span class="${h.a.phaseFull}">${e[0].toUpperCase()}</span><span class="${h.a.phaseAbbr}">${e[1]}</span>`,a.appendChild(t)}),r.appendChild(a);var o=document.createElement("div");return o.classList.add(h.a.discontinuedContainer),o.name=h.a.discontinuedContainer,r.appendChild(o),t.call(this,s),t.call(this,o),e}populatePlaceholders(e,t){var n=document.querySelector("."+h.a.activeContainer),i=document.querySelector("."+h.a.discontinuedContainer);this.phaseMembers[0]=JSON.parse(JSON.stringify(this.phaseMembers[1])),[n,i].forEach((n,i)=>{this.model.data[e].observations[t].forEach((r,s)=>{function a(e){return this.phaseMembers[1][s][0===i?"active":"discontinued"].indexOf(e)}var o=r.values.filter(n=>0===i?!n[this.model.years[e]][t].isDiscontinued:n[this.model.years[e]][t].isDiscontinued).sort((e,t)=>{var n=a.call(this,e.id),i=a.call(this,t.id);return console.log("a existing index a, b",n,i),i<0&&n>=0?-1:n<0&&i>=0?1:a.call(this,e.id)<a.call(this,t.id)?-1:a.call(this,e.id)>a.call(this,t.id)?1:0}),u=n.querySelectorAll("."+h.a.column)[s];console.log(o),this.phaseMembers[1][s][0===i?"active":"discontinued"].length=0,o.forEach((e,t)=>{!function(e,t){var n;e.id=t.id,e.classList.remove(h.a.drugEmpty),e.classList.add(`${t.gramNegative?h.a.gramNegative:"nope"}`,`${t.novel?h.a.novel:"nope"}`,`${t.urgent?h.a.urgent:"nope"}`),(n=document.createElement("div")).classList.add(h.a.detailDrawer),n.innerHTML=`<strong>${t.name}</strong><br />\n                                    ${t.company}`,e.appendChild(n)}(u.querySelectorAll("."+h.a.drug)[t],e),this.phaseMembers[1][s][0===i?"active":"discontinued"].push(e.id)})})}),console.log(this.phaseMembers)}init(){p.a.setSubs([["resize",this.checkHeight.bind(this)],["year",this.update.bind(this)]]),a.stateModule.setState("year",[this.model.years[0],null,1]),this.nonEmptyDrugs=document.querySelectorAll("."+h.a.drug+":not(."+h.a.drugEmpty+")"),this.checkHeight(),this.initializeYearButtons(),this.initializePlayButton()}initializePlayButton(){document.querySelector("."+h.a.playButton).addEventListener("click",this.playYears.bind(this))}playYears(){var e=a.stateModule.getState("year")[0];function t(){++e<=this.model.years[this.model.years.length-1]&&new Promise(t=>{new Promise(t=>{a.stateModule.setState("year",[e,t,0])}).then(()=>{a.stateModule.setState("year",[e,t,1])})}).then(()=>{t.call(this)})}0===(document.querySelector("."+h.a.yearButtonActive).classList.contains(h.a.observation0)?0:1)?new Promise(t=>{a.stateModule.setState("year",[e,t,1])}).then(()=>{t.call(this)}):t.call(this)}checkHeight(){console.log("needed",this.heightNeeded),console.log("available",window.innerHeight),window.innerHeight<this.heightNeeded?document.body.classList.add(h.a.squat):document.body.classList.remove(h.a.squat),document.querySelector("#section-comparison .js-inner-content").offsetHeight>window.innerHeight-100?document.body.classList.add(h.a.superSquat):document.body.classList.remove(h.a.superSquat),function(){var e=document.documentElement,t=Math.floor((this.heightNeeded-this.unitPadding-this.headerHeight)*(this.maxActive/(this.maxActive+this.maxDiscontinued)));e.style.setProperty("--unit-dimension",this.minUnitDimension+"px"),e.style.setProperty("--header-height",this.headerHeight+"px"),e.style.setProperty("--max-container-height",this.heightNeeded+"px"),e.style.setProperty("--active-max-height",t+"px"),e.style.setProperty("--discontinued-max-height",Math.floor(this.heightNeeded-t-this.headerHeight)+"px")}.call(this)}initializeYearButtons(){document.querySelectorAll("."+h.a.yearButton).forEach(e=>{console.log(e),e.addEventListener("click",function(){var e=a.stateModule.getState("year")[0];if(this.blur(),e!==this.value){let t=this.value>e?[0,1]:[1,0];new Promise(e=>{a.stateModule.setState("year",[this.value,e,t[0]])}).then(()=>{a.stateModule.setState("year",[this.value,null,t[1]])})}else{let e=this.classList.contains(h.a.observation0)?1:0;a.stateModule.setState("year",[this.value,null,e])}})})}update(e,t){document.querySelector("."+h.a.yearButtonActive).classList.remove(h.a.yearButtonActive,h.a.observation,h.a.observation0,h.a.observation1);var n=document.querySelector('button[value="'+t[0]+'"]');n.classList.add(h.a.yearButtonActive),0===t[2]?n.classList.remove(h.a.observation1):n.classList.remove(h.a.observation0),n.classList.add(h.a.observation,h.a["observation"+t[2]]),this.FLIP(parseInt(t[0]),t[1],t[2]),this.updateText()}updateText(){var e=this.phaseMembers[1][this.phaseMembers[1].length-1].active.length,t=this.phaseMembers[1].reduce((e,t)=>e+t.discontinued.length,0),n=document.querySelector("#total-approved"),i=document.querySelector("#total-discontinued");n.innerHTML!=e&&document.querySelector("#total-approved").fadeInContent(e),i.innerHTML!=t&&document.querySelector("#total-discontinued").fadeInContent(t)}FLIP(e,t,n=1){this.recordFirstPositions(),this.clearAttributesAndDetails(),this.populatePlaceholders(this.model.years.indexOf(e),n),this.nonEmptyDrugs=document.querySelectorAll("."+h.a.drug+":not(."+h.a.drugEmpty+")"),console.log(this.firstPositions),this.invertPositions(),this.playAnimation(t)}recordFirstPositions(){this.firstPositions=Array.from(document.querySelectorAll("."+h.a.drug+":not("+h.a.drugEmpty+")")).reduce((e,t)=>(e[t.id]=t.getBoundingClientRect(),e),{})}clearAttributesAndDetails(){this.nonEmptyDrugs.forEach(e=>{var t=e.querySelector("."+h.a.detailDrawer);e.className=`${h.a.drug} ${h.a.drugEmpty}`,e.id="",e.removeChild(t)})}invertPositions(){this.nonEmptyDrugs.forEach(e=>{e.style.transitionDuration="0s";var t=e.getBoundingClientRect(),n=this.firstPositions[e.id]?this.firstPositions[e.id].top-t.top:-1e3,i=this.firstPositions[e.id]?this.firstPositions[e.id].left-t.left:-1e3;e.style.transform=`translate(${i}px, ${n}px)`,this.firstPositions[e.id]||e.classList.add(h.a.entering)})}playAnimation(e){this.nonEmptyDrugs.forEach(e=>{e.style.transitionDuration="0.5s",e.style.transform="translate(0,0)"}),e&&setTimeout(function(){e(!0)},500)}}var w=n(8),_=n.n(w),S=n(9),E=n.n(S),C=n(10),k=n.n(C),x=n(11),P=n.n(x);Object(i.publishWindowResize)(a.stateModule);const O={},A=[],D=2014;function R(){return new Promise((e,t)=>{var n=this.el;s.a.parse(""+u.a,{download:!0,dynamicTyping:!0,header:!0,fastMode:!1,skipEmptyLines:!0,beforeFirstChunk(e){var t=e.hashCode();window.IS_PRERENDERING?n.setAttribute("data-data-hash",t):t.toString()!==n.getAttribute("data-data-hash")&&(n.setAttribute("data-data-mismatch",!0),console.log("data mismatch"),O.isMismatched=!0)},complete:t=>{A.length=0,O.years=[];for(var n=!0,i=0;n;)t.data[0].hasOwnProperty(D+i)?O.years.push(D+i):n=!1,i++;O.unnestedData=t.data.map(e=>(e.id="drug-"+e.id,O.years.forEach(t=>{e[t]=[0,1].map(n=>({column:parseInt(e[t].split("-")[n]),isDiscontinued:-1!==e[t].split("-")[n].toString().indexOf("d")}))}),e)),O.data=O.years.map(e=>({year:e,observations:[0,1].map(t=>[1,2,3,4,5].map(n=>({phase:n,values:O.unnestedData.filter(i=>i[e][t].column===n)})))})),console.log(O);const r=[],s=[];O.data.forEach(e=>{e.observations.forEach((t,n)=>{t.forEach(t=>{r.push(t.values.filter(t=>!0!==t[e.year][n].isDiscontinued).length),s.push(t.values.filter(t=>!0===t[e.year][n].isDiscontinued).length)})})}),O.maxActive=Math.max(...r),O.maxDiscontinued=Math.max(...s),console.log(O),A.push(this.createComponent(O,b,"div#viz-view",{renderToSelector:"#abx-visualization",rerenderOnDataMismatch:!0,parent:this})),e(!0)},error:function(e){t(e)}})})}n(15);const T=new class extends _.a{prerender(){this.el.insertAdjacentHTML("beforeend",E.a),document.querySelector("#intro").insertAdjacentHTML("afterbegin",k.a),document.querySelector("#abx-notes").insertAdjacentHTML("afterbegin",P.a),R.call(this).then(()=>{A.forEach(e=>{console.log(e),e.container.appendChild(e.el)})})}init(){super.init(),R.call(this).then(()=>{A.forEach(e=>{e.init(this)})})}}("#pew-app",{needsRouter:!1});window.IS_PRERENDERING&&T.prerender(),T.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3Zpei12aWV3L3N0eWxlcy5zY3NzP2YyNTQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0YXRlZnVsLWRlYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9VVElMUy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHVic3ViLWpzL3NyYy9wdWJzdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcGFwYXJzZS9wYXBhcGFyc2UubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9kYXRhL2FieC1kYXRhLmNzdiIsIndlYnBhY2s6Ly8vLi9zdWJtb2R1bGVzL1VJLWpzL2VsZW1lbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3B1YnN1Yi1zZXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3VibW9kdWxlcy9QQ1RBcHAtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpYWxzL3NlY3Rpb25zLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnRpYWxzL2ludHJvLm1kIiwid2VicGFjazovLy8uL3NyYy9wYXJ0aWFscy9ub3Rlcy5tZCIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmctaGFzaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zdWJtb2R1bGVzL1JPVVRSL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy92aXotdmlldy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYWJ4LmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImNvbnRhaW5lciIsInN1cGVyU3F1YXQiLCJhY3RpdmVDb250YWluZXIiLCJoZWFkZXJDb250YWluZXIiLCJkaXNjb250aW51ZWRDb250YWluZXIiLCJjb2x1bW4iLCJzcXVhdCIsImRydWciLCJkcnVnRW1wdHkiLCJub3ZlbCIsInVyZ2VudCIsImdyYW1OZWdhdGl2ZSIsImRldGFpbERyYXdlciIsImhlYWRlckRpdiIsInBoYXNlRnVsbCIsInBoYXNlQWJiciIsImNvbnRyb2xDb250YWluZXIiLCJwbGF5QnV0dG9uIiwieWVhckJ1dHRvbiIsImlzUGF1c2VkIiwieWVhckJ1dHRvbkFjdGl2ZSIsIm9ic2VydmF0aW9uIiwib2JzZXJ2YXRpb24wIiwib2JzZXJ2YXRpb24xIiwiUHViU3ViIiwic3RhdGUiLCJfbG9nU3RhdGUiLCJjb25zb2xlIiwibG9nIiwiQXJyYXkiLCJjb21wYXJlIiwidGVzdEFyciIsInRoaXMiLCJsZW5ndGgiLCJzdGF0ZU1vZHVsZSIsImxvZ1N0YXRlIiwiZ2V0U3RhdGUiLCJ1bmRlZmluZWQiLCJnZXRQcmV2aW91c1N0YXRlIiwic2V0U3RhdGUiLCJwdWJsaXNoIiwiaXNBcnJheSIsInVuc2hpZnQiLCJHVE1QdXNoIiwiZXZlbnRMYWJlbCIsImRhdGFMYXllciIsInB1c2giLCJldmVudCIsImV2ZW50RGF0YSIsInB1Ymxpc2hXaW5kb3dSZXNpemUiLCJTIiwicmVzaXplVGltZW91dCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRUaW1lb3V0IiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIkZhZGVJblRleHQiLCJIVE1MRWxlbWVudCIsImZhZGVPdXRDb250ZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiZmFkZUluQ29udGVudCIsImNvbnRlbnQiLCJfdGhpcyIsImR1cmF0aW9uUyIsInN0eWxlIiwidHJhbnNpdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiZHVyYXRpb25TdHIiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImR1cmF0aW9uIiwicGFyc2VGbG9hdCIsImlubmVySFRNTCIsInJlbW92ZSIsIlN0cmluZ0hlbHBlcnMiLCJTdHJpbmciLCJjbGVhblN0cmluZyIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsInJlbW92ZVVuZGVyc2NvcmVzIiwidW5kb0NhbWVsQ2FzZSIsInRydW5jIiwidXNlV29yZEJvdW5kYXJ5Iiwic3ViU3RyaW5nIiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJoYXNoQ29kZSIsImhhc2giLCJjaGFyQ29kZUF0IiwiRE9NSGVscGVycyIsImluZGV4T2YiLCJjbGFzc1N0cmluZ3MiLCJtYXRjaCIsImlkU3RyaW5nIiwiZWxTdHJpbmciLCJlbCIsImNyZWF0ZUVsZW1lbnQiLCJmb3JFYWNoIiwia2xhc3MiLCJzZXRBdHRyaWJ1dGUiLCJxIiwicXVlcnlTZWxlY3RvciIsInFhIiwicXVlcnlTZWxlY3RvckFsbCIsInJvb3QiLCJmYWN0b3J5IiwiZGVmaW5lIiwibWVzc2FnZXMiLCJsYXN0VWlkIiwiaGFzS2V5cyIsIm9iaiIsImNhbGxTdWJzY3JpYmVyV2l0aERlbGF5ZWRFeGNlcHRpb25zIiwic3Vic2NyaWJlciIsIm1lc3NhZ2UiLCJkYXRhIiwiZXgiLCJ0aHJvd0V4Y2VwdGlvbiIsImNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMiLCJkZWxpdmVyTWVzc2FnZSIsIm9yaWdpbmFsTWVzc2FnZSIsIm1hdGNoZWRNZXNzYWdlIiwiaW1tZWRpYXRlRXhjZXB0aW9ucyIsInN1YnNjcmliZXJzIiwiY2FsbFN1YnNjcmliZXIiLCJzeW5jIiwiZGVsaXZlciIsInRvcGljIiwicG9zaXRpb24iLCJjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uIiwidG9TdHJpbmciLCJoYXNTdWJzY3JpYmVycyIsImZvdW5kIiwiQm9vbGVhbiIsIm1lc3NhZ2VIYXNTdWJzY3JpYmVycyIsInB1Ymxpc2hTeW5jIiwic3Vic2NyaWJlIiwiZnVuYyIsInRva2VuIiwic3Vic2NyaWJlT25jZSIsInVuc3Vic2NyaWJlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjbGVhckFsbFN1YnNjcmlwdGlvbnMiLCJjbGVhclN1YnNjcmlwdGlvbnMiLCJpc1RvcGljIiwiZGVzY2VuZGFudFRvcGljRXhpc3RzIiwiaXNUb2tlbiIsImlzRnVuY3Rpb24iLCJyZXN1bHQiLCJhbWQiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJlIiwiZiIsInNlbGYiLCJwb3N0TWVzc2FnZSIsInRlc3QiLCJsb2NhdGlvbiIsInNlYXJjaCIsImEiLCJoIiwidSIsImsiLCJwYXJzZSIsImR5bmFtaWNUeXBpbmciLCJ6IiwiZHluYW1pY1R5cGluZ0Z1bmN0aW9uIiwidHJhbnNmb3JtIiwid29ya2VyIiwiV09SS0VSU19TVVBQT1JURUQiLCJTQ1JJUFRfUEFUSCIsIkVycm9yIiwiV29ya2VyIiwib25tZXNzYWdlIiwiaWQiLCJ1c2VyU3RlcCIsInN0ZXAiLCJ1c2VyQ2h1bmsiLCJjaHVuayIsInVzZXJDb21wbGV0ZSIsImNvbXBsZXRlIiwidXNlckVycm9yIiwiZXJyb3IiLCJpbnB1dCIsImNvbmZpZyIsIndvcmtlcklkIiwiTk9ERV9TVFJFQU1fSU5QVVQiLCJkb3dubG9hZCIsIl8iLCJyZWFkYWJsZSIsInJlYWQiLCJvbiIsImciLCJGaWxlIiwic3RyZWFtIiwidW5wYXJzZSIsInkiLCJkZWxpbWl0ZXIiLCJCQURfREVMSU1JVEVSUyIsImZpbHRlciIsInF1b3RlcyIsInNraXBFbXB0eUxpbmVzIiwibmV3bGluZSIsInF1b3RlQ2hhciIsImhlYWRlciIsIlJlZ0V4cCIsIk0iLCJKU09OIiwiZmllbGRzIiwibWV0YSIsInYiLCJrZXlzIiwiam9pbiIsInRyaW0iLCJjb25zdHJ1Y3RvciIsIkRhdGUiLCJzdHJpbmdpZnkiLCJzbGljZSIsImNoYXJBdCIsIlJFQ09SRF9TRVAiLCJmcm9tQ2hhckNvZGUiLCJVTklUX1NFUCIsIkJZVEVfT1JERVJfTUFSSyIsIkxvY2FsQ2h1bmtTaXplIiwiUmVtb3RlQ2h1bmtTaXplIiwiRGVmYXVsdERlbGltaXRlciIsIlBhcnNlciIsIlBhcnNlckhhbmRsZSIsIk5ldHdvcmtTdHJlYW1lciIsIkZpbGVTdHJlYW1lciIsIlN0cmluZ1N0cmVhbWVyIiwiUmVhZGFibGVTdHJlYW1TdHJlYW1lciIsImpRdWVyeSIsImZuIiwiZWFjaCIsInByb3AiLCJ0b1VwcGVyQ2FzZSIsImF0dHIiLCJGaWxlUmVhZGVyIiwiZmlsZXMiLCJmaWxlIiwiaW5wdXRFbGVtIiwiaW5zdGFuY2VDb25maWciLCJleHRlbmQiLCJiZWZvcmUiLCJhY3Rpb24iLCJyZWFzb24iLCJzcGxpY2UiLCJfaGFuZGxlIiwiX2ZpbmlzaGVkIiwiX2NvbXBsZXRlZCIsIl9pbnB1dCIsIl9iYXNlSW5kZXgiLCJfcGFydGlhbExpbmUiLCJfcm93Q291bnQiLCJfc3RhcnQiLCJfbmV4dENodW5rIiwiaXNGaXJzdENodW5rIiwiX2NvbXBsZXRlUmVzdWx0cyIsImVycm9ycyIsIkUiLCJjaHVua1NpemUiLCJwYXJzZUludCIsInN0cmVhbWVyIiwiX2NvbmZpZyIsInBhcnNlQ2h1bmsiLCJiZWZvcmVGaXJzdENodW5rIiwicGF1c2VkIiwiYWJvcnRlZCIsImN1cnNvciIsInN1YnN0cmluZyIsInByZXZpZXciLCJyZXN1bHRzIiwiV09SS0VSX0lEIiwiZmluaXNoZWQiLCJjb25jYXQiLCJfc2VuZEVycm9yIiwiX3JlYWRDaHVuayIsIl9jaHVua0xvYWRlZCIsIlhNTEh0dHBSZXF1ZXN0Iiwid2l0aENyZWRlbnRpYWxzIiwib25sb2FkIiwidyIsIm9uZXJyb3IiLCJfY2h1bmtFcnJvciIsIm9wZW4iLCJkb3dubG9hZFJlcXVlc3RIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJzdGF0dXMiLCJyZWFkeVN0YXRlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwid2Via2l0U2xpY2UiLCJtb3pTbGljZSIsIkZpbGVSZWFkZXJTeW5jIiwiTWF0aCIsIm1pbiIsInNpemUiLCJyZWFkQXNUZXh0IiwiZW5jb2RpbmciLCJ0YXJnZXQiLCJwYXVzZSIsInJlc3VtZSIsIl9zdHJlYW1EYXRhIiwiX3N0cmVhbUVuZCIsIl9zdHJlYW1FcnJvciIsIl9jaGVja0lzRmluaXNoZWQiLCJzaGlmdCIsIl9zdHJlYW1DbGVhblVwIiwicmVtb3ZlTGlzdGVuZXIiLCJhYm9ydCIsInRyaW1IZWFkZXJzIiwidHlwZSIsImNvZGUiLCJyb3ciLCJzcGxpdCIsImNvbW1lbnRzIiwiYWJzIiwic3VjY2Vzc2Z1bCIsImJlc3REZWxpbWl0ZXIiLCJnZXRDaGFySW5kZXgiLCJPIiwieCIsIlQiLCJJIiwiQSIsIkQiLCJmYXN0TW9kZSIsIkwiLCJlc2NhcGVDaGFyIiwiUCIsIkYiLCJDIiwiUiIsImluZGV4IiwiYiIsImxpbmVicmVhayIsInRydW5jYXRlZCIsInRlcm1pbmF0ZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3JjIiwiYm9keSIsIl9VdGlscyIsIkVsZW1lbnQiLCJzZWxlY3RvciIsIm9wdGlvbnMiLCJfY2xhc3NDYWxsQ2hlY2siLCJtb2RlbCIsInBhcmVudCIsInJlbmRlclRvU2VsZWN0b3IiLCIkZCIsImNoaWxkcmVuIiwicmVyZW5kZXIiLCJyZXJlbmRlck9uRGF0YU1pc21hdGNoIiwiaXNNaXNtYXRjaGVkIiwicHJlcmVuZGVyIiwiaXNSZWFkeSIsInJlamVjdCIsImV4aXN0aW5nIiwicHJlcmVuZGVyZWQiLCJzdWJzY3JpcHRpb25zIiwiY3JlYXRlVG9rZW4iLCJmblJlZiIsImZ1bmN0aW9uSGFzaCIsImxvZ1N1YnMiLCJzZXRTdWJzIiwic3Vic0FycmF5IiwicGFpciIsInRva2VuT2JqIiwiY2FuY2VsU3ViIiwiX1JvdXRlciIsIlBDVEFwcCIsIm9wdGlvbiIsInJvdXRlck9wdGlvbnMiLCJuZWVkc1JvdXRlciIsInJvdXRlciIsIlJvdXRlciIsImluaXQiLCJkaXNhYmxlSG92ZXJPblRvdWNoIiwiaGFzSG92ZXJDbGFzcyIsImxhc3RUb3VjaFRpbWUiLCJlbmFibGVIb3ZlciIsImNvbXBvbmVudCIsIl9vcHRpb25zIiwiX3R5cGVvZiIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwic3RyIiwiZW5jb2RlIiwiZGVjb2RlIiwidmlld3MiLCJQUyIsInN0YXRlT2JqIiwiaGFzaFN0YXRlIiwiZGVjb2RlSGFzaCIsInZpZXdQcm9taXNlcyIsIm1hcCIsImFsbCIsInRoZW4iLCJtc2ciLCJoYXNoQ2hhbmdlIiwic2V0U3RhdGVPYmoiLCJyZXBsYWNlU3RhdGUiLCJoaXN0b3J5IiwiaGFzaFN0cmluZyIsIm1pblVuaXREaW1lbnNpb24iLCJoZWFkZXJIZWlnaHQiLCJ1bml0UGFkZGluZyIsImhlYWRlcnMiLCJWaXpWaWV3IiwicGhhc2VNZW1iZXJzIiwiYWN0aXZlIiwiZGlzY29udGludWVkIiwiaGVpZ2h0TmVlZGVkIiwibWF4QWN0aXZlIiwibWF4RGlzY29udGludWVkIiwidmlldyIsInN1cGVyIiwicmVuZGVyQ29sdW1ucyIsImNvbnQiLCJwbGFjZWhvbGRlck51bWJlciIsImoiLCJwbGFjZWhvbGRlciIsImFwcGVuZENoaWxkIiwieWVhcnMiLCJ5ZWFyIiwidGV4dENvbnRlbnQiLCJwaGFzZSIsInBvcHVsYXRlUGxhY2Vob2xkZXJzIiwieWVhckluZGV4Iiwib2JzZXJ2YXRpb25zIiwiZ2V0UGhhc2VNZW1iZXJzSW5kZXgiLCJmaWx0ZXJlZCIsInZhbHVlcyIsImlzRGlzY29udGludWVkIiwic29ydCIsImV4aXN0aW5nSW5kZXhBIiwiZXhpc3RpbmdJbmRleEIiLCJkcmF3ZXIiLCJjb21wYW55IiwiYWRkSWRzQW5kQ2xhc3NlcyIsImNoZWNrSGVpZ2h0IiwidXBkYXRlIiwibm9uRW1wdHlEcnVncyIsImluaXRpYWxpemVZZWFyQnV0dG9ucyIsImluaXRpYWxpemVQbGF5QnV0dG9uIiwicGxheVllYXJzIiwiY3VycmVudFllYXIiLCJuZXh0UHJvbWlzZSIsIndyYXBwZXJSZXNvbHZlIiwiY29udGFpbnMiLCJpbm5lckhlaWdodCIsIm9mZnNldEhlaWdodCIsImFjdGl2ZU1heCIsImZsb29yIiwic2V0UHJvcGVydHkiLCJidXR0b24iLCJibHVyIiwiYnRuIiwiRkxJUCIsInVwZGF0ZVRleHQiLCJ0b3RhbEFjdGl2ZSIsInRvdGFsRGlzY29udGludWVkIiwicmVkdWNlIiwiYWNjIiwiY3VyIiwiYXBwcm92ZWRTcGFuIiwiZGlzY29udGludWVkU3BhbiIsInJlY29yZEZpcnN0UG9zaXRpb25zIiwiY2xlYXJBdHRyaWJ1dGVzQW5kRGV0YWlscyIsImZpcnN0UG9zaXRpb25zIiwiaW52ZXJ0UG9zaXRpb25zIiwicGxheUFuaW1hdGlvbiIsImZyb20iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJkZXRhaWxzIiwiY2xhc3NOYW1lIiwicmVtb3ZlQ2hpbGQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJsYXN0UG9zaXRpb24iLCJkZWx0YVkiLCJ0b3AiLCJkZWx0YVgiLCJsZWZ0IiwiZW50ZXJpbmciLCJzdGFydFllYXIiLCJnZXRSdW50aW1lRGF0YSIsImFwcENvbnRhaW5lciIsIlBhcGEiLCJkYXRhSGFzaCIsIklTX1BSRVJFTkRFUklORyIsImdldEF0dHJpYnV0ZSIsInJlc3BvbnNlIiwibG9vcFdoaWxlIiwidW5uZXN0ZWREYXRhIiwiYWN0aXZlTGVuZ3RocyIsImRpc2NvbnRpbnVlZExlbmd0aHMiLCJvYnMiLCJtYXgiLCJjcmVhdGVDb21wb25lbnQiLCJBcHAiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJzZWN0aW9ucyIsImludHJvIiwibm90ZXMiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxPQUFBWSxPQUFBLE1BR0EsR0FGQTFCLEVBQUFrQixFQUFBTyxHQUNBWCxPQUFBQyxlQUFBVSxFQUFBLFdBQXlDVCxZQUFBLEVBQUFLLFVBQ3pDLEVBQUFFLEdBQUEsaUJBQUFGLEVBQUEsUUFBQU0sS0FBQU4sRUFBQXJCLEVBQUFVLEVBQUFlLEVBQUFFLEVBQUEsU0FB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Y0FJMUdrVSxFQUFNb0UsVUFBWXhILEtBQUs0TSxPQUFPSCxHQUM5QnJKLEVBQU1xRSxnQkFBa0J6SCxLQUFLNE0sT0FBT0YsR0FDcEM5ZCxRQUFRQyxJQUFJdVUsR0FJWjRDLEVBQU1qVyxLQUNIZCxLQUFLNGQsZ0JBQWdCekosRUFBTytELEVBQVMsZUFBZ0IsQ0FBQzdELGlCQUFrQixxQkFBc0JJLHdCQUF3QixFQUFNTCxPQUFRcFUsUUFJdkl1QyxHQUFRLElBRVpxSCxNQUFPLFNBQVNBLEdBQ1ppTCxFQUFPakwsY0NsSXZCLE1BQ01pVSxFQUFNLElEdUlHLGNBQXFCbEksSUFDaENoQixZQUdJM1UsS0FBS29FLEdBQUcwWixtQkFBbUIsWUFBYUMsS0FDeEN4YyxTQUFTbUQsY0FBYyxVQUFVb1osbUJBQW1CLGFBQWNFLEtBQ2xFemMsU0FBU21ELGNBQWMsY0FBY29aLG1CQUFtQixhQUFjRyxLQUV0RWxCLEVBQWU1Z0IsS0FBSzZELE1BQU11WCxLQUFLLEtBRTNCUixFQUFNelMsUUFBUW1VLElBQ1Y5WSxRQUFRQyxJQUFJNlksR0FDTEEsRUFBS3phLFVBQVVnYixZQUFZUCxFQUFLclUsUUFNbkQ2UixPQUNJeUMsTUFBTXpDLE9BRU44RyxFQUFlNWdCLEtBQUs2RCxNQUFNdVgsS0FBSyxLQUMzQlIsRUFBTXpTLFFBQVFtVSxJQUNYQSxFQUFLeEMsS0FBS2pXLFlDL0pQLFdBQ2dCLENBQ2pDOFYsYUFBYSxJQUVpQzFVLE9BQU8rYixpQkFDckRVLEVBQUlsSixZQUVMa0osRUFBSTVIIiwiZmlsZSI6ImpzL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDE2KTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJjb250YWluZXJcIjpcInNyYy12aWV3cy12aXotdmlldy0tY29udGFpbmVyXCIsXCJzdXBlclNxdWF0XCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLXN1cGVyU3F1YXRcIixcImFjdGl2ZUNvbnRhaW5lclwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1hY3RpdmVDb250YWluZXJcIixcImhlYWRlckNvbnRhaW5lclwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1oZWFkZXJDb250YWluZXJcIixcImRpc2NvbnRpbnVlZENvbnRhaW5lclwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1kaXNjb250aW51ZWRDb250YWluZXJcIixcImNvbHVtblwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1jb2x1bW5cIixcInNxdWF0XCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLXNxdWF0XCIsXCJkcnVnXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWRydWdcIixcImRydWdFbXB0eVwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1kcnVnRW1wdHlcIixcIm5vdmVsXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLW5vdmVsXCIsXCJ1cmdlbnRcIjpcInNyYy12aWV3cy12aXotdmlldy0tdXJnZW50XCIsXCJncmFtTmVnYXRpdmVcIjpcInNyYy12aWV3cy12aXotdmlldy0tZ3JhbU5lZ2F0aXZlXCIsXCJkZXRhaWxEcmF3ZXJcIjpcInNyYy12aWV3cy12aXotdmlldy0tZGV0YWlsRHJhd2VyXCIsXCJoZWFkZXJEaXZcIjpcInNyYy12aWV3cy12aXotdmlldy0taGVhZGVyRGl2XCIsXCJwaGFzZUZ1bGxcIjpcInNyYy12aWV3cy12aXotdmlldy0tcGhhc2VGdWxsXCIsXCJwaGFzZUFiYnJcIjpcInNyYy12aWV3cy12aXotdmlldy0tcGhhc2VBYmJyXCIsXCJjb250cm9sQ29udGFpbmVyXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLWNvbnRyb2xDb250YWluZXJcIixcInBsYXlCdXR0b25cIjpcInNyYy12aWV3cy12aXotdmlldy0tcGxheUJ1dHRvblwiLFwieWVhckJ1dHRvblwiOlwic3JjLXZpZXdzLXZpei12aWV3LS15ZWFyQnV0dG9uXCIsXCJpc1BhdXNlZFwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1pc1BhdXNlZFwiLFwieWVhckJ1dHRvbkFjdGl2ZVwiOlwic3JjLXZpZXdzLXZpei12aWV3LS15ZWFyQnV0dG9uQWN0aXZlXCIsXCJvYnNlcnZhdGlvblwiOlwic3JjLXZpZXdzLXZpei12aWV3LS1vYnNlcnZhdGlvblwiLFwib2JzZXJ2YXRpb24wXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLW9ic2VydmF0aW9uMFwiLFwib2JzZXJ2YXRpb24xXCI6XCJzcmMtdmlld3Mtdml6LXZpZXctLW9ic2VydmF0aW9uMVwifTsiLCJjb25zdCBQdWJTdWIgPSByZXF1aXJlKCdwdWJzdWItanMnKTtcbmNvbnN0IHN0YXRlID0ge307XG5cbi8vYXJyYXkuY29tcGFyZShvdGhlckFycmF5KSAvL0hUIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYyMjkxOTcvaG93LXRvLWtub3ctaWYtdHdvLWFycmF5cy1oYXZlLXRoZS1zYW1lLXZhbHVlc1xuQXJyYXkucHJvdG90eXBlLmNvbXBhcmUgPSBBcnJheS5wcm90b3R5cGUuY29tcGFyZSB8fCBmdW5jdGlvbih0ZXN0QXJyKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoICE9IHRlc3RBcnIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwICYmIHRlc3RBcnIubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICBjb25zb2xlLmxvZyhcImluIGNvbXBhcmVcIik7XG4gICAgY29uc29sZS5sb2codGhpcyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXN0QXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzW2ldICE9PSB0ZXN0QXJyW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfbG9nU3RhdGUoKXtcbiAgICBjb25zb2xlLmxvZyhzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIF9nZXRTdGF0ZShwcm9wZXJ0eSl7XG4gICAgcmV0dXJuICggc3RhdGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQgKSA/IHN0YXRlW3Byb3BlcnR5XVswXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX2dldFByZXZpb3VzU3RhdGUocHJvcGVydHkpe1xuICAgIHJldHVybiAoIHN0YXRlW3Byb3BlcnR5XSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlW3Byb3BlcnR5XVsxXSAhPT0gdW5kZWZpbmVkICkgPyBzdGF0ZVtwcm9wZXJ0eV1bMV0gOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF9zZXRTdGF0ZShrZXksdmFsdWUpIHsgXG5cbiAgICBpZiAoIHN0YXRlW2tleV0gPT09IHVuZGVmaW5lZCkgeyAvLyBpZSBmaXJzdCB0aW1lIHN0YXRlIHByb3BlcnR5IGlzIGJlaW5nIGRlZmluZWRcbiAgICAgICAgc3RhdGVba2V5XSA9IFt2YWx1ZV07XG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKGtleSwgdmFsdWUpO1xuICAgICAgICBfbG9nU3RhdGUoKTtcbiAgICB9IGVsc2UgeyAvLyBub3QgdGhlIGZpcnN0IHRpbWUgdGhlIHByb3BlcnR5IGlzIGJlaW5nIGRlZmluZWRcbiAgICAvL0lmIGl0J3MgYSBzdHJpbmcgb3IgYXJyYXkgYW5kIHZhbHVlcyBhcmUgdGhlIHNhbWUsIHN0YXRlQ2hhbmdlZD1GYWxzZStcbiAgICAgICAgdmFyIHN0YXRlQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHN0YXRlQ2hhbmdlZCA9IChzdGF0ZVtrZXldWzBdICE9PSB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgQXJyYXkuaXNBcnJheShzdGF0ZVtrZXldWzBdKSkge1xuICAgICAgICAgICAgc3RhdGVDaGFuZ2VkID0gIXZhbHVlLmNvbXBhcmUoc3RhdGVba2V5XVswXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZUNoYW5nZWQgPSB0cnVlOyAvL2Fzc3VtZSBpdCdzIGNoYW5nZWQgaWYgd2UgY2FuJ3QgdmVyaWZ5XG4gICAgICAgIH0gICAgICAgICAgICAgIFxuICAgICAgICAvL09ubHkgcHVibGlzaCBpZiB3ZSd2ZSBjaGFuZ2VkIHN0YXRlXG4gICAgICAgIGlmICggc3RhdGVDaGFuZ2VkICkgeyBcbiAgICAgICAgICAgIHN0YXRlW2tleV0udW5zaGlmdCh2YWx1ZSk7XG4gICAgICAgICAgICBQdWJTdWIucHVibGlzaChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIF9sb2dTdGF0ZSgpO1xuICAgICAgICAgICAgaWYgKCBzdGF0ZVtrZXldLmxlbmd0aCA+IDIgKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVba2V5XS5sZW5ndGggPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnRzLnN0YXRlTW9kdWxlID0ge1xuICAgIGxvZ1N0YXRlOiBfbG9nU3RhdGUsXG4gICAgZ2V0U3RhdGU6IF9nZXRTdGF0ZSxcbiAgICBnZXRQcmV2aW91c1N0YXRlOiBfZ2V0UHJldmlvdXNTdGF0ZSxcbiAgICBzZXRTdGF0ZTogX3NldFN0YXRlXG59OyIsIi8qIGdsb2JhbCBkYXRhTGF5ZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiBHVE1QdXNoKGV2ZW50TGFiZWwpIHtcbiAgICBpZiAoZGF0YUxheWVyKSB7XG4gICAgICAgIGRhdGFMYXllci5wdXNoKHsgJ2V2ZW50JzogJ0ludGVyYWN0aXZlIENsaWNrJywgJ2V2ZW50RGF0YSc6IGV2ZW50TGFiZWwgfSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2hXaW5kb3dSZXNpemUoUykgeyAvLyBuZWVkIHRvIHBhc3MgaW4gdGhlIFN0YXRlTW9kdWxlXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplVGhyb3R0bGVyLCBmYWxzZSk7XG5cbiAgICB2YXIgcmVzaXplVGltZW91dDtcblxuICAgIGZ1bmN0aW9uIHJlc2l6ZVRocm90dGxlcigpIHsgLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy9yZXNpemUjc2V0VGltZW91dFxuICAgICAgICAvLyBpZ25vcmUgcmVzaXplIGV2ZW50cyBhcyBsb25nIGFzIGFuIGFjdHVhbFJlc2l6ZUhhbmRsZXIgZXhlY3V0aW9uIGlzIGluIHRoZSBxdWV1ZVxuICAgICAgICBpZiAoIXJlc2l6ZVRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFjdHVhbFJlc2l6ZUhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgICByZXNpemVUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIH0sIDM1MCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY3R1YWxSZXNpemVIYW5kbGVyKCkge1xuICAgICAgICBcbiAgICAgICAgUy5zZXRTdGF0ZSgncmVzaXplJywgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodF0pO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBGYWRlSW5UZXh0ID0gKGZ1bmN0aW9uKCl7XG4gICAgSFRNTEVsZW1lbnQucHJvdG90eXBlLmZhZGVPdXRDb250ZW50ID0gZnVuY3Rpb24oKXtcbiAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnbm8tb3BhY2l0eScpO1xuICAgIH07XG4gICAgSFRNTEVsZW1lbnQucHJvdG90eXBlLmZhZGVJbkNvbnRlbnQgPSBmdW5jdGlvbihjb250ZW50LCBzKXtcbiAgICAgICAgdmFyIGR1cmF0aW9uUyA9IHMgfHwgMDtcbiAgICAgICAgaWYgKCBzICl7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLnRyYW5zaXRpb24gPSAnb3BhY2l0eSAnICsgcyArICdzIGVhc2UtaW4tb3V0JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvblN0ciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMpLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zaXRpb24tZHVyYXRpb24nKSB8fCBkdXJhdGlvblMsXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBwYXJzZUZsb2F0KGR1cmF0aW9uU3RyKSAqIDEwMDA7XG4gICAgICAgICAgICB0aGlzLmZhZGVPdXRDb250ZW50KCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVySFRNTCA9IGNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCduby1vcGFjaXR5Jyk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pKCk7XG5leHBvcnQgY29uc3QgU3RyaW5nSGVscGVycyA9IChmdW5jdGlvbigpe1xuICAgIFN0cmluZy5wcm90b3R5cGUuY2xlYW5TdHJpbmcgPSBmdW5jdGlvbigpIHsgLy8gbG93ZXJjYXNlIGFuZCByZW1vdmUgcHVuY3R1YXRpb24gYW5kIHJlcGxhY2Ugc3BhY2VzIHdpdGggaHlwaGVuczsgZGVsZXRlIHB1bmN0dWF0aW9uXG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL1sgL10vZywnLScpLnJlcGxhY2UoL1snXCLigJ3igJnigJzigJgsLiE/OygpJjpdL2csJycpLnRvTG93ZXJDYXNlKCk7XG4gICAgfTtcblxuICAgIFN0cmluZy5wcm90b3R5cGUucmVtb3ZlVW5kZXJzY29yZXMgPSBmdW5jdGlvbigpIHsgXG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL18vZywnICcpO1xuICAgIH07XG5cbiAgICBTdHJpbmcucHJvdG90eXBlLnVuZG9DYW1lbENhc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvKFtBLVpdKS9nLCAnICQxJykudG9Mb3dlckNhc2UoKTtcbiAgICB9O1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS50cnVuYyA9IFN0cmluZy5wcm90b3R5cGUudHJ1bmMgfHwgLy8gaHQgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzExOTk0MjBcbiAgICAgICAgIGZ1bmN0aW9uKCBuLCB1c2VXb3JkQm91bmRhcnkgKXtcbiAgICAgICAgICAgICBpZiAodGhpcy5sZW5ndGggPD0gbikgeyByZXR1cm4gdGhpczsgfVxuICAgICAgICAgICAgIHZhciBzdWJTdHJpbmcgPSB0aGlzLnN1YnN0cigwLCBuLTEpO1xuICAgICAgICAgICAgIHJldHVybiAodXNlV29yZEJvdW5kYXJ5IFxuICAgICAgICAgICAgICAgID8gc3ViU3RyaW5nLnN1YnN0cigwLCBzdWJTdHJpbmcubGFzdEluZGV4T2YoJyAnKSkgXG4gICAgICAgICAgICAgICAgOiBzdWJTdHJpbmcpICsgXCIuLi5cIjtcbiAgICAgICAgICB9O1xuXG4gICAgU3RyaW5nLnByb3RvdHlwZS5oYXNoQ29kZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhhc2ggPSAwLCBpLCBjaHI7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBoYXNoO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hyICAgPSB0aGlzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XG4gICAgICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzaDtcbiAgICB9O1xufSkoKVxuXG5leHBvcnQgY29uc3QgRE9NSGVscGVycyA9IHtcbiBjOiAgKHMpID0+IHtcbiAgICAgXG4gICAgIGlmICggcy5pbmRleE9mKCcuJykgIT09IC0xIHx8IHMuaW5kZXhPZignIycpICE9PSAtMSApe1xuICAgICAgICAgbGV0IGNsYXNzU3RyaW5ncyA9IHMubWF0Y2goL1xcLihbXiMuXSopL2cpIHx8IFtdO1xuICAgICAgICAgbGV0IGlkU3RyaW5nID0gcy5tYXRjaCgvIyhbXi5dKikvKTtcbiAgICAgICAgIGxldCBlbFN0cmluZyA9IHMubWF0Y2goL14oW14uI10rKS8pO1xuICAgICAgICAgXG4gICAgICAgICBcbiAgICAgICAgIGxldCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxTdHJpbmdbMF0pO1xuICAgICAgICAgY2xhc3NTdHJpbmdzLmZvckVhY2goa2xhc3MgPT4ge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChrbGFzcy5yZXBsYWNlKCcuJywnJykpO1xuICAgICAgICAgfSk7XG4gICAgICAgICBpZiAoIGlkU3RyaW5nICE9PSBudWxsICl7XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWRTdHJpbmdbMV0pO1xuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIGVsO1xuICAgICB9XG4gICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHMpO1xuIH0sXG4gcTogIChzKSA9PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHMpLFxuIHFhOiAocykgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzKVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAsMjAxMSwyMDEyLDIwMTMsMjAxNCBNb3JnYW4gUm9kZXJpY2sgaHR0cDovL3JvZGVyaWNrLmRrXG4gKiBMaWNlbnNlOiBNSVQgLSBodHRwOi8vbXJnbnJkcmNrLm1pdC1saWNlbnNlLm9yZ1xuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tcm9kZXJpY2svUHViU3ViSlNcbiAqL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3Rvcnkpe1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBQdWJTdWIgPSB7fTtcbiAgICByb290LlB1YlN1YiA9IFB1YlN1YjtcblxuICAgIHZhciBkZWZpbmUgPSByb290LmRlZmluZTtcblxuICAgIGZhY3RvcnkoUHViU3ViKTtcblxuICAgIC8vIEFNRCBzdXBwb3J0XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCl7XG4gICAgICAgIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIFB1YlN1YjsgfSk7XG5cbiAgICAgICAgLy8gQ29tbW9uSlMgYW5kIE5vZGUuanMgbW9kdWxlIHN1cHBvcnRcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jyl7XG4gICAgICAgIGlmIChtb2R1bGUgIT09IHVuZGVmaW5lZCAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gUHViU3ViOyAvLyBOb2RlLmpzIHNwZWNpZmljIGBtb2R1bGUuZXhwb3J0c2BcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRzLlB1YlN1YiA9IFB1YlN1YjsgLy8gQ29tbW9uSlMgbW9kdWxlIDEuMS4xIHNwZWNcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gUHViU3ViOyAvLyBDb21tb25KU1xuICAgIH1cblxufSgoIHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdyApIHx8IHRoaXMsIGZ1bmN0aW9uIChQdWJTdWIpe1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBtZXNzYWdlcyA9IHt9LFxuICAgICAgICBsYXN0VWlkID0gLTE7XG5cbiAgICBmdW5jdGlvbiBoYXNLZXlzKG9iail7XG4gICAgICAgIHZhciBrZXk7XG5cbiAgICAgICAgZm9yIChrZXkgaW4gb2JqKXtcbiAgICAgICAgICAgIGlmICggb2JqLmhhc093blByb3BlcnR5KGtleSkgKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgdGhyb3dzIHRoZSBwYXNzZWQgZXhjZXB0aW9uLCBmb3IgdXNlIGFzIGFyZ3VtZW50IGZvciBzZXRUaW1lb3V0XG4gICAgICogQGFsaWFzIHRocm93RXhjZXB0aW9uXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHsgT2JqZWN0IH0gZXggQW4gRXJyb3Igb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhyb3dFeGNlcHRpb24oIGV4ICl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiByZVRocm93RXhjZXB0aW9uKCl7XG4gICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyggc3Vic2NyaWJlciwgbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3Vic2NyaWJlciggbWVzc2FnZSwgZGF0YSApO1xuICAgICAgICB9IGNhdGNoKCBleCApe1xuICAgICAgICAgICAgc2V0VGltZW91dCggdGhyb3dFeGNlcHRpb24oIGV4ICksIDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbFN1YnNjcmliZXJXaXRoSW1tZWRpYXRlRXhjZXB0aW9ucyggc3Vic2NyaWJlciwgbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICBzdWJzY3JpYmVyKCBtZXNzYWdlLCBkYXRhICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVsaXZlck1lc3NhZ2UoIG9yaWdpbmFsTWVzc2FnZSwgbWF0Y2hlZE1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgdmFyIHN1YnNjcmliZXJzID0gbWVzc2FnZXNbbWF0Y2hlZE1lc3NhZ2VdLFxuICAgICAgICAgICAgY2FsbFN1YnNjcmliZXIgPSBpbW1lZGlhdGVFeGNlcHRpb25zID8gY2FsbFN1YnNjcmliZXJXaXRoSW1tZWRpYXRlRXhjZXB0aW9ucyA6IGNhbGxTdWJzY3JpYmVyV2l0aERlbGF5ZWRFeGNlcHRpb25zLFxuICAgICAgICAgICAgcztcblxuICAgICAgICBpZiAoICFtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggbWF0Y2hlZE1lc3NhZ2UgKSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocyBpbiBzdWJzY3JpYmVycyl7XG4gICAgICAgICAgICBpZiAoIHN1YnNjcmliZXJzLmhhc093blByb3BlcnR5KHMpKXtcbiAgICAgICAgICAgICAgICBjYWxsU3Vic2NyaWJlciggc3Vic2NyaWJlcnNbc10sIG9yaWdpbmFsTWVzc2FnZSwgZGF0YSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGVsaXZlcnlGdW5jdGlvbiggbWVzc2FnZSwgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZGVsaXZlck5hbWVzcGFjZWQoKXtcbiAgICAgICAgICAgIHZhciB0b3BpYyA9IFN0cmluZyggbWVzc2FnZSApLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoICcuJyApO1xuXG4gICAgICAgICAgICAvLyBkZWxpdmVyIHRoZSBtZXNzYWdlIGFzIGl0IGlzIG5vd1xuICAgICAgICAgICAgZGVsaXZlck1lc3NhZ2UobWVzc2FnZSwgbWVzc2FnZSwgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyk7XG5cbiAgICAgICAgICAgIC8vIHRyaW0gdGhlIGhpZXJhcmNoeSBhbmQgZGVsaXZlciBtZXNzYWdlIHRvIGVhY2ggbGV2ZWxcbiAgICAgICAgICAgIHdoaWxlKCBwb3NpdGlvbiAhPT0gLTEgKXtcbiAgICAgICAgICAgICAgICB0b3BpYyA9IHRvcGljLnN1YnN0ciggMCwgcG9zaXRpb24gKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCcuJyk7XG4gICAgICAgICAgICAgICAgZGVsaXZlck1lc3NhZ2UoIG1lc3NhZ2UsIHRvcGljLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVzc2FnZUhhc1N1YnNjcmliZXJzKCBtZXNzYWdlICl7XG4gICAgICAgIHZhciB0b3BpYyA9IFN0cmluZyggbWVzc2FnZSApLFxuICAgICAgICAgICAgZm91bmQgPSBCb29sZWFuKG1lc3NhZ2VzLmhhc093blByb3BlcnR5KCB0b3BpYyApICYmIGhhc0tleXMobWVzc2FnZXNbdG9waWNdKSksXG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcblxuICAgICAgICB3aGlsZSAoICFmb3VuZCAmJiBwb3NpdGlvbiAhPT0gLTEgKXtcbiAgICAgICAgICAgIHRvcGljID0gdG9waWMuc3Vic3RyKCAwLCBwb3NpdGlvbiApO1xuICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG4gICAgICAgICAgICBmb3VuZCA9IEJvb2xlYW4obWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIHRvcGljICkgJiYgaGFzS2V5cyhtZXNzYWdlc1t0b3BpY10pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCBzeW5jLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIG1lc3NhZ2UgPSAodHlwZW9mIG1lc3NhZ2UgPT09ICdzeW1ib2wnKSA/IG1lc3NhZ2UudG9TdHJpbmcoKSA6IG1lc3NhZ2U7XG5cbiAgICAgICAgdmFyIGRlbGl2ZXIgPSBjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICksXG4gICAgICAgICAgICBoYXNTdWJzY3JpYmVycyA9IG1lc3NhZ2VIYXNTdWJzY3JpYmVycyggbWVzc2FnZSApO1xuXG4gICAgICAgIGlmICggIWhhc1N1YnNjcmliZXJzICl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHN5bmMgPT09IHRydWUgKXtcbiAgICAgICAgICAgIGRlbGl2ZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIGRlbGl2ZXIsIDAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoZXMgdGhlIG1lc3NhZ2UsIHBhc3NpbmcgdGhlIGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBwdWJsaXNoXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBwdWJsaXNoXG4gICAgICogQHBhcmFtIHt9IGRhdGEgVGhlIGRhdGEgdG8gcGFzcyB0byBzdWJzY3JpYmVyc1xuICAgICAqIEByZXR1cm4geyBCb29sZWFuIH1cbiAgICAgKi9cbiAgICBQdWJTdWIucHVibGlzaCA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHJldHVybiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCBmYWxzZSwgUHViU3ViLmltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIHRoZSB0aGUgbWVzc2FnZSBzeW5jaHJvbm91c2x5LCBwYXNzaW5nIHRoZSBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAYWxpYXMgcHVibGlzaFN5bmNcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHB1Ymxpc2hcbiAgICAgKiBAcGFyYW0ge30gZGF0YSBUaGUgZGF0YSB0byBwYXNzIHRvIHN1YnNjcmliZXJzXG4gICAgICogQHJldHVybiB7IEJvb2xlYW4gfVxuICAgICAqL1xuICAgIFB1YlN1Yi5wdWJsaXNoU3luYyA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHJldHVybiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCB0cnVlLCBQdWJTdWIuaW1tZWRpYXRlRXhjZXB0aW9ucyApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVzIHRoZSBwYXNzZWQgZnVuY3Rpb24gdG8gdGhlIHBhc3NlZCBtZXNzYWdlLiBFdmVyeSByZXR1cm5lZCB0b2tlbiBpcyB1bmlxdWUgYW5kIHNob3VsZCBiZSBzdG9yZWQgaWYgeW91IG5lZWQgdG8gdW5zdWJzY3JpYmVcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAYWxpYXMgc3Vic2NyaWJlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzdWJzY3JpYmUgdG9cbiAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhIG5ldyBtZXNzYWdlIGlzIHB1Ymxpc2hlZFxuICAgICAqIEByZXR1cm4geyBTdHJpbmcgfVxuICAgICAqL1xuICAgIFB1YlN1Yi5zdWJzY3JpYmUgPSBmdW5jdGlvbiggbWVzc2FnZSwgZnVuYyApe1xuICAgICAgICBpZiAoIHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lc3NhZ2UgPSAodHlwZW9mIG1lc3NhZ2UgPT09ICdzeW1ib2wnKSA/IG1lc3NhZ2UudG9TdHJpbmcoKSA6IG1lc3NhZ2U7XG5cbiAgICAgICAgLy8gbWVzc2FnZSBpcyBub3QgcmVnaXN0ZXJlZCB5ZXRcbiAgICAgICAgaWYgKCAhbWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIG1lc3NhZ2UgKSApe1xuICAgICAgICAgICAgbWVzc2FnZXNbbWVzc2FnZV0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZvcmNpbmcgdG9rZW4gYXMgU3RyaW5nLCB0byBhbGxvdyBmb3IgZnV0dXJlIGV4cGFuc2lvbnMgd2l0aG91dCBicmVha2luZyB1c2FnZVxuICAgICAgICAvLyBhbmQgYWxsb3cgZm9yIGVhc3kgdXNlIGFzIGtleSBuYW1lcyBmb3IgdGhlICdtZXNzYWdlcycgb2JqZWN0XG4gICAgICAgIHZhciB0b2tlbiA9ICd1aWRfJyArIFN0cmluZygrK2xhc3RVaWQpO1xuICAgICAgICBtZXNzYWdlc1ttZXNzYWdlXVt0b2tlbl0gPSBmdW5jO1xuICAgICAgICBcbiAgICAgICAgLy8gcmV0dXJuIHRva2VuIGZvciB1bnN1YnNjcmliaW5nXG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlcyB0aGUgcGFzc2VkIGZ1bmN0aW9uIHRvIHRoZSBwYXNzZWQgbWVzc2FnZSBvbmNlXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQGFsaWFzIHN1YnNjcmliZU9uY2VcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHN1YnNjcmliZSB0b1xuICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgbmV3IG1lc3NhZ2UgaXMgcHVibGlzaGVkXG4gICAgICogQHJldHVybiB7IFB1YlN1YiB9XG4gICAgICovXG4gICAgUHViU3ViLnN1YnNjcmliZU9uY2UgPSBmdW5jdGlvbiggbWVzc2FnZSwgZnVuYyApe1xuICAgICAgICB2YXIgdG9rZW4gPSBQdWJTdWIuc3Vic2NyaWJlKCBtZXNzYWdlLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy8gYmVmb3JlIGZ1bmMgYXBwbHksIHVuc3Vic2NyaWJlIG1lc3NhZ2VcbiAgICAgICAgICAgIFB1YlN1Yi51bnN1YnNjcmliZSggdG9rZW4gKTtcbiAgICAgICAgICAgIGZ1bmMuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFB1YlN1YjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBzdWJzY3JpcHRpb25zXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBjbGVhckFsbFN1YnNjcmlwdGlvbnNcbiAgICAgKi9cbiAgICBQdWJTdWIuY2xlYXJBbGxTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gY2xlYXJBbGxTdWJzY3JpcHRpb25zKCl7XG4gICAgICAgIG1lc3NhZ2VzID0ge307XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFyIHN1YnNjcmlwdGlvbnMgYnkgdGhlIHRvcGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBjbGVhckFsbFN1YnNjcmlwdGlvbnNcbiAgICAgKi9cbiAgICBQdWJTdWIuY2xlYXJTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gY2xlYXJTdWJzY3JpcHRpb25zKHRvcGljKXtcbiAgICAgICAgdmFyIG07XG4gICAgICAgIGZvciAobSBpbiBtZXNzYWdlcyl7XG4gICAgICAgICAgICBpZiAobWVzc2FnZXMuaGFzT3duUHJvcGVydHkobSkgJiYgbS5pbmRleE9mKHRvcGljKSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VzW21dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgc3Vic2NyaXB0aW9uc1xuICAgICAqXG4gICAgICogLSBXaGVuIHBhc3NlZCBhIHRva2VuLCByZW1vdmVzIGEgc3BlY2lmaWMgc3Vic2NyaXB0aW9uLlxuICAgICAqXG5cdCAqIC0gV2hlbiBwYXNzZWQgYSBmdW5jdGlvbiwgcmVtb3ZlcyBhbGwgc3Vic2NyaXB0aW9ucyBmb3IgdGhhdCBmdW5jdGlvblxuICAgICAqXG5cdCAqIC0gV2hlbiBwYXNzZWQgYSB0b3BpYywgcmVtb3ZlcyBhbGwgc3Vic2NyaXB0aW9ucyBmb3IgdGhhdCB0b3BpYyAoaGllcmFyY2h5KVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgc3Vic2NyaWJlT25jZVxuICAgICAqIEBwYXJhbSB7IFN0cmluZyB8IEZ1bmN0aW9uIH0gdmFsdWUgQSB0b2tlbiwgZnVuY3Rpb24gb3IgdG9waWMgdG8gdW5zdWJzY3JpYmUgZnJvbVxuICAgICAqIEBleGFtcGxlIC8vIFVuc3Vic2NyaWJpbmcgd2l0aCBhIHRva2VuXG4gICAgICogdmFyIHRva2VuID0gUHViU3ViLnN1YnNjcmliZSgnbXl0b3BpYycsIG15RnVuYyk7XG4gICAgICogUHViU3ViLnVuc3Vic2NyaWJlKHRva2VuKTtcbiAgICAgKiBAZXhhbXBsZSAvLyBVbnN1YnNjcmliaW5nIHdpdGggYSBmdW5jdGlvblxuICAgICAqIFB1YlN1Yi51bnN1YnNjcmliZShteUZ1bmMpO1xuICAgICAqIEBleGFtcGxlIC8vIFVuc3Vic2NyaWJpbmcgZnJvbSBhIHRvcGljXG4gICAgICogUHViU3ViLnVuc3Vic2NyaWJlKCdteXRvcGljJyk7XG4gICAgICovXG4gICAgUHViU3ViLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICB2YXIgZGVzY2VuZGFudFRvcGljRXhpc3RzID0gZnVuY3Rpb24odG9waWMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbTtcbiAgICAgICAgICAgICAgICBmb3IgKCBtIGluIG1lc3NhZ2VzICl7XG4gICAgICAgICAgICAgICAgICAgIGlmICggbWVzc2FnZXMuaGFzT3duUHJvcGVydHkobSkgJiYgbS5pbmRleE9mKHRvcGljKSA9PT0gMCApe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBkZXNjZW5kYW50IG9mIHRoZSB0b3BpYyBleGlzdHM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1RvcGljICAgID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAoIG1lc3NhZ2VzLmhhc093blByb3BlcnR5KHZhbHVlKSB8fCBkZXNjZW5kYW50VG9waWNFeGlzdHModmFsdWUpICksXG4gICAgICAgICAgICBpc1Rva2VuICAgID0gIWlzVG9waWMgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgICAgIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZSxcbiAgICAgICAgICAgIG0sIG1lc3NhZ2UsIHQ7XG5cbiAgICAgICAgaWYgKGlzVG9waWMpe1xuICAgICAgICAgICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKCBtIGluIG1lc3NhZ2VzICl7XG4gICAgICAgICAgICBpZiAoIG1lc3NhZ2VzLmhhc093blByb3BlcnR5KCBtICkgKXtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZXNbbV07XG5cbiAgICAgICAgICAgICAgICBpZiAoIGlzVG9rZW4gJiYgbWVzc2FnZVt2YWx1ZV0gKXtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VbdmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdG9rZW5zIGFyZSB1bmlxdWUsIHNvIHdlIGNhbiBqdXN0IHN0b3AgaGVyZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKCB0IGluIG1lc3NhZ2UgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmhhc093blByb3BlcnR5KHQpICYmIG1lc3NhZ2VbdF0gPT09IHZhbHVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZVt0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufSkpO1xuIiwiLyogQGxpY2Vuc2VcblBhcGEgUGFyc2VcbnY0LjYuM1xuaHR0cHM6Ly9naXRodWIuY29tL21ob2x0L1BhcGFQYXJzZVxuTGljZW5zZTogTUlUXG4qL1xuQXJyYXkuaXNBcnJheXx8KEFycmF5LmlzQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSksZnVuY3Rpb24oZSx0KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPXQoKTplLlBhcGE9dCgpfSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHMsZSxmPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09Zj9mOnt9LG49IWYuZG9jdW1lbnQmJiEhZi5wb3N0TWVzc2FnZSxvPW4mJi8oXFw/fCYpcGFwYXdvcmtlcig9fCZ8JCkvLnRlc3QoZi5sb2NhdGlvbi5zZWFyY2gpLGE9ITEsaD17fSx1PTAsaz17cGFyc2U6ZnVuY3Rpb24oZSx0KXt2YXIgcj0odD10fHx7fSkuZHluYW1pY1R5cGluZ3x8ITE7eihyKSYmKHQuZHluYW1pY1R5cGluZ0Z1bmN0aW9uPXIscj17fSk7aWYodC5keW5hbWljVHlwaW5nPXIsdC50cmFuc2Zvcm09ISF6KHQudHJhbnNmb3JtKSYmdC50cmFuc2Zvcm0sdC53b3JrZXImJmsuV09SS0VSU19TVVBQT1JURUQpe3ZhciBpPWZ1bmN0aW9uKCl7aWYoIWsuV09SS0VSU19TVVBQT1JURUQpcmV0dXJuITE7aWYoIWEmJm51bGw9PT1rLlNDUklQVF9QQVRIKXRocm93IG5ldyBFcnJvcihcIlNjcmlwdCBwYXRoIGNhbm5vdCBiZSBkZXRlcm1pbmVkIGF1dG9tYXRpY2FsbHkgd2hlbiBQYXBhIFBhcnNlIGlzIGxvYWRlZCBhc3luY2hyb25vdXNseS4gWW91IG5lZWQgdG8gc2V0IFBhcGEuU0NSSVBUX1BBVEggbWFudWFsbHkuXCIpO3ZhciBlPWsuU0NSSVBUX1BBVEh8fHM7ZSs9KC0xIT09ZS5pbmRleE9mKFwiP1wiKT9cIiZcIjpcIj9cIikrXCJwYXBhd29ya2VyXCI7dmFyIHQ9bmV3IGYuV29ya2VyKGUpO3JldHVybiB0Lm9ubWVzc2FnZT1tLHQuaWQ9dSsrLGhbdC5pZF09dH0oKTtyZXR1cm4gaS51c2VyU3RlcD10LnN0ZXAsaS51c2VyQ2h1bms9dC5jaHVuayxpLnVzZXJDb21wbGV0ZT10LmNvbXBsZXRlLGkudXNlckVycm9yPXQuZXJyb3IsdC5zdGVwPXoodC5zdGVwKSx0LmNodW5rPXoodC5jaHVuayksdC5jb21wbGV0ZT16KHQuY29tcGxldGUpLHQuZXJyb3I9eih0LmVycm9yKSxkZWxldGUgdC53b3JrZXIsdm9pZCBpLnBvc3RNZXNzYWdlKHtpbnB1dDplLGNvbmZpZzp0LHdvcmtlcklkOmkuaWR9KX12YXIgbj1udWxsO2suTk9ERV9TVFJFQU1fSU5QVVQsXCJzdHJpbmdcIj09dHlwZW9mIGU/bj10LmRvd25sb2FkP25ldyBjKHQpOm5ldyBfKHQpOiEwPT09ZS5yZWFkYWJsZSYmeihlLnJlYWQpJiZ6KGUub24pP249bmV3IGcodCk6KGYuRmlsZSYmZSBpbnN0YW5jZW9mIEZpbGV8fGUgaW5zdGFuY2VvZiBPYmplY3QpJiYobj1uZXcgcCh0KSk7cmV0dXJuIG4uc3RyZWFtKGUpfSx1bnBhcnNlOmZ1bmN0aW9uKGUsdCl7dmFyIGk9ITEsZz0hMCxtPVwiLFwiLHk9XCJcXHJcXG5cIixuPSdcIicscj0hMTshZnVuY3Rpb24oKXtpZihcIm9iamVjdFwiIT10eXBlb2YgdClyZXR1cm47XCJzdHJpbmdcIiE9dHlwZW9mIHQuZGVsaW1pdGVyfHxrLkJBRF9ERUxJTUlURVJTLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4tMSE9PXQuZGVsaW1pdGVyLmluZGV4T2YoZSl9KS5sZW5ndGh8fChtPXQuZGVsaW1pdGVyKTsoXCJib29sZWFuXCI9PXR5cGVvZiB0LnF1b3Rlc3x8QXJyYXkuaXNBcnJheSh0LnF1b3RlcykpJiYoaT10LnF1b3Rlcyk7XCJib29sZWFuXCIhPXR5cGVvZiB0LnNraXBFbXB0eUxpbmVzJiZcInN0cmluZ1wiIT10eXBlb2YgdC5za2lwRW1wdHlMaW5lc3x8KHI9dC5za2lwRW1wdHlMaW5lcyk7XCJzdHJpbmdcIj09dHlwZW9mIHQubmV3bGluZSYmKHk9dC5uZXdsaW5lKTtcInN0cmluZ1wiPT10eXBlb2YgdC5xdW90ZUNoYXImJihuPXQucXVvdGVDaGFyKTtcImJvb2xlYW5cIj09dHlwZW9mIHQuaGVhZGVyJiYoZz10LmhlYWRlcil9KCk7dmFyIHM9bmV3IFJlZ0V4cChNKG4pLFwiZ1wiKTtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9SlNPTi5wYXJzZShlKSk7aWYoQXJyYXkuaXNBcnJheShlKSl7aWYoIWUubGVuZ3RofHxBcnJheS5pc0FycmF5KGVbMF0pKXJldHVybiBvKG51bGwsZSxyKTtpZihcIm9iamVjdFwiPT10eXBlb2YgZVswXSlyZXR1cm4gbyhhKGVbMF0pLGUscil9ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhJiYoZS5kYXRhPUpTT04ucGFyc2UoZS5kYXRhKSksQXJyYXkuaXNBcnJheShlLmRhdGEpJiYoZS5maWVsZHN8fChlLmZpZWxkcz1lLm1ldGEmJmUubWV0YS5maWVsZHMpLGUuZmllbGRzfHwoZS5maWVsZHM9QXJyYXkuaXNBcnJheShlLmRhdGFbMF0pP2UuZmllbGRzOmEoZS5kYXRhWzBdKSksQXJyYXkuaXNBcnJheShlLmRhdGFbMF0pfHxcIm9iamVjdFwiPT10eXBlb2YgZS5kYXRhWzBdfHwoZS5kYXRhPVtlLmRhdGFdKSksbyhlLmZpZWxkc3x8W10sZS5kYXRhfHxbXSxyKTt0aHJvd1wiZXhjZXB0aW9uOiBVbmFibGUgdG8gc2VyaWFsaXplIHVucmVjb2duaXplZCBpbnB1dFwiO2Z1bmN0aW9uIGEoZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGUpcmV0dXJuW107dmFyIHQ9W107Zm9yKHZhciByIGluIGUpdC5wdXNoKHIpO3JldHVybiB0fWZ1bmN0aW9uIG8oZSx0LHIpe3ZhciBpPVwiXCI7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPUpTT04ucGFyc2UoZSkpLFwic3RyaW5nXCI9PXR5cGVvZiB0JiYodD1KU09OLnBhcnNlKHQpKTt2YXIgbj1BcnJheS5pc0FycmF5KGUpJiYwPGUubGVuZ3RoLHM9IUFycmF5LmlzQXJyYXkodFswXSk7aWYobiYmZyl7Zm9yKHZhciBhPTA7YTxlLmxlbmd0aDthKyspMDxhJiYoaSs9bSksaSs9dihlW2FdLGEpOzA8dC5sZW5ndGgmJihpKz15KX1mb3IodmFyIG89MDtvPHQubGVuZ3RoO28rKyl7dmFyIGg9bj9lLmxlbmd0aDp0W29dLmxlbmd0aCx1PSExLGY9bj8wPT09T2JqZWN0LmtleXModFtvXSkubGVuZ3RoOjA9PT10W29dLmxlbmd0aDtpZihyJiYhbiYmKHU9XCJncmVlZHlcIj09PXI/XCJcIj09PXRbb10uam9pbihcIlwiKS50cmltKCk6MT09PXRbb10ubGVuZ3RoJiYwPT09dFtvXVswXS5sZW5ndGgpLFwiZ3JlZWR5XCI9PT1yJiZuKXtmb3IodmFyIGQ9W10sbD0wO2w8aDtsKyspe3ZhciBjPXM/ZVtsXTpsO2QucHVzaCh0W29dW2NdKX11PVwiXCI9PT1kLmpvaW4oXCJcIikudHJpbSgpfWlmKCF1KXtmb3IodmFyIHA9MDtwPGg7cCsrKXswPHAmJiFmJiYoaSs9bSk7dmFyIF89biYmcz9lW3BdOnA7aSs9dih0W29dW19dLHApfW88dC5sZW5ndGgtMSYmKCFyfHwwPGgmJiFmKSYmKGkrPXkpfX1yZXR1cm4gaX1mdW5jdGlvbiB2KGUsdCl7aWYobnVsbD09ZSlyZXR1cm5cIlwiO2lmKGUuY29uc3RydWN0b3I9PT1EYXRlKXJldHVybiBKU09OLnN0cmluZ2lmeShlKS5zbGljZSgxLDI1KTtlPWUudG9TdHJpbmcoKS5yZXBsYWNlKHMsbituKTt2YXIgcj1cImJvb2xlYW5cIj09dHlwZW9mIGkmJml8fEFycmF5LmlzQXJyYXkoaSkmJmlbdF18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspaWYoLTE8ZS5pbmRleE9mKHRbcl0pKXJldHVybiEwO3JldHVybiExfShlLGsuQkFEX0RFTElNSVRFUlMpfHwtMTxlLmluZGV4T2YobSl8fFwiIFwiPT09ZS5jaGFyQXQoMCl8fFwiIFwiPT09ZS5jaGFyQXQoZS5sZW5ndGgtMSk7cmV0dXJuIHI/bitlK246ZX19fTtpZihrLlJFQ09SRF9TRVA9U3RyaW5nLmZyb21DaGFyQ29kZSgzMCksay5VTklUX1NFUD1TdHJpbmcuZnJvbUNoYXJDb2RlKDMxKSxrLkJZVEVfT1JERVJfTUFSSz1cIlxcdWZlZmZcIixrLkJBRF9ERUxJTUlURVJTPVtcIlxcclwiLFwiXFxuXCIsJ1wiJyxrLkJZVEVfT1JERVJfTUFSS10say5XT1JLRVJTX1NVUFBPUlRFRD0hbiYmISFmLldvcmtlcixrLlNDUklQVF9QQVRIPW51bGwsay5OT0RFX1NUUkVBTV9JTlBVVD0xLGsuTG9jYWxDaHVua1NpemU9MTA0ODU3NjAsay5SZW1vdGVDaHVua1NpemU9NTI0Mjg4MCxrLkRlZmF1bHREZWxpbWl0ZXI9XCIsXCIsay5QYXJzZXI9dixrLlBhcnNlckhhbmRsZT1yLGsuTmV0d29ya1N0cmVhbWVyPWMsay5GaWxlU3RyZWFtZXI9cCxrLlN0cmluZ1N0cmVhbWVyPV8say5SZWFkYWJsZVN0cmVhbVN0cmVhbWVyPWcsZi5qUXVlcnkpe3ZhciBkPWYualF1ZXJ5O2QuZm4ucGFyc2U9ZnVuY3Rpb24obyl7dmFyIHI9by5jb25maWd8fHt9LGg9W107cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtpZighKFwiSU5QVVRcIj09PWQodGhpcykucHJvcChcInRhZ05hbWVcIikudG9VcHBlckNhc2UoKSYmXCJmaWxlXCI9PT1kKHRoaXMpLmF0dHIoXCJ0eXBlXCIpLnRvTG93ZXJDYXNlKCkmJmYuRmlsZVJlYWRlcil8fCF0aGlzLmZpbGVzfHwwPT09dGhpcy5maWxlcy5sZW5ndGgpcmV0dXJuITA7Zm9yKHZhciB0PTA7dDx0aGlzLmZpbGVzLmxlbmd0aDt0KyspaC5wdXNoKHtmaWxlOnRoaXMuZmlsZXNbdF0saW5wdXRFbGVtOnRoaXMsaW5zdGFuY2VDb25maWc6ZC5leHRlbmQoe30scil9KX0pLGUoKSx0aGlzO2Z1bmN0aW9uIGUoKXtpZigwIT09aC5sZW5ndGgpe3ZhciBlLHQscixpLG49aFswXTtpZih6KG8uYmVmb3JlKSl7dmFyIHM9by5iZWZvcmUobi5maWxlLG4uaW5wdXRFbGVtKTtpZihcIm9iamVjdFwiPT10eXBlb2Ygcyl7aWYoXCJhYm9ydFwiPT09cy5hY3Rpb24pcmV0dXJuIGU9XCJBYm9ydEVycm9yXCIsdD1uLmZpbGUscj1uLmlucHV0RWxlbSxpPXMucmVhc29uLHZvaWQoeihvLmVycm9yKSYmby5lcnJvcih7bmFtZTplfSx0LHIsaSkpO2lmKFwic2tpcFwiPT09cy5hY3Rpb24pcmV0dXJuIHZvaWQgdSgpO1wib2JqZWN0XCI9PXR5cGVvZiBzLmNvbmZpZyYmKG4uaW5zdGFuY2VDb25maWc9ZC5leHRlbmQobi5pbnN0YW5jZUNvbmZpZyxzLmNvbmZpZykpfWVsc2UgaWYoXCJza2lwXCI9PT1zKXJldHVybiB2b2lkIHUoKX12YXIgYT1uLmluc3RhbmNlQ29uZmlnLmNvbXBsZXRlO24uaW5zdGFuY2VDb25maWcuY29tcGxldGU9ZnVuY3Rpb24oZSl7eihhKSYmYShlLG4uZmlsZSxuLmlucHV0RWxlbSksdSgpfSxrLnBhcnNlKG4uZmlsZSxuLmluc3RhbmNlQ29uZmlnKX1lbHNlIHooby5jb21wbGV0ZSkmJm8uY29tcGxldGUoKX1mdW5jdGlvbiB1KCl7aC5zcGxpY2UoMCwxKSxlKCl9fX1mdW5jdGlvbiBsKGUpe3RoaXMuX2hhbmRsZT1udWxsLHRoaXMuX2ZpbmlzaGVkPSExLHRoaXMuX2NvbXBsZXRlZD0hMSx0aGlzLl9pbnB1dD1udWxsLHRoaXMuX2Jhc2VJbmRleD0wLHRoaXMuX3BhcnRpYWxMaW5lPVwiXCIsdGhpcy5fcm93Q291bnQ9MCx0aGlzLl9zdGFydD0wLHRoaXMuX25leHRDaHVuaz1udWxsLHRoaXMuaXNGaXJzdENodW5rPSEwLHRoaXMuX2NvbXBsZXRlUmVzdWx0cz17ZGF0YTpbXSxlcnJvcnM6W10sbWV0YTp7fX0sZnVuY3Rpb24oZSl7dmFyIHQ9RShlKTt0LmNodW5rU2l6ZT1wYXJzZUludCh0LmNodW5rU2l6ZSksZS5zdGVwfHxlLmNodW5rfHwodC5jaHVua1NpemU9bnVsbCk7dGhpcy5faGFuZGxlPW5ldyByKHQpLCh0aGlzLl9oYW5kbGUuc3RyZWFtZXI9dGhpcykuX2NvbmZpZz10fS5jYWxsKHRoaXMsZSksdGhpcy5wYXJzZUNodW5rPWZ1bmN0aW9uKGUsdCl7aWYodGhpcy5pc0ZpcnN0Q2h1bmsmJnoodGhpcy5fY29uZmlnLmJlZm9yZUZpcnN0Q2h1bmspKXt2YXIgcj10aGlzLl9jb25maWcuYmVmb3JlRmlyc3RDaHVuayhlKTt2b2lkIDAhPT1yJiYoZT1yKX10aGlzLmlzRmlyc3RDaHVuaz0hMTt2YXIgaT10aGlzLl9wYXJ0aWFsTGluZStlO3RoaXMuX3BhcnRpYWxMaW5lPVwiXCI7dmFyIG49dGhpcy5faGFuZGxlLnBhcnNlKGksdGhpcy5fYmFzZUluZGV4LCF0aGlzLl9maW5pc2hlZCk7aWYoIXRoaXMuX2hhbmRsZS5wYXVzZWQoKSYmIXRoaXMuX2hhbmRsZS5hYm9ydGVkKCkpe3ZhciBzPW4ubWV0YS5jdXJzb3I7dGhpcy5fZmluaXNoZWR8fCh0aGlzLl9wYXJ0aWFsTGluZT1pLnN1YnN0cmluZyhzLXRoaXMuX2Jhc2VJbmRleCksdGhpcy5fYmFzZUluZGV4PXMpLG4mJm4uZGF0YSYmKHRoaXMuX3Jvd0NvdW50Kz1uLmRhdGEubGVuZ3RoKTt2YXIgYT10aGlzLl9maW5pc2hlZHx8dGhpcy5fY29uZmlnLnByZXZpZXcmJnRoaXMuX3Jvd0NvdW50Pj10aGlzLl9jb25maWcucHJldmlldztpZihvKWYucG9zdE1lc3NhZ2Uoe3Jlc3VsdHM6bix3b3JrZXJJZDprLldPUktFUl9JRCxmaW5pc2hlZDphfSk7ZWxzZSBpZih6KHRoaXMuX2NvbmZpZy5jaHVuaykmJiF0KXtpZih0aGlzLl9jb25maWcuY2h1bmsobix0aGlzLl9oYW5kbGUpLHRoaXMuX2hhbmRsZS5wYXVzZWQoKXx8dGhpcy5faGFuZGxlLmFib3J0ZWQoKSlyZXR1cm47bj12b2lkIDAsdGhpcy5fY29tcGxldGVSZXN1bHRzPXZvaWQgMH1yZXR1cm4gdGhpcy5fY29uZmlnLnN0ZXB8fHRoaXMuX2NvbmZpZy5jaHVua3x8KHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5kYXRhPXRoaXMuX2NvbXBsZXRlUmVzdWx0cy5kYXRhLmNvbmNhdChuLmRhdGEpLHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5lcnJvcnM9dGhpcy5fY29tcGxldGVSZXN1bHRzLmVycm9ycy5jb25jYXQobi5lcnJvcnMpLHRoaXMuX2NvbXBsZXRlUmVzdWx0cy5tZXRhPW4ubWV0YSksdGhpcy5fY29tcGxldGVkfHwhYXx8IXoodGhpcy5fY29uZmlnLmNvbXBsZXRlKXx8biYmbi5tZXRhLmFib3J0ZWR8fCh0aGlzLl9jb25maWcuY29tcGxldGUodGhpcy5fY29tcGxldGVSZXN1bHRzLHRoaXMuX2lucHV0KSx0aGlzLl9jb21wbGV0ZWQ9ITApLGF8fG4mJm4ubWV0YS5wYXVzZWR8fHRoaXMuX25leHRDaHVuaygpLG59fSx0aGlzLl9zZW5kRXJyb3I9ZnVuY3Rpb24oZSl7eih0aGlzLl9jb25maWcuZXJyb3IpP3RoaXMuX2NvbmZpZy5lcnJvcihlKTpvJiZ0aGlzLl9jb25maWcuZXJyb3ImJmYucG9zdE1lc3NhZ2Uoe3dvcmtlcklkOmsuV09SS0VSX0lELGVycm9yOmUsZmluaXNoZWQ6ITF9KX19ZnVuY3Rpb24gYyhlKXt2YXIgaTsoZT1lfHx7fSkuY2h1bmtTaXplfHwoZS5jaHVua1NpemU9ay5SZW1vdGVDaHVua1NpemUpLGwuY2FsbCh0aGlzLGUpLHRoaXMuX25leHRDaHVuaz1uP2Z1bmN0aW9uKCl7dGhpcy5fcmVhZENodW5rKCksdGhpcy5fY2h1bmtMb2FkZWQoKX06ZnVuY3Rpb24oKXt0aGlzLl9yZWFkQ2h1bmsoKX0sdGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7dGhpcy5faW5wdXQ9ZSx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fcmVhZENodW5rPWZ1bmN0aW9uKCl7aWYodGhpcy5fZmluaXNoZWQpdGhpcy5fY2h1bmtMb2FkZWQoKTtlbHNle2lmKGk9bmV3IFhNTEh0dHBSZXF1ZXN0LHRoaXMuX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMmJihpLndpdGhDcmVkZW50aWFscz10aGlzLl9jb25maWcud2l0aENyZWRlbnRpYWxzKSxufHwoaS5vbmxvYWQ9dyh0aGlzLl9jaHVua0xvYWRlZCx0aGlzKSxpLm9uZXJyb3I9dyh0aGlzLl9jaHVua0Vycm9yLHRoaXMpKSxpLm9wZW4oXCJHRVRcIix0aGlzLl9pbnB1dCwhbiksdGhpcy5fY29uZmlnLmRvd25sb2FkUmVxdWVzdEhlYWRlcnMpe3ZhciBlPXRoaXMuX2NvbmZpZy5kb3dubG9hZFJlcXVlc3RIZWFkZXJzO2Zvcih2YXIgdCBpbiBlKWkuc2V0UmVxdWVzdEhlYWRlcih0LGVbdF0pfWlmKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpe3ZhciByPXRoaXMuX3N0YXJ0K3RoaXMuX2NvbmZpZy5jaHVua1NpemUtMTtpLnNldFJlcXVlc3RIZWFkZXIoXCJSYW5nZVwiLFwiYnl0ZXM9XCIrdGhpcy5fc3RhcnQrXCItXCIrciksaS5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTm9uZS1NYXRjaFwiLFwid2Via2l0LW5vLWNhY2hlXCIpfXRyeXtpLnNlbmQoKX1jYXRjaChlKXt0aGlzLl9jaHVua0Vycm9yKGUubWVzc2FnZSl9biYmMD09PWkuc3RhdHVzP3RoaXMuX2NodW5rRXJyb3IoKTp0aGlzLl9zdGFydCs9dGhpcy5fY29uZmlnLmNodW5rU2l6ZX19LHRoaXMuX2NodW5rTG9hZGVkPWZ1bmN0aW9uKCl7ND09PWkucmVhZHlTdGF0ZSYmKGkuc3RhdHVzPDIwMHx8NDAwPD1pLnN0YXR1cz90aGlzLl9jaHVua0Vycm9yKCk6KHRoaXMuX2ZpbmlzaGVkPSF0aGlzLl9jb25maWcuY2h1bmtTaXplfHx0aGlzLl9zdGFydD5mdW5jdGlvbihlKXt2YXIgdD1lLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1SYW5nZVwiKTtpZihudWxsPT09dClyZXR1cm4tMTtyZXR1cm4gcGFyc2VJbnQodC5zdWJzdHIodC5sYXN0SW5kZXhPZihcIi9cIikrMSkpfShpKSx0aGlzLnBhcnNlQ2h1bmsoaS5yZXNwb25zZVRleHQpKSl9LHRoaXMuX2NodW5rRXJyb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9aS5zdGF0dXNUZXh0fHxlO3RoaXMuX3NlbmRFcnJvcihuZXcgRXJyb3IodCkpfX1mdW5jdGlvbiBwKGUpe3ZhciBpLG47KGU9ZXx8e30pLmNodW5rU2l6ZXx8KGUuY2h1bmtTaXplPWsuTG9jYWxDaHVua1NpemUpLGwuY2FsbCh0aGlzLGUpO3ZhciBzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBGaWxlUmVhZGVyO3RoaXMuc3RyZWFtPWZ1bmN0aW9uKGUpe3RoaXMuX2lucHV0PWUsbj1lLnNsaWNlfHxlLndlYmtpdFNsaWNlfHxlLm1velNsaWNlLHM/KChpPW5ldyBGaWxlUmVhZGVyKS5vbmxvYWQ9dyh0aGlzLl9jaHVua0xvYWRlZCx0aGlzKSxpLm9uZXJyb3I9dyh0aGlzLl9jaHVua0Vycm9yLHRoaXMpKTppPW5ldyBGaWxlUmVhZGVyU3luYyx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fbmV4dENodW5rPWZ1bmN0aW9uKCl7dGhpcy5fZmluaXNoZWR8fHRoaXMuX2NvbmZpZy5wcmV2aWV3JiYhKHRoaXMuX3Jvd0NvdW50PHRoaXMuX2NvbmZpZy5wcmV2aWV3KXx8dGhpcy5fcmVhZENodW5rKCl9LHRoaXMuX3JlYWRDaHVuaz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuX2lucHV0O2lmKHRoaXMuX2NvbmZpZy5jaHVua1NpemUpe3ZhciB0PU1hdGgubWluKHRoaXMuX3N0YXJ0K3RoaXMuX2NvbmZpZy5jaHVua1NpemUsdGhpcy5faW5wdXQuc2l6ZSk7ZT1uLmNhbGwoZSx0aGlzLl9zdGFydCx0KX12YXIgcj1pLnJlYWRBc1RleHQoZSx0aGlzLl9jb25maWcuZW5jb2RpbmcpO3N8fHRoaXMuX2NodW5rTG9hZGVkKHt0YXJnZXQ6e3Jlc3VsdDpyfX0pfSx0aGlzLl9jaHVua0xvYWRlZD1mdW5jdGlvbihlKXt0aGlzLl9zdGFydCs9dGhpcy5fY29uZmlnLmNodW5rU2l6ZSx0aGlzLl9maW5pc2hlZD0hdGhpcy5fY29uZmlnLmNodW5rU2l6ZXx8dGhpcy5fc3RhcnQ+PXRoaXMuX2lucHV0LnNpemUsdGhpcy5wYXJzZUNodW5rKGUudGFyZ2V0LnJlc3VsdCl9LHRoaXMuX2NodW5rRXJyb3I9ZnVuY3Rpb24oKXt0aGlzLl9zZW5kRXJyb3IoaS5lcnJvcil9fWZ1bmN0aW9uIF8oZSl7dmFyIHI7bC5jYWxsKHRoaXMsZT1lfHx7fSksdGhpcy5zdHJlYW09ZnVuY3Rpb24oZSl7cmV0dXJuIHI9ZSx0aGlzLl9uZXh0Q2h1bmsoKX0sdGhpcy5fbmV4dENodW5rPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2ZpbmlzaGVkKXt2YXIgZT10aGlzLl9jb25maWcuY2h1bmtTaXplLHQ9ZT9yLnN1YnN0cigwLGUpOnI7cmV0dXJuIHI9ZT9yLnN1YnN0cihlKTpcIlwiLHRoaXMuX2ZpbmlzaGVkPSFyLHRoaXMucGFyc2VDaHVuayh0KX19fWZ1bmN0aW9uIGcoZSl7bC5jYWxsKHRoaXMsZT1lfHx7fSk7dmFyIHQ9W10scj0hMCxpPSExO3RoaXMucGF1c2U9ZnVuY3Rpb24oKXtsLnByb3RvdHlwZS5wYXVzZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5faW5wdXQucGF1c2UoKX0sdGhpcy5yZXN1bWU9ZnVuY3Rpb24oKXtsLnByb3RvdHlwZS5yZXN1bWUuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2lucHV0LnJlc3VtZSgpfSx0aGlzLnN0cmVhbT1mdW5jdGlvbihlKXt0aGlzLl9pbnB1dD1lLHRoaXMuX2lucHV0Lm9uKFwiZGF0YVwiLHRoaXMuX3N0cmVhbURhdGEpLHRoaXMuX2lucHV0Lm9uKFwiZW5kXCIsdGhpcy5fc3RyZWFtRW5kKSx0aGlzLl9pbnB1dC5vbihcImVycm9yXCIsdGhpcy5fc3RyZWFtRXJyb3IpfSx0aGlzLl9jaGVja0lzRmluaXNoZWQ9ZnVuY3Rpb24oKXtpJiYxPT09dC5sZW5ndGgmJih0aGlzLl9maW5pc2hlZD0hMCl9LHRoaXMuX25leHRDaHVuaz1mdW5jdGlvbigpe3RoaXMuX2NoZWNrSXNGaW5pc2hlZCgpLHQubGVuZ3RoP3RoaXMucGFyc2VDaHVuayh0LnNoaWZ0KCkpOnI9ITB9LHRoaXMuX3N0cmVhbURhdGE9dyhmdW5jdGlvbihlKXt0cnl7dC5wdXNoKFwic3RyaW5nXCI9PXR5cGVvZiBlP2U6ZS50b1N0cmluZyh0aGlzLl9jb25maWcuZW5jb2RpbmcpKSxyJiYocj0hMSx0aGlzLl9jaGVja0lzRmluaXNoZWQoKSx0aGlzLnBhcnNlQ2h1bmsodC5zaGlmdCgpKSl9Y2F0Y2goZSl7dGhpcy5fc3RyZWFtRXJyb3IoZSl9fSx0aGlzKSx0aGlzLl9zdHJlYW1FcnJvcj13KGZ1bmN0aW9uKGUpe3RoaXMuX3N0cmVhbUNsZWFuVXAoKSx0aGlzLl9zZW5kRXJyb3IoZSl9LHRoaXMpLHRoaXMuX3N0cmVhbUVuZD13KGZ1bmN0aW9uKCl7dGhpcy5fc3RyZWFtQ2xlYW5VcCgpLGk9ITAsdGhpcy5fc3RyZWFtRGF0YShcIlwiKX0sdGhpcyksdGhpcy5fc3RyZWFtQ2xlYW5VcD13KGZ1bmN0aW9uKCl7dGhpcy5faW5wdXQucmVtb3ZlTGlzdGVuZXIoXCJkYXRhXCIsdGhpcy5fc3RyZWFtRGF0YSksdGhpcy5faW5wdXQucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIix0aGlzLl9zdHJlYW1FbmQpLHRoaXMuX2lucHV0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIix0aGlzLl9zdHJlYW1FcnJvcil9LHRoaXMpfWZ1bmN0aW9uIHIoZyl7dmFyIGEsbyxoLGk9L15cXHMqLT8oXFxkKlxcLj9cXGQrfFxcZCtcXC4/XFxkKikoZVstK10/XFxkKyk/XFxzKiQvaSxuPS8oXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSl8KFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkOlswLTVdXFxkKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSl8KFxcZHs0fS1bMDFdXFxkLVswLTNdXFxkVFswLTJdXFxkOlswLTVdXFxkKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKSkvLHQ9dGhpcyxyPTAscz0wLHU9ITEsZT0hMSxmPVtdLGQ9e2RhdGE6W10sZXJyb3JzOltdLG1ldGE6e319O2lmKHooZy5zdGVwKSl7dmFyIGw9Zy5zdGVwO2cuc3RlcD1mdW5jdGlvbihlKXtpZihkPWUscCgpKWMoKTtlbHNle2lmKGMoKSwwPT09ZC5kYXRhLmxlbmd0aClyZXR1cm47cis9ZS5kYXRhLmxlbmd0aCxnLnByZXZpZXcmJnI+Zy5wcmV2aWV3P28uYWJvcnQoKTpsKGQsdCl9fX1mdW5jdGlvbiBtKGUpe3JldHVyblwiZ3JlZWR5XCI9PT1nLnNraXBFbXB0eUxpbmVzP1wiXCI9PT1lLmpvaW4oXCJcIikudHJpbSgpOjE9PT1lLmxlbmd0aCYmMD09PWVbMF0ubGVuZ3RofWZ1bmN0aW9uIGMoKXtpZihkJiZoJiYoeShcIkRlbGltaXRlclwiLFwiVW5kZXRlY3RhYmxlRGVsaW1pdGVyXCIsXCJVbmFibGUgdG8gYXV0by1kZXRlY3QgZGVsaW1pdGluZyBjaGFyYWN0ZXI7IGRlZmF1bHRlZCB0byAnXCIray5EZWZhdWx0RGVsaW1pdGVyK1wiJ1wiKSxoPSExKSxnLnNraXBFbXB0eUxpbmVzKWZvcih2YXIgZT0wO2U8ZC5kYXRhLmxlbmd0aDtlKyspbShkLmRhdGFbZV0pJiZkLmRhdGEuc3BsaWNlKGUtLSwxKTtyZXR1cm4gcCgpJiZmdW5jdGlvbigpe2lmKCFkKXJldHVybjtmb3IodmFyIGU9MDtwKCkmJmU8ZC5kYXRhLmxlbmd0aDtlKyspZm9yKHZhciB0PTA7dDxkLmRhdGFbZV0ubGVuZ3RoO3QrKyl7dmFyIHI9ZC5kYXRhW2VdW3RdO2cudHJpbUhlYWRlcnMmJihyPXIudHJpbSgpKSxmLnB1c2gocil9ZC5kYXRhLnNwbGljZSgwLDEpfSgpLGZ1bmN0aW9uKCl7aWYoIWR8fCFnLmhlYWRlciYmIWcuZHluYW1pY1R5cGluZyYmIWcudHJhbnNmb3JtKXJldHVybiBkO2Zvcih2YXIgZT0wO2U8ZC5kYXRhLmxlbmd0aDtlKyspe3ZhciB0LHI9Zy5oZWFkZXI/e306W107Zm9yKHQ9MDt0PGQuZGF0YVtlXS5sZW5ndGg7dCsrKXt2YXIgaT10LG49ZC5kYXRhW2VdW3RdO2cuaGVhZGVyJiYoaT10Pj1mLmxlbmd0aD9cIl9fcGFyc2VkX2V4dHJhXCI6Zlt0XSksZy50cmFuc2Zvcm0mJihuPWcudHJhbnNmb3JtKG4saSkpLG49XyhpLG4pLFwiX19wYXJzZWRfZXh0cmFcIj09PWk/KHJbaV09cltpXXx8W10scltpXS5wdXNoKG4pKTpyW2ldPW59ZC5kYXRhW2VdPXIsZy5oZWFkZXImJih0PmYubGVuZ3RoP3koXCJGaWVsZE1pc21hdGNoXCIsXCJUb29NYW55RmllbGRzXCIsXCJUb28gbWFueSBmaWVsZHM6IGV4cGVjdGVkIFwiK2YubGVuZ3RoK1wiIGZpZWxkcyBidXQgcGFyc2VkIFwiK3QscytlKTp0PGYubGVuZ3RoJiZ5KFwiRmllbGRNaXNtYXRjaFwiLFwiVG9vRmV3RmllbGRzXCIsXCJUb28gZmV3IGZpZWxkczogZXhwZWN0ZWQgXCIrZi5sZW5ndGgrXCIgZmllbGRzIGJ1dCBwYXJzZWQgXCIrdCxzK2UpKX1nLmhlYWRlciYmZC5tZXRhJiYoZC5tZXRhLmZpZWxkcz1mKTtyZXR1cm4gcys9ZC5kYXRhLmxlbmd0aCxkfSgpfWZ1bmN0aW9uIHAoKXtyZXR1cm4gZy5oZWFkZXImJjA9PT1mLmxlbmd0aH1mdW5jdGlvbiBfKGUsdCl7cmV0dXJuIHI9ZSxnLmR5bmFtaWNUeXBpbmdGdW5jdGlvbiYmdm9pZCAwPT09Zy5keW5hbWljVHlwaW5nW3JdJiYoZy5keW5hbWljVHlwaW5nW3JdPWcuZHluYW1pY1R5cGluZ0Z1bmN0aW9uKHIpKSwhMD09PShnLmR5bmFtaWNUeXBpbmdbcl18fGcuZHluYW1pY1R5cGluZyk/XCJ0cnVlXCI9PT10fHxcIlRSVUVcIj09PXR8fFwiZmFsc2VcIiE9PXQmJlwiRkFMU0VcIiE9PXQmJihpLnRlc3QodCk/cGFyc2VGbG9hdCh0KTpuLnRlc3QodCk/bmV3IERhdGUodCk6XCJcIj09PXQ/bnVsbDp0KTp0O3ZhciByfWZ1bmN0aW9uIHkoZSx0LHIsaSl7ZC5lcnJvcnMucHVzaCh7dHlwZTplLGNvZGU6dCxtZXNzYWdlOnIscm93Oml9KX10aGlzLnBhcnNlPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaT1nLnF1b3RlQ2hhcnx8J1wiJztpZihnLm5ld2xpbmV8fChnLm5ld2xpbmU9ZnVuY3Rpb24oZSx0KXtlPWUuc3Vic3RyKDAsMTA0ODU3Nik7dmFyIHI9bmV3IFJlZ0V4cChNKHQpK1wiKFteXSo/KVwiK00odCksXCJnbVwiKSxpPShlPWUucmVwbGFjZShyLFwiXCIpKS5zcGxpdChcIlxcclwiKSxuPWUuc3BsaXQoXCJcXG5cIikscz0xPG4ubGVuZ3RoJiZuWzBdLmxlbmd0aDxpWzBdLmxlbmd0aDtpZigxPT09aS5sZW5ndGh8fHMpcmV0dXJuXCJcXG5cIjtmb3IodmFyIGE9MCxvPTA7bzxpLmxlbmd0aDtvKyspXCJcXG5cIj09PWlbb11bMF0mJmErKztyZXR1cm4gYT49aS5sZW5ndGgvMj9cIlxcclxcblwiOlwiXFxyXCJ9KGUsaSkpLGg9ITEsZy5kZWxpbWl0ZXIpeihnLmRlbGltaXRlcikmJihnLmRlbGltaXRlcj1nLmRlbGltaXRlcihlKSxkLm1ldGEuZGVsaW1pdGVyPWcuZGVsaW1pdGVyKTtlbHNle3ZhciBuPWZ1bmN0aW9uKGUsdCxyLGkpe2Zvcih2YXIgbixzLGEsbz1bXCIsXCIsXCJcXHRcIixcInxcIixcIjtcIixrLlJFQ09SRF9TRVAsay5VTklUX1NFUF0saD0wO2g8by5sZW5ndGg7aCsrKXt2YXIgdT1vW2hdLGY9MCxkPTAsbD0wO2E9dm9pZCAwO2Zvcih2YXIgYz1uZXcgdih7Y29tbWVudHM6aSxkZWxpbWl0ZXI6dSxuZXdsaW5lOnQscHJldmlldzoxMH0pLnBhcnNlKGUpLHA9MDtwPGMuZGF0YS5sZW5ndGg7cCsrKWlmKHImJm0oYy5kYXRhW3BdKSlsKys7ZWxzZXt2YXIgXz1jLmRhdGFbcF0ubGVuZ3RoO2QrPV8sdm9pZCAwIT09YT8xPF8mJihmKz1NYXRoLmFicyhfLWEpLGE9Xyk6YT0wfTA8Yy5kYXRhLmxlbmd0aCYmKGQvPWMuZGF0YS5sZW5ndGgtbCksKHZvaWQgMD09PXN8fHM8ZikmJjEuOTk8ZCYmKHM9ZixuPXUpfXJldHVybntzdWNjZXNzZnVsOiEhKGcuZGVsaW1pdGVyPW4pLGJlc3REZWxpbWl0ZXI6bn19KGUsZy5uZXdsaW5lLGcuc2tpcEVtcHR5TGluZXMsZy5jb21tZW50cyk7bi5zdWNjZXNzZnVsP2cuZGVsaW1pdGVyPW4uYmVzdERlbGltaXRlcjooaD0hMCxnLmRlbGltaXRlcj1rLkRlZmF1bHREZWxpbWl0ZXIpLGQubWV0YS5kZWxpbWl0ZXI9Zy5kZWxpbWl0ZXJ9dmFyIHM9RShnKTtyZXR1cm4gZy5wcmV2aWV3JiZnLmhlYWRlciYmcy5wcmV2aWV3KyssYT1lLG89bmV3IHYocyksZD1vLnBhcnNlKGEsdCxyKSxjKCksdT97bWV0YTp7cGF1c2VkOiEwfX06ZHx8e21ldGE6e3BhdXNlZDohMX19fSx0aGlzLnBhdXNlZD1mdW5jdGlvbigpe3JldHVybiB1fSx0aGlzLnBhdXNlPWZ1bmN0aW9uKCl7dT0hMCxvLmFib3J0KCksYT1hLnN1YnN0cihvLmdldENoYXJJbmRleCgpKX0sdGhpcy5yZXN1bWU9ZnVuY3Rpb24oKXt1PSExLHQuc3RyZWFtZXIucGFyc2VDaHVuayhhLCEwKX0sdGhpcy5hYm9ydGVkPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LHRoaXMuYWJvcnQ9ZnVuY3Rpb24oKXtlPSEwLG8uYWJvcnQoKSxkLm1ldGEuYWJvcnRlZD0hMCx6KGcuY29tcGxldGUpJiZnLmNvbXBsZXRlKGQpLGE9XCJcIn19ZnVuY3Rpb24gTShlKXtyZXR1cm4gZS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZyxcIlxcXFwkJlwiKX1mdW5jdGlvbiB2KGUpe3ZhciBTLE89KGU9ZXx8e30pLmRlbGltaXRlcix4PWUubmV3bGluZSxUPWUuY29tbWVudHMsST1lLnN0ZXAsQT1lLnByZXZpZXcsRD1lLmZhc3RNb2RlLEw9Uz12b2lkIDA9PT1lLnF1b3RlQ2hhcj8nXCInOmUucXVvdGVDaGFyO2lmKHZvaWQgMCE9PWUuZXNjYXBlQ2hhciYmKEw9ZS5lc2NhcGVDaGFyKSwoXCJzdHJpbmdcIiE9dHlwZW9mIE98fC0xPGsuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihPKSkmJihPPVwiLFwiKSxUPT09Tyl0aHJvd1wiQ29tbWVudCBjaGFyYWN0ZXIgc2FtZSBhcyBkZWxpbWl0ZXJcIjshMD09PVQ/VD1cIiNcIjooXCJzdHJpbmdcIiE9dHlwZW9mIFR8fC0xPGsuQkFEX0RFTElNSVRFUlMuaW5kZXhPZihUKSkmJihUPSExKSxcIlxcblwiIT09eCYmXCJcXHJcIiE9PXgmJlwiXFxyXFxuXCIhPT14JiYoeD1cIlxcblwiKTt2YXIgUD0wLEY9ITE7dGhpcy5wYXJzZT1mdW5jdGlvbihpLHQscil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGkpdGhyb3dcIklucHV0IG11c3QgYmUgYSBzdHJpbmdcIjt2YXIgbj1pLmxlbmd0aCxlPU8ubGVuZ3RoLHM9eC5sZW5ndGgsYT1ULmxlbmd0aCxvPXooSSksaD1bXSx1PVtdLGY9W10sZD1QPTA7aWYoIWkpcmV0dXJuIEMoKTtpZihEfHwhMSE9PUQmJi0xPT09aS5pbmRleE9mKFMpKXtmb3IodmFyIGw9aS5zcGxpdCh4KSxjPTA7YzxsLmxlbmd0aDtjKyspe2lmKGY9bFtjXSxQKz1mLmxlbmd0aCxjIT09bC5sZW5ndGgtMSlQKz14Lmxlbmd0aDtlbHNlIGlmKHIpcmV0dXJuIEMoKTtpZighVHx8Zi5zdWJzdHIoMCxhKSE9PVQpe2lmKG8pe2lmKGg9W10sayhmLnNwbGl0KE8pKSxSKCksRilyZXR1cm4gQygpfWVsc2UgayhmLnNwbGl0KE8pKTtpZihBJiZBPD1jKXJldHVybiBoPWguc2xpY2UoMCxBKSxDKCEwKX19cmV0dXJuIEMoKX1mb3IodmFyIHAsXz1pLmluZGV4T2YoTyxQKSxnPWkuaW5kZXhPZih4LFApLG09bmV3IFJlZ0V4cChNKEwpK00oUyksXCJnXCIpOzspaWYoaVtQXSE9PVMpaWYoVCYmMD09PWYubGVuZ3RoJiZpLnN1YnN0cihQLGEpPT09VCl7aWYoLTE9PT1nKXJldHVybiBDKCk7UD1nK3MsZz1pLmluZGV4T2YoeCxQKSxfPWkuaW5kZXhPZihPLFApfWVsc2UgaWYoLTEhPT1fJiYoXzxnfHwtMT09PWcpKWYucHVzaChpLnN1YnN0cmluZyhQLF8pKSxQPV8rZSxfPWkuaW5kZXhPZihPLFApO2Vsc2V7aWYoLTE9PT1nKWJyZWFrO2lmKGYucHVzaChpLnN1YnN0cmluZyhQLGcpKSx3KGcrcyksbyYmKFIoKSxGKSlyZXR1cm4gQygpO2lmKEEmJmgubGVuZ3RoPj1BKXJldHVybiBDKCEwKX1lbHNlIGZvcihwPVAsUCsrOzspe2lmKC0xPT09KHA9aS5pbmRleE9mKFMscCsxKSkpcmV0dXJuIHJ8fHUucHVzaCh7dHlwZTpcIlF1b3Rlc1wiLGNvZGU6XCJNaXNzaW5nUXVvdGVzXCIsbWVzc2FnZTpcIlF1b3RlZCBmaWVsZCB1bnRlcm1pbmF0ZWRcIixyb3c6aC5sZW5ndGgsaW5kZXg6UH0pLEUoKTtpZihwPT09bi0xKXJldHVybiBFKGkuc3Vic3RyaW5nKFAscCkucmVwbGFjZShtLFMpKTtpZihTIT09THx8aVtwKzFdIT09TCl7aWYoUz09PUx8fDA9PT1wfHxpW3AtMV0hPT1MKXt2YXIgeT1iKC0xPT09Zz9fOk1hdGgubWluKF8sZykpO2lmKGlbcCsxK3ldPT09Tyl7Zi5wdXNoKGkuc3Vic3RyaW5nKFAscCkucmVwbGFjZShtLFMpKSxQPXArMSt5K2UsXz1pLmluZGV4T2YoTyxQKSxnPWkuaW5kZXhPZih4LFApO2JyZWFrfXZhciB2PWIoZyk7aWYoaS5zdWJzdHIocCsxK3Yscyk9PT14KXtpZihmLnB1c2goaS5zdWJzdHJpbmcoUCxwKS5yZXBsYWNlKG0sUykpLHcocCsxK3YrcyksXz1pLmluZGV4T2YoTyxQKSxvJiYoUigpLEYpKXJldHVybiBDKCk7aWYoQSYmaC5sZW5ndGg+PUEpcmV0dXJuIEMoITApO2JyZWFrfXUucHVzaCh7dHlwZTpcIlF1b3Rlc1wiLGNvZGU6XCJJbnZhbGlkUXVvdGVzXCIsbWVzc2FnZTpcIlRyYWlsaW5nIHF1b3RlIG9uIHF1b3RlZCBmaWVsZCBpcyBtYWxmb3JtZWRcIixyb3c6aC5sZW5ndGgsaW5kZXg6UH0pLHArK319ZWxzZSBwKyt9cmV0dXJuIEUoKTtmdW5jdGlvbiBrKGUpe2gucHVzaChlKSxkPVB9ZnVuY3Rpb24gYihlKXt2YXIgdD0wO2lmKC0xIT09ZSl7dmFyIHI9aS5zdWJzdHJpbmcocCsxLGUpO3ImJlwiXCI9PT1yLnRyaW0oKSYmKHQ9ci5sZW5ndGgpfXJldHVybiB0fWZ1bmN0aW9uIEUoZSl7cmV0dXJuIHJ8fCh2b2lkIDA9PT1lJiYoZT1pLnN1YnN0cihQKSksZi5wdXNoKGUpLFA9bixrKGYpLG8mJlIoKSksQygpfWZ1bmN0aW9uIHcoZSl7UD1lLGsoZiksZj1bXSxnPWkuaW5kZXhPZih4LFApfWZ1bmN0aW9uIEMoZSl7cmV0dXJue2RhdGE6aCxlcnJvcnM6dSxtZXRhOntkZWxpbWl0ZXI6TyxsaW5lYnJlYWs6eCxhYm9ydGVkOkYsdHJ1bmNhdGVkOiEhZSxjdXJzb3I6ZCsodHx8MCl9fX1mdW5jdGlvbiBSKCl7SShDKCkpLGg9W10sdT1bXX19LHRoaXMuYWJvcnQ9ZnVuY3Rpb24oKXtGPSEwfSx0aGlzLmdldENoYXJJbmRleD1mdW5jdGlvbigpe3JldHVybiBQfX1mdW5jdGlvbiBtKGUpe3ZhciB0PWUuZGF0YSxyPWhbdC53b3JrZXJJZF0saT0hMTtpZih0LmVycm9yKXIudXNlckVycm9yKHQuZXJyb3IsdC5maWxlKTtlbHNlIGlmKHQucmVzdWx0cyYmdC5yZXN1bHRzLmRhdGEpe3ZhciBuPXthYm9ydDpmdW5jdGlvbigpe2k9ITAseSh0LndvcmtlcklkLHtkYXRhOltdLGVycm9yczpbXSxtZXRhOnthYm9ydGVkOiEwfX0pfSxwYXVzZTpiLHJlc3VtZTpifTtpZih6KHIudXNlclN0ZXApKXtmb3IodmFyIHM9MDtzPHQucmVzdWx0cy5kYXRhLmxlbmd0aCYmKHIudXNlclN0ZXAoe2RhdGE6W3QucmVzdWx0cy5kYXRhW3NdXSxlcnJvcnM6dC5yZXN1bHRzLmVycm9ycyxtZXRhOnQucmVzdWx0cy5tZXRhfSxuKSwhaSk7cysrKTtkZWxldGUgdC5yZXN1bHRzfWVsc2UgeihyLnVzZXJDaHVuaykmJihyLnVzZXJDaHVuayh0LnJlc3VsdHMsbix0LmZpbGUpLGRlbGV0ZSB0LnJlc3VsdHMpfXQuZmluaXNoZWQmJiFpJiZ5KHQud29ya2VySWQsdC5yZXN1bHRzKX1mdW5jdGlvbiB5KGUsdCl7dmFyIHI9aFtlXTt6KHIudXNlckNvbXBsZXRlKSYmci51c2VyQ29tcGxldGUodCksci50ZXJtaW5hdGUoKSxkZWxldGUgaFtlXX1mdW5jdGlvbiBiKCl7dGhyb3dcIk5vdCBpbXBsZW1lbnRlZC5cIn1mdW5jdGlvbiBFKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm4gZTt2YXIgdD1BcnJheS5pc0FycmF5KGUpP1tdOnt9O2Zvcih2YXIgciBpbiBlKXRbcl09RShlW3JdKTtyZXR1cm4gdH1mdW5jdGlvbiB3KGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7ZS5hcHBseSh0LGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHooZSl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZX1yZXR1cm4gbz9mLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgdD1lLmRhdGE7dm9pZCAwPT09ay5XT1JLRVJfSUQmJnQmJihrLldPUktFUl9JRD10LndvcmtlcklkKTtpZihcInN0cmluZ1wiPT10eXBlb2YgdC5pbnB1dClmLnBvc3RNZXNzYWdlKHt3b3JrZXJJZDprLldPUktFUl9JRCxyZXN1bHRzOmsucGFyc2UodC5pbnB1dCx0LmNvbmZpZyksZmluaXNoZWQ6ITB9KTtlbHNlIGlmKGYuRmlsZSYmdC5pbnB1dCBpbnN0YW5jZW9mIEZpbGV8fHQuaW5wdXQgaW5zdGFuY2VvZiBPYmplY3Qpe3ZhciByPWsucGFyc2UodC5pbnB1dCx0LmNvbmZpZyk7ciYmZi5wb3N0TWVzc2FnZSh7d29ya2VySWQ6ay5XT1JLRVJfSUQscmVzdWx0czpyLGZpbmlzaGVkOiEwfSl9fTprLldPUktFUlNfU1VQUE9SVEVEJiYoZT1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKSxzPWUubGVuZ3RoP2VbZS5sZW5ndGgtMV0uc3JjOlwiXCIsZG9jdW1lbnQuYm9keT9kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLGZ1bmN0aW9uKCl7YT0hMH0sITApOmE9ITApLChjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSkuY29uc3RydWN0b3I9YywocC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShsLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPXAsKF8ucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoXy5wcm90b3R5cGUpKS5jb25zdHJ1Y3Rvcj1fLChnLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGwucHJvdG90eXBlKSkuY29uc3RydWN0b3I9ZyxrfSk7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGF0YS9hYngtZGF0YS5jc3Y/dj0zZDQ1OTJcIjsiLCJpbXBvcnQgeyBET01IZWxwZXJzIGFzICRkIH0gZnJvbSAnQFV0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCBvcHRpb25zKXtcbiAgICAgICAgaWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnICl7XG4gICAgICAgICAgICB0aHJvdyBgRmlyc3QgcGFyYW1ldGVyIG11c3QgYmUgYSBzdHJpbmcgcmVmZXJlbmNpbmcgdGhlIENTUy1saWtlIHNlbGVjdG9yIG9mIHRoZSBlbGVtZW50IHRvIGJlIGNyZWF0ZWQgXG4gICAgICAgICAgICAgICAgICAgIChcImRpdiNkaXZJRC5kaXZDbGFzc1wiKS5gO1xuICAgICAgICB9IFxuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgICAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50OyAvLyBwYXJlbnQgaXMgYSBKUyBvYmplY3RcbiAgICAgICAgdGhpcy5yZW5kZXJUb1NlbGVjdG9yID0gb3B0aW9ucy5yZW5kZXJUb1NlbGVjdG9yO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9ICRkLnEodGhpcy5yZW5kZXJUb1NlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IG9wdGlvbnMuY2hpbGRyZW47XG4gICAgICAgIHRoaXMucmVyZW5kZXIgPSAoIG9wdGlvbnMucmVyZW5kZXJPbkRhdGFNaXNtYXRjaCAmJiBvcHRpb25zLm1vZGVsLmlzTWlzbWF0Y2hlZCApO1xuICAgICAgICB0aGlzLmRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmVsID0gdGhpcy5wcmVyZW5kZXIoYXJndW1lbnRzKTsgLy8gd2lsbCBjYWxsIHRoZSBpbnN0YW5jZSdzIHByZXJlbmRlclxuICAgICAgICB0aGlzLmlzUmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9XG4gICAgcHJlcmVuZGVyKCl7XG4gICAgICAgIFxuICAgICAgICB2YXIgZXhpc3RpbmcgPSAkZC5xKHRoaXMuc2VsZWN0b3IpO1xuICAgICAgICBpZiAoIGV4aXN0aW5nICYmICF0aGlzLnJlcmVuZGVyICkge1xuICAgICAgICAgICAgICAgIC8vIGllIGlzIGV4aXN0aW5nIGFuZCBubyBuZWVkIHRvIHJlcmVuZGVyXG4gICAgICAgICAgICB0aGlzLnByZXJlbmRlcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9IGVsc2UgaWYgKCBleGlzdGluZyApIHsgLy8gaWUgaXMgZXhpc3RpbmcgYnV0IHRoZXJlIGlzIGEgbmVlZCB0byByZXJlbmRlclxuICAgICAgICAgICAgXG4gICAgICAgICAgICBleGlzdGluZy5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWwgPSAkZC5jKHRoaXMuc2VsZWN0b3IpO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgXG4gICAgfVxufSIsInZhciBoYXNoID0gcmVxdWlyZShcInN0cmluZy1oYXNoXCIpO1xudmFyIFB1YlN1YiA9IHJlcXVpcmUoXCJwdWJzdWItanNcIik7XG52YXIgc3Vic2NyaXB0aW9ucyA9IHt9O1xuZnVuY3Rpb24gbG9nU3VicygpIHtcbiAgICBjb25zb2xlLmxvZyhzdWJzY3JpcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVG9rZW4odG9waWMsIGZuUmVmKXtcbiAgICB2YXIgZnVuY3Rpb25IYXNoID0gaGFzaChmblJlZi50b1N0cmluZygpKTtcbiAgICB2YXIgc3RyID0gdG9waWMgKyBmblJlZjtcbiAgICB2YXIgdG9rZW4gPSAnc3ViJyArIGhhc2goc3RyKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b2tlbjogdG9rZW4sXG4gICAgICAgIGZuOiBmdW5jdGlvbkhhc2hcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBzZXRTdWJzKHN1YnNBcnJheSkgeyAvLyBzdWJzQXJyYXkgaXMgYXJyYXkgb2YgdG9waWMvZnVuY3Rpb24gcGFpciBhcnJheXNcbiAgICBzdWJzQXJyYXkuZm9yRWFjaChmdW5jdGlvbihwYWlyKXtcbiAgICAgICAgdmFyIHRvcGljID0gcGFpclswXSxcbiAgICAgICAgICAgIGZuUmVmID0gcGFpclsxXSxcbiAgICAgICAgICAgIHRva2VuT2JqID0gY3JlYXRlVG9rZW4odG9waWMsZm5SZWYpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXSA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl1bdG9waWNdID0gUHViU3ViLnN1YnNjcmliZSh0b3BpYyxmblJlZik7ICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93ICdTdWJzY3JpcHRpb24gdG9rZW4gaXMgYWxyZWFkeSBpbiB1c2UuJztcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjYW5jZWxTdWIodG9waWMsZm5SZWYpIHsgLy8gZm9yIGNhbmNlbGluZyBzaW5nbGUgc3Vic2NyaXB0aW9uXG4gICAgdmFyIHRva2VuT2JqID0gY3JlYXRlVG9rZW4odG9waWMsZm5SZWYpO1xuICAgIGlmICggc3Vic2NyaXB0aW9uc1t0b2tlbk9iai5mbl0gIT09IHVuZGVmaW5lZCAmJiBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXVt0b3BpY10gIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgUHViU3ViLnVuc3Vic2NyaWJlKCBzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXVt0b3BpY10gKTtcbiAgICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dW3RvcGljXTtcbiAgICAgICAgaWYgKCBPYmplY3Qua2V5cyhzdWJzY3JpcHRpb25zW3Rva2VuT2JqLmZuXSkubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNbdG9rZW5PYmouZm5dO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgJ1N1YnNjcmlwdGlvbiBkb2VzIG5vdCBleGlzdC4nO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbG9nU3Viczpsb2dTdWJzLFxuICAgIHNldFN1YnM6c2V0U3VicyxcbiAgICBjYW5jZWxTdWI6Y2FuY2VsU3ViXG59OyIsImltcG9ydCBSb3V0ZXIgZnJvbSAnQFJvdXRlcic7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQQ1RBcHAge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb3B0aW9ucyl7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKG9wdGlvbiA9PiB7XG4gICAgICAgICAgICB0aGlzW29wdGlvbl0gPSBvcHRpb25zW29wdGlvbl07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0KHJvdXRlck9wdGlvbnMpe1xuICAgICAgICBpZiAoIHRoaXMubmVlZHNSb3V0ZXIgKXsgLy8gY29tZXMgZnJvbSBvcHRpb25zIG9iamVjdFxuICAgICAgICAgICAgdGhpcy5yb3V0ZXIgPSBuZXcgUm91dGVyKCk7XG4gICAgICAgICAgICB0aGlzLnJvdXRlci5pbml0KHJvdXRlck9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzYWJsZUhvdmVyT25Ub3VjaCgpO1xuICAgIH1cbiAgICBkaXNhYmxlSG92ZXJPblRvdWNoKCl7XG4gICAgLy8gSFQ6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zMDMwMzg5OFxuICAgICAgICB2YXIgaGFzSG92ZXJDbGFzcyA9IGZhbHNlO1xuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuYm9keTtcbiAgICAgICAgdmFyIGxhc3RUb3VjaFRpbWUgPSAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIGVuYWJsZUhvdmVyKCkge1xuICAgICAgICAgICAgLy8gZmlsdGVyIGVtdWxhdGVkIGV2ZW50cyBjb21pbmcgZnJvbSB0b3VjaCBldmVudHNcbiAgICAgICAgICAgIGlmIChuZXcgRGF0ZSgpIC0gbGFzdFRvdWNoVGltZSA8IDUwMCkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKGhhc0hvdmVyQ2xhc3MpIHJldHVybjtcblxuICAgICAgICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2hhcy1ob3ZlcicpO1xuICAgICAgICAgICAgaGFzSG92ZXJDbGFzcyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkaXNhYmxlSG92ZXIoKSB7XG4gICAgICAgICAgICBpZiAoIWhhc0hvdmVyQ2xhc3MpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtaG92ZXInKTtcbiAgICAgICAgICAgIGhhc0hvdmVyQ2xhc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUxhc3RUb3VjaFRpbWUoKSB7XG4gICAgICAgICAgICBsYXN0VG91Y2hUaW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB1cGRhdGVMYXN0VG91Y2hUaW1lLCB0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGRpc2FibGVIb3ZlciwgdHJ1ZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGVuYWJsZUhvdmVyLCB0cnVlKTtcblxuICAgICAgICBlbmFibGVIb3ZlcigpO1xuICAgIH1cbiAgICBjcmVhdGVDb21wb25lbnQobW9kZWwsIGNvbXBvbmVudCwgc2VsZWN0b3IsIF9vcHRpb25zKXsgXG4gICAgICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh7XG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgbW9kZWwsXG4gICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICByZXJlbmRlck9uRGF0YU1pc21hdGNoOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCBfb3B0aW9ucyAhPT0gbnVsbCAmJiB0eXBlb2YgX29wdGlvbnMgPT09ICdvYmplY3QnICl7XG4gICAgICAgICAgICBmb3IgKCBsZXQga2V5IGluIF9vcHRpb25zICl7XG4gICAgICAgICAgICAgICAgaWYgKCBfb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpICl7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IF9vcHRpb25zW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IGNvbXBvbmVudChzZWxlY3Rvciwgb3B0aW9ucyk7XG4gICAgfVxufSIsIm1vZHVsZS5leHBvcnRzID0gXCI8c2VjdGlvbiBpZD1cXFwiaW50cm9cXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJqcy1pbm5lci1jb250ZW50XFxcIj5cXG4gICAgPC9kaXY+XFxuPC9zZWN0aW9uPlxcbjxzZWN0aW9uIGlkPVxcXCJzZWN0aW9uLWNvbXBhcmlzb25cXFwiPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJqcy1pbm5lci1jb250ZW50XFxcIj5cXG4gICAgICAgIDxoMj5BbnRpYmlvdGljcyBpbiBEZXZlbG9wbWVudCBTaW5jZSAyMDE0PC9oMj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImFieC1sZWdlbmRcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImFieC1sZWdlbmQtLXdyYXBwZXJcXFwiPlxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwiYWJ4LWxlZ2VuZC0taXRlbSBhYngtbGVnZW5kLS1pdGVtLS1hYnhcXFwiPkFudGliaW90aWM8L3A+XFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXCJhYngtbGVnZW5kLS1pdGVtIGFieC1sZWdlbmQtLWl0ZW0tLXVyZ2VudFxcXCI+UG90ZW50aWFsIHRvIHRyZWF0IENEQyB1cmdlbnQgcGF0aG9nZW48L3A+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYWJ4LWxlZ2VuZC0td3JhcHBlclxcXCI+XFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXCJhYngtbGVnZW5kLS1pdGVtIGFieC1sZWdlbmQtLWl0ZW0tLW5vdmVsXFxcIj5Ob3ZlbCBhbnRpYmlvdGljczwvcD5cXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcImFieC1sZWdlbmQtLWl0ZW0gYWJ4LWxlZ2VuZC0taXRlbS0tZ3JhbVxcXCI+UG90ZW50aWFsIHRvIHRyZWF0IEdyYW0tbmVnYXRpdmUgYmFjdGVyaWE8L3A+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgaWQ9XFxcImFieC12aXN1YWxpemF0aW9uXFxcIj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBpZD1cXFwiYWJ4LXRvdGFsc1xcXCI+XFxuICAgICAgICAgICAgPHA+VG90YWwgYXBwcm92ZWQgYW50aWJpb3RpY3Mgc2luY2UgMjAxNCAvIDxzcGFuIGlkPVxcXCJ0b3RhbC1hcHByb3ZlZFxcXCIgY2xhc3M9XFxcInRvdGFsLXNwYW5cXFwiPjwvc3Bhbj48L3A+XFxuICAgICAgICAgICAgPHA+VG90YWwgZGlzY29udGludWVkIGFudGliaW90aWNzIHNpbmNlIDIwMTQgLyA8c3BhbiBpZD1cXFwidG90YWwtZGlzY29udGludWVkXFxcIiBjbGFzcz1cXFwidG90YWwtc3BhblxcXCI+PC9zcGFuPjwvcD5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L3NlY3Rpb24+XFxuPGRpdiBpZD1cXFwiYWJ4LW5vdGVzXFxcIj48L2Rpdj5cXG48Zm9vdGVyIGNsYXNzPVxcXCJkb3dubG9hZC1yZXNvdXJjZXNcXFwiPlxcbiAgICA8ZGl2PlxcbiAgICAgICAgPHA+PHN0cm9uZz5Eb3dubG9hZCByZXNvdXJjZXM6PC9zdHJvbmc+XFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcInBjdC1kb3dubG9hZFxcXCIgaHJlZj1cXFwiXFxcIj5NZXRob2RvbG9neTwvYT5cXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFwicGN0LWRvd25sb2FkXFxcIiBocmVmPVxcXCJcXFwiPlJlcG9ydDwvYT5cXG4gICAgICAgIDwvcD5cXG4gICAgPC9kaXY+XFxuPC9mb290ZXI+XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxoMiBpZD1cXFwiYW50aWJpb3RpYy1pbm5vdmF0aW9uXFxcIj5BbnRpYmlvdGljIElubm92YXRpb248L2gyPlxcbjxwPlRoZSBQZXcgQ2hhcml0YWJsZSBUcnVzdHMgaGFzIHRyYWNrZWQgdGhlIHBpcGVsaW5lIG9mIGFudGliaW90aWNzIGluIGNsaW5pY2FsIGRldmVsb3BtZW50IHNpbmNlIDIwMTQgYW5kIGhhcyBhZ2dyZWdhdGVkIHRoZVxcbnVwZGF0ZXMgaW50byBhbiBpbnRlcmFjdGl2ZSB0b29sIHRoYXQgaWxsdXN0cmF0ZXMgdHJlbmRzIGluIHRoZSBwaXBlbGluZS4gVGhpcyBsb25naXR1ZGluYWwgZGF0YSB2aXN1YWxpemF0aW9uIHVuZGVyc2NvcmVzIHRoZSBsb25nc3RhbmRpbmcgY29uY2VybnMgb2Ygc2NpZW50aXN0cywgZG9jdG9ycywgcHVibGljIGhlYWx0aCBvZmZpY2lhbHMsIGFuZCBvdGhlciBzdGFrZWhvbGRlcnMgcmVnYXJkaW5nIHRoZSBkYW5nZXJvdXNseSBsb3cgbnVtYmVyIG9mIGFudGliaW90aWNzIGluIGRldmVsb3BtZW50IHRvIGFkZHJlc3MgY3VycmVudCBhbmQgZnV0dXJlIHBhdGllbnQgbmVlZHMsIHBhcnRpY3VsYXJseSBmb3IgdHJlYXRpbmcgdGhlIG1vc3QgdXJnZW50IGJhY3RlcmlhbCB0aHJlYXRzLCBzdWNoIGFzIEdyYW0tbmVnYXRpdmUgcGF0aG9nZW5zLjwvcD5cXG48cD5DbGljayB0aGUgcGxheSBidXR0b24gdG8gc2VlIHRoZSBldm9sdXRpb24gb2YgdGhlIGFudGliaW90aWMgcGlwZWxpbmUgc2luY2UgMjAxNCwgb3IgY2xpY2sgb24gYW4gaW5kaXZpZHVhbCB5ZWFyIHRvIHNlZSB0aGUgc3RhdHVzIG9mIHRoZSBwaXBlbGluZSBhdCBhIHBhcnRpY3VsYXIgcG9pbnQgaW4gdGltZS4gVG8gc2VlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBkcnVnLCBob3ZlciBvdmVyIGFueSBvZiB0aGUgW3JlY3RhbmdsZXNdLjwvcD5cXG5cIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHA+PHN0cm9uZz5Ob3Rlczo8L3N0cm9uZz4gQ2xpbmljYWwgY2FuZGlkYXRlcyBpbmNsdWRlZCBpbiB0aGlzIGRhdGEgdmlzdWFsaXphdGlvbiBhcmUgY29uc2lzdGVudCB3aXRoIFBld+KAmXMgbWV0aG9kb2xvZ3kgZm9yIHRyYWNraW5nIGFudGliaW90aWNzIGluIGNsaW5pY2FsIGRldmVsb3BtZW50LiBNb3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBtZXRob2RzIGFuZCB0aGUgZnVsbCB1bmRlcmx5aW5nIGRhdGEgY2FuIGJlIGZvdW5kIGluIHRoZSBsYXRlc3QgYW5hbHlzaXMgb2YgdGhlIHBpcGVsaW5lLiBQZXfigJlzIHVwZGF0ZXMgYXJlIGNvbmR1Y3RlZCBzZW1pYW5udWFsbHksIGV4Y2VwdCBmb3IgMjAxNCwgd2hlbiB0aGV5IHdlcmUgcHVibGlzaGVkIHF1YXJ0ZXJseSwgYW5kIDIwMTgsIHdoZW4gYSB0aW1lbGluZSBhZGp1c3RtZW50IHJlc3VsdGVkIGluIGp1c3Qgb25lIHVwZGF0ZSBmb3IgdGhlIHllYXIuPC9wPlxcblwiOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICB2YXIgaGFzaCA9IDUzODEsXG4gICAgICBpICAgID0gc3RyLmxlbmd0aDtcblxuICB3aGlsZShpKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuXG4gIC8qIEphdmFTY3JpcHQgZG9lcyBiaXR3aXNlIG9wZXJhdGlvbnMgKGxpa2UgWE9SLCBhYm92ZSkgb24gMzItYml0IHNpZ25lZFxuICAgKiBpbnRlZ2Vycy4gU2luY2Ugd2Ugd2FudCB0aGUgcmVzdWx0cyB0byBiZSBhbHdheXMgcG9zaXRpdmUsIGNvbnZlcnQgdGhlXG4gICAqIHNpZ25lZCBpbnQgdG8gYW4gdW5zaWduZWQgYnkgZG9pbmcgYW4gdW5zaWduZWQgYml0c2hpZnQuICovXG4gIHJldHVybiBoYXNoID4+PiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2g7XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZXIgeyAvLyB0aGlzIGNvdWxkIGJlIGludGVncmF0ZWQgd2l0aCBzdGF0ZWZ1bCBkZWFkXG4gICAgLypcbiAgICBSb3V0ZXIgb2ZmZXJzIGJhc2ljIHNoYXJlZCBmdW5jdGlvbnMgZm9yIGFsbCByb3V0ZXJzLiBNZXRob2RzIGZvciB1cGRhdGluZyAgaGlzdG9yeSBzdGF0ZSBhbmQgdXBkYXRpbmcgdGhlIGhhc2ggdXJsLiBBcnJheSBvZiBzdWJzY3JpcHRpb25zXG4gICAgdGhhdCBhZmZlY3QgdGhlIHVybCBpcyBwYXNzZWQgaW4uIFRoZSBQdWJTdWIgbW9kdWxlIGlzIHBhc3NlZCBpbi4gc2V0SGFzaCBhbmQgZGVjb2RlSGFzaCBmdW5jdGlvbnMgYXJlIHBhc3NlZCBpbiBiYyB0aGV5IHdpbGwgYmUgZGlmZlxuICAgIGZvciBlYWNoIGFwcC4gdmlld3MgYXJlIHBhc3NlZCBpbiBzbyB0aGF0IHRoZSByZXNvbHV0aW9ucyBvZiB0aGVpciBwcm9taXNlcyBjYW4gYmUgdHJhY2tlZCBhbmQgYWN0ZWQgdXBvbiAoaWUgcm91dGVyIGRlY29kZXMgb25seSBhZnRlciBcbiAgICBhbGwgdmlld3MgYXJlIHJlYWR5KVxuICAgICovXG4gICAgaW5pdChyb3V0ZXJPcHRpb25zKXtcbiAgICAgICAgXG4gICAgICAgIGlmICggcm91dGVyT3B0aW9ucyA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiByb3V0ZXJPcHRpb25zICE9PSAnb2JqZWN0JyApe1xuICAgICAgICAgICAgdGhyb3cgJ3JvdXRlci5pbml0IG1ldGhvZCByZXF1aXJlcyBhIGNvbmZpZyBvYmplY3QgYXMgcGFyYW1ldGVyIDEnXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCB0eXBlb2Ygcm91dGVyT3B0aW9ucy5lbmNvZGUgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHJvdXRlck9wdGlvbnMuZGVjb2RlICE9PSAnZnVuY3Rpb24nIHx8ICFBcnJheS5pc0FycmF5KHJvdXRlck9wdGlvbnMudmlld3MpIHx8IHR5cGVvZiByb3V0ZXJPcHRpb25zLlBTICE9PSAnb2JqZWN0JyApe1xuICAgICAgICAgICAgdGhyb3cgJ3JvdXRlck9wdGlvbnMgb2JqZWN0IG5lZWRzIGVuY29kZSwgZGVjb2RlLCB2aWV3cywgYW5kIFBTIHByb3BlcnRpZXMuIGVuY29kZSBhbmQgZGVjb2RlIG11c3QgYmUgZnVuY3Rpb25zOyB2aWV3cyBpcyBhbiBhcnJheSBvZiB2aWV3cyBmcm9tIHRoZSBhcHA7IFBTIG5lZWRzIHRvIGJlIHRoZSBQdWJTdWIgc2V0dGVyLidcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlT2JqID0ge307XG4gICAgICAgIHRoaXMuaGFzaFN0YXRlID0gcm91dGVyT3B0aW9ucy5lbmNvZGU7XG4gICAgICAgIHRoaXMuZGVjb2RlSGFzaCA9IHJvdXRlck9wdGlvbnMuZGVjb2RlO1xuICAgICAgICB0aGlzLnZpZXdQcm9taXNlcyA9IHJvdXRlck9wdGlvbnMudmlld3MubWFwKGVhY2ggPT4gZWFjaC5pc1JlYWR5KTsgLy8gdmlldy5pc1JlYWR5IGlzIGEgcHJvbWlzZWQgcmVzb2x2ZWQgdHJ1ZSBhZnRlciB0aGUgdmlldyBpcyByZW5kZXJlZFxuICAgICAgICB0aGlzLlBTID0gcm91dGVyT3B0aW9ucy5QUztcbiAgICAgICAgXG4gICAgICAgIFByb21pc2UuYWxsKHRoaXMudmlld1Byb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5kZWNvZGVIYXNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLlBTLnNldFN1YnMocm91dGVyT3B0aW9ucy5zdWJzY3JpcHRpb25zLm1hcChlYWNoID0+IHsgLy8gc3Vic2NyaXB0aW9ucyB0aGF0IG1hdHRlciBmb3Igcm91dGVyIGFyZSBtYWRlIHRvIHRyaWdnZXIgaGFzaENoYW5nZSBtZXRob2Qgd2hlbiBwdWJsaXNoZWRcbiAgICAgICAgICAgIHZhciBhcnIgPSBbZWFjaCwgKG1zZyxkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNoQ2hhbmdlLmNhbGwodGhpcyxtc2csZGF0YSk7XG4gICAgICAgICAgICB9XTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfSkpO1xuICAgIH1cbiAgICBoYXNoQ2hhbmdlKG1zZyxkYXRhKXtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZU9iaihtc2csZGF0YSk7XG4gICAgICAgIHRoaXMuaGFzaFN0YXRlKCk7XG4gICAgICAgIHRoaXMucmVwbGFjZVN0YXRlKCk7XG4gICAgfVxuICAgIHNldFN0YXRlT2JqKG1zZywgZGF0YSl7XG4gICAgICAgIHRoaXMuc3RhdGVPYmpbbXNnXSA9IGRhdGE7XG4gICAgICAgIFxuICAgIH1cbiAgICByZXBsYWNlU3RhdGUoKXsgICAgXG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh0aGlzLnN0YXRlT2JqLCcnLHRoaXMuaGFzaFN0cmluZylcbiAgICB9XG5cbn0iLCJpbXBvcnQgRWxlbWVudCBmcm9tICdAVUkvZWxlbWVudCc7XG5pbXBvcnQgcyBmcm9tICcuL3N0eWxlcy5zY3NzJztcbmltcG9ydCB7IHN0YXRlTW9kdWxlIGFzIFMgfSBmcm9tICdzdGF0ZWZ1bC1kZWFkJztcbmltcG9ydCBQUyBmcm9tICdwdWJzdWItc2V0dGVyJztcbmNvbnNvbGUubG9nKHMpO1xuY29uc3QgbWluVW5pdERpbWVuc2lvbiA9IDMwOyAvLyBtaW5pbXVtIHB4IGhlaWdodC93aWR0aCBhY2NlcHRlZCBmb3IgdG91Y2hhYmxlIGVsZW1lbnRcbmNvbnN0IGhlYWRlckhlaWdodCA9IDEuNSAqIG1pblVuaXREaW1lbnNpb247IC8vIHRoZSBoZWlnaHQgb2YgdGhlIHBoYXNlLWhlYWRpbmcgYmFycyByZWxhdGl2ZSB0byBtaW5Vbml0RGltZW5zaW9uXG5jb25zdCB1bml0UGFkZGluZyA9IDI7XG5jb25zdCBoZWFkZXJzID0gW1xuICAgIFsnUGhhc2UgMScsICdQMSddLFxuICAgIFsnUGhhc2UgMicsICdQMiddLFxuICAgIFsnUGhhc2UgMycsICdQMyddLFxuICAgIFsnQXBwbGljYXRpb24nLCAnTkRBJ10sXG4gICAgWydBcHByb3ZlZCcsICcmIzEwMDA0J11cbl07XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVml6VmlldyBleHRlbmRzIEVsZW1lbnQge1xuICAgIHByZXJlbmRlcigpIHsgLy8gdGhpcyBwcmVyZW5kZXIgaXMgY2FsbGVkIGFzIHBhcnQgb2YgdGhlIHN1cGVyIGNvbnN0cnVjdG9yXG4gICAgICAgIC8qIGFueSBjaGlsZHJlbiBuZWVkIHRvIGJlIGluc3RhdGlhdGVkIGhlcmUgKi9cblxuICAgICAgICB0aGlzLm1pblVuaXREaW1lbnNpb24gPSBtaW5Vbml0RGltZW5zaW9uO1xuICAgICAgICB0aGlzLmhlYWRlckhlaWdodCA9IGhlYWRlckhlaWdodDtcbiAgICAgICAgdGhpcy51bml0UGFkZGluZyA9IHVuaXRQYWRkaW5nO1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICB0aGlzLnBoYXNlTWVtYmVycyA9IFswLDFdLm1hcCgoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaGVhZGVycy5tYXAoKCkgPT4geyAvLyB3aWxsIGtlZXAgdHJhY2sgb2Ygd2hpY2ggZHJ1Z3MgYXJlIGluIHdoaWNoIGNvbHVtbiBzbyB0aGF0IGFuaW1hdGlvbnMgY2FuIGJlIHRpbWVkIGFuZCBzbyB0aGF0IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHJ1Z3MgdGhhdCBzdGF5IGluIHRoZWlyIGNvbHVtbiBmcm9tIG9uZSBzdGVwIHRvIGFub3RoZXIgY2FuIGJlIHBsYWNlZCBiZWZvcmUgdGhvc2UgZW50ZXJpbmcgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb2x1bW5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IFtdLFxuICAgICAgICAgICAgICAgICAgICBkaXNjb250aW51ZWQ6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucGhhc2VNZW1iZXJzKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBsdXMgb25lIHRvIGFjY3QgZm8gZGlzY29udGludWVkIGhlYWRlciAgICAgICAgICAgICAgICAgICAgIDUxIGZvciB0b3RhbHMgIDkwIGZvciBsZWdlbmQgNjEgZm9yIHN0aWNreSBoZWFkZXIgNDAgZm9yIHRvb2xiYXJcbiAgICAgICAgdGhpcy5oZWlnaHROZWVkZWQgPSAoIHRoaXMubW9kZWwubWF4QWN0aXZlICsgdGhpcy5tb2RlbC5tYXhEaXNjb250aW51ZWQgKyAxICkgKiAoIHRoaXMubWluVW5pdERpbWVuc2lvbiArIHRoaXMudW5pdFBhZGRpbmcgKSArIHRoaXMuaGVhZGVySGVpZ2h0ICsgdGhpcy51bml0UGFkZGluZyArIDUxICsgOTAgKyA2MSArIDQwO1xuICAgICAgICAvL2NvbnRhaW5lclxuICAgICAgICB2YXIgdmlldyA9IHN1cGVyLnByZXJlbmRlcigpO1xuICAgICAgICBpZiAodGhpcy5wcmVyZW5kZXJlZCAmJiAhdGhpcy5yZXJlbmRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHZpZXc7IC8vIGlmIHByZXJlbmRlcmVkIGFuZCBubyBuZWVkIHRvIHJlbmRlciAobm8gZGF0YSBtaXNtYXRjaClcbiAgICAgICAgfVxuXG5cbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyQ29sdW1ucyhjb250KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBjb2x1bW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBjb2x1bW4uY2xhc3NMaXN0LmFkZChzLmNvbHVtbik7XG4gICAgICAgICAgICAgICAgbGV0IHBsYWNlaG9sZGVyTnVtYmVyID0gY29udC5uYW1lID09PSBzLmFjdGl2ZUNvbnRhaW5lciA/IHRoaXMubW9kZWwubWF4QWN0aXZlIDogdGhpcy5tb2RlbC5tYXhEaXNjb250aW51ZWQ7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwbGFjZWhvbGRlck51bWJlcjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBwbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlci5jbGFzc0xpc3QuYWRkKHMuZHJ1Zywgcy5kcnVnRW1wdHkpO1xuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250LmFwcGVuZENoaWxkKGNvbHVtbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb250cm9sc1xuICAgICAgICB2YXIgY29udHJvbENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250cm9sQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQocy5jb250cm9sQ29udGFpbmVyKTtcblxuICAgICAgICAgICAgLy8gcGxheUJ1dHRvblxuICAgICAgICAgICAgdmFyIHBsYXlCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgICAgIHBsYXlCdXR0b24uY2xhc3NMaXN0LmFkZChzLnBsYXlCdXR0b24pO1xuICAgICAgICAgICAgcGxheUJ1dHRvbi50eXBlID0gXCJidXR0b25cIjtcbiAgICAgICAgICAgIGNvbnRyb2xDb250YWluZXIuYXBwZW5kQ2hpbGQocGxheUJ1dHRvbik7XG5cbiAgICAgICAgICAgIC8veWVhcnNcbiAgICAgICAgICAgIHRoaXMubW9kZWwueWVhcnMuZm9yRWFjaCgoeWVhciwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciB5ZWFyQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICAgICAgeWVhckJ1dHRvbi5jbGFzc0xpc3QuYWRkKHMueWVhckJ1dHRvbiwgYCR7IGkgPT09IDAgPyBzLnllYXJCdXR0b25BY3RpdmUgOiAnbm9wZSd9YCk7XG4gICAgICAgICAgICAgICAgeWVhckJ1dHRvbi50eXBlID0gXCJidXR0b25cIjtcbiAgICAgICAgICAgICAgICB5ZWFyQnV0dG9uLnZhbHVlID0geWVhcjtcbiAgICAgICAgICAgICAgICB5ZWFyQnV0dG9uLnRleHRDb250ZW50ID0geWVhcjtcbiAgICAgICAgICAgICAgICBjb250cm9sQ29udGFpbmVyLmFwcGVuZENoaWxkKHllYXJCdXR0b24pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdmlldy5hcHBlbmRDaGlsZChjb250cm9sQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBjb250YWluZXJcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChzLmNvbnRhaW5lcik7XG4gICAgICAgIHZpZXcuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgICAgICAvLyBhY3RpdmUgY29udGFpbmVyXG4gICAgICAgIHZhciBhY3RpdmVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgYWN0aXZlQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQocy5hY3RpdmVDb250YWluZXIpO1xuICAgICAgICBhY3RpdmVDb250YWluZXIubmFtZSA9IHMuYWN0aXZlQ29udGFpbmVyO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYWN0aXZlQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBoZWFkZXIgY29udGFpbmVyXG4gICAgICAgIHZhciBoZWFkZXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgaGVhZGVyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQocy5oZWFkZXJDb250YWluZXIpO1xuICAgICAgICBoZWFkZXJDb250YWluZXIubmFtZSA9IHMuaGVhZGVyQ29udGFpbmVyO1xuICAgICAgICBoZWFkZXJzLmZvckVhY2gocGhhc2UgPT4ge1xuICAgICAgICAgICAgdmFyIGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaGVhZGVyRGl2LmNsYXNzTGlzdC5hZGQocy5oZWFkZXJEaXYpO1xuICAgICAgICAgICAgaGVhZGVyRGl2LmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cy5waGFzZUZ1bGx9XCI+JHtwaGFzZVswXS50b1VwcGVyQ2FzZSgpfTwvc3Bhbj48c3BhbiBjbGFzcz1cIiR7cy5waGFzZUFiYnJ9XCI+JHtwaGFzZVsxXX08L3NwYW4+YDtcbiAgICAgICAgICAgIGhlYWRlckNvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkZXJEaXYpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGhlYWRlckNvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gZGlzY29udGludWVkIGNvbnRhaW5lclxuICAgICAgICB2YXIgZGlzY29udGludWVkQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRpc2NvbnRpbnVlZENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHMuZGlzY29udGludWVkQ29udGFpbmVyKTtcbiAgICAgICAgZGlzY29udGludWVkQ29udGFpbmVyLm5hbWUgPSBzLmRpc2NvbnRpbnVlZENvbnRhaW5lcjtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRpc2NvbnRpbnVlZENvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gY29sdW1uc1xuICAgICAgICByZW5kZXJDb2x1bW5zLmNhbGwodGhpcywgYWN0aXZlQ29udGFpbmVyKTtcbiAgICAgICAgcmVuZGVyQ29sdW1ucy5jYWxsKHRoaXMsIGRpc2NvbnRpbnVlZENvbnRhaW5lcik7XG5cblxuXG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cbiAgICBwb3B1bGF0ZVBsYWNlaG9sZGVycyh5ZWFySW5kZXgsIG9ic2VydmF0aW9uKSB7XG4gICAgICAgIGZ1bmN0aW9uIGFkZElkc0FuZENsYXNzZXMocGxhY2Vob2xkZXIsIGRydWcpe1xuICAgICAgICAgICAgZnVuY3Rpb24gYXBwZW5kRGV0YWlscygpe1xuICAgICAgICAgICAgICAgIHZhciBkcmF3ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBkcmF3ZXIuY2xhc3NMaXN0LmFkZChzLmRldGFpbERyYXdlcik7XG4gICAgICAgICAgICAgICAgZHJhd2VyLmlubmVySFRNTCA9IGA8c3Ryb25nPiR7ZHJ1Zy5uYW1lfTwvc3Ryb25nPjxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtkcnVnLmNvbXBhbnl9YDtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlci5hcHBlbmRDaGlsZChkcmF3ZXIpOyAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXIuaWQgPSBkcnVnLmlkO1xuICAgICAgICAgICAgcGxhY2Vob2xkZXIuY2xhc3NMaXN0LnJlbW92ZShzLmRydWdFbXB0eSk7XG4gICAgICAgICAgICBwbGFjZWhvbGRlci5jbGFzc0xpc3QuYWRkKGAkeyBkcnVnLmdyYW1OZWdhdGl2ZSA/IHMuZ3JhbU5lZ2F0aXZlIDogJ25vcGUnIH1gLCBgJHsgZHJ1Zy5ub3ZlbCA/IHMubm92ZWwgOiAnbm9wZScgfWAsIGAkeyBkcnVnLnVyZ2VudCA/IHMudXJnZW50IDogJ25vcGUnIH1gKTtcbiAgICAgICAgICAgIGFwcGVuZERldGFpbHMoKVxuICAgICAgICB9XG4gICAgICAgIHZhciBhY3RpdmVDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHMuYWN0aXZlQ29udGFpbmVyKSxcbiAgICAgICAgICAgIGRpc2NvbnRpbnVlZENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy5kaXNjb250aW51ZWRDb250YWluZXIpO1xuXG4gICAgICAgIC8vIGNvcHkgaW5kZXggMSBvZiBwaGFzZU1lbWJlcnMgdG8gaW5kZXggMC4gSlNPTiBwYXJzZS9zdHJpbmdpZnkgdG8gbWFrZSBkZWVwIGNvcHlcbiAgICAgICAgdGhpcy5waGFzZU1lbWJlcnNbMF0gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMucGhhc2VNZW1iZXJzWzFdKSk7XG4gICAgICAgIFxuICAgICAgICBbYWN0aXZlQ29udGFpbmVyLCBkaXNjb250aW51ZWRDb250YWluZXJdLmZvckVhY2goKGNvbnRhaW5lciwgaykgPT4ge1xuICAgICAgICAgICAgdGhpcy5tb2RlbC5kYXRhW3llYXJJbmRleF0ub2JzZXJ2YXRpb25zW29ic2VydmF0aW9uXS5mb3JFYWNoKChwaGFzZSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldFBoYXNlTWVtYmVyc0luZGV4KGlkKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGhhc2VNZW1iZXJzWzFdW2ldWyAoIGsgPT09IDAgPyAnYWN0aXZlJyA6ICdkaXNjb250aW51ZWQnICkgXS5pbmRleE9mKGlkKSAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBmaWx0ZXIgZHJ1Z3MgYnkgd2hldGhlciB0aGV5J3JlIGFjdGl2ZSBvciBkaXNjb250aW51ZWQ7IGFsc28gc29ydCB0aGVtIGJhc2VkIG9uIHdoZXRoZXIgdGhleSB3ZXJlIGFscmVhZHkgaW4gdGhlIGNvbHVtblxuICAgICAgICAgICAgICAgIC8vICB0aGV5IGFyZSBhYm91dCB0byBiZSBwbGFjZWQgaW5cbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWQgPSBwaGFzZS52YWx1ZXMuZmlsdGVyKGQgPT4gayA9PT0gMCA/ICFkW3RoaXMubW9kZWwueWVhcnNbeWVhckluZGV4XV1bb2JzZXJ2YXRpb25dLmlzRGlzY29udGludWVkIDogZFt0aGlzLm1vZGVsLnllYXJzW3llYXJJbmRleF1dW29ic2VydmF0aW9uXS5pc0Rpc2NvbnRpbnVlZCkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nSW5kZXhBID0gZ2V0UGhhc2VNZW1iZXJzSW5kZXguY2FsbCh0aGlzLCBhLmlkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ0luZGV4QiA9IGdldFBoYXNlTWVtYmVyc0luZGV4LmNhbGwodGhpcywgYi5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYSBleGlzdGluZyBpbmRleCBhLCBiJywgZXhpc3RpbmdJbmRleEEsIGV4aXN0aW5nSW5kZXhCKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZXhpc3RpbmdJbmRleEIgPCAwICYmIGV4aXN0aW5nSW5kZXhBID49IDAgKSB7IC8vIGlmIGRydWcgaXMgZW50ZXJpbmcgdGhlIGNvbHVtbiwgaWUsIG5vdCBhbHJlYWR5IGluIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nSW5kZXhBIDwgMCAmJiBleGlzdGluZ0luZGV4QiA+PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBnZXRQaGFzZU1lbWJlcnNJbmRleC5jYWxsKHRoaXMsIGEuaWQpIDwgZ2V0UGhhc2VNZW1iZXJzSW5kZXguY2FsbCh0aGlzLCBiLmlkKSApIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBnZXRQaGFzZU1lbWJlcnNJbmRleC5jYWxsKHRoaXMsIGEuaWQpID4gZ2V0UGhhc2VNZW1iZXJzSW5kZXguY2FsbCh0aGlzLCBiLmlkKSApIHsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbiA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMuY29sdW1uKVtpXTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhmaWx0ZXJlZClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBjbGVhciB0aGUgcGhhc2VNZW1iZXIgYXJyYXkgbm93IHRoYXQgaXRzIHByZXZpb3VzIGNvbnRlbnRzIGhhdmUgYmVlbiB1dGlsaXplZFxuICAgICAgICAgICAgICAgIHRoaXMucGhhc2VNZW1iZXJzWzFdW2ldWyAoIGsgPT09IDAgPyAnYWN0aXZlJyA6ICdkaXNjb250aW51ZWQnICkgXS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkLmZvckVhY2goKGRydWcsIGopID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gY29sdW1uLnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5kcnVnKVtqXTtcbiAgICAgICAgICAgICAgICAgICAgYWRkSWRzQW5kQ2xhc3NlcyhwbGFjZWhvbGRlciwgZHJ1Zyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGhhc2VNZW1iZXJzWzFdW2ldWyAoIGsgPT09IDAgPyAnYWN0aXZlJyA6ICdkaXNjb250aW51ZWQnICkgXS5wdXNoKGRydWcuaWQpOyAvLyBwbGFjZSB0aGUgZHJ1ZyBpbiB0aGUgcHJvcGVyIGJ1Y2tldCB0cmFja2luZyBpdHMgY29sdW1uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMucGhhc2VNZW1iZXJzKTtcbiAgICB9XG4gICAgaW5pdCgpIHtcbiAgICAgICAgUFMuc2V0U3VicyhbXG4gICAgICAgICAgICBbJ3Jlc2l6ZScsIHRoaXMuY2hlY2tIZWlnaHQuYmluZCh0aGlzKV0sXG4gICAgICAgICAgICBbJ3llYXInLCB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpXVxuICAgICAgICBdKTtcbiAgICAgICAgUy5zZXRTdGF0ZSgneWVhcicsIFt0aGlzLm1vZGVsLnllYXJzWzBdLCBudWxsLCAxXSk7XG4gICAgICAgIHRoaXMubm9uRW1wdHlEcnVncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5kcnVnICsgJzpub3QoLicgKyBzLmRydWdFbXB0eSArICcpJyk7XG4gICAgICAgIHRoaXMuY2hlY2tIZWlnaHQoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplWWVhckJ1dHRvbnMoKTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplUGxheUJ1dHRvbigpO1xuICAgIH1cbiAgICBpbml0aWFsaXplUGxheUJ1dHRvbigpe1xuICAgICAgICB2YXIgcGxheUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy5wbGF5QnV0dG9uKTtcbiAgICAgICAgcGxheUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucGxheVllYXJzLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBwbGF5WWVhcnMoKXtcbiAgICAgICAgdmFyIGN1cnJlbnRZZWFyID0gUy5nZXRTdGF0ZSgneWVhcicpWzBdLFxuICAgICAgICAgICAgY3VycmVudE9ic2VydmF0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBzLnllYXJCdXR0b25BY3RpdmUpLmNsYXNzTGlzdC5jb250YWlucyhzLm9ic2VydmF0aW9uMCkgPyAwIDogMTtcbiAgICAgICAgZnVuY3Rpb24gbmV4dFByb21pc2UoKXtcbiAgICAgICAgICAgIGN1cnJlbnRZZWFyKys7XG4gICAgICAgICAgICBpZiAoIGN1cnJlbnRZZWFyIDw9IHRoaXMubW9kZWwueWVhcnNbdGhpcy5tb2RlbC55ZWFycy5sZW5ndGggLSAxXSApe1xuICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKHdyYXBwZXJSZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCd5ZWFyJywgW2N1cnJlbnRZZWFyLCByZXNvbHZlLCAwXSk7IFxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFMuc2V0U3RhdGUoJ3llYXInLCBbY3VycmVudFllYXIsIHdyYXBwZXJSZXNvbHZlLCAxXSlcbiAgICAgICAgICAgICAgICAgICAgfSk7ICAgIFxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBuZXh0UHJvbWlzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBjdXJyZW50T2JzZXJ2YXRpb24gPT09IDAgKXtcbiAgICAgICAgICAgIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgICAgIFMuc2V0U3RhdGUoJ3llYXInLCBbY3VycmVudFllYXIsIHJlc29sdmUsIDFdKTsgXG4gICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBuZXh0UHJvbWlzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0UHJvbWlzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9IFxuXG4gICAgfVxuICAgIGNoZWNrSGVpZ2h0KCkge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCduZWVkZWQnLCB0aGlzLmhlaWdodE5lZWRlZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhdmFpbGFibGUnLCB3aW5kb3cuaW5uZXJIZWlnaHQpO1xuICAgICAgICAvKiBhZGQgJ3NxdWF0JyBjbGFzcyB0byBib2R5IGZvciBzbWFsbCBzY3JlZW5zICovXG4gICAgICAgIGlmICh3aW5kb3cuaW5uZXJIZWlnaHQgPCB0aGlzLmhlaWdodE5lZWRlZCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKHMuc3F1YXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKHMuc3F1YXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICggZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlY3Rpb24tY29tcGFyaXNvbiAuanMtaW5uZXItY29udGVudCcpLm9mZnNldEhlaWdodCA+IHdpbmRvdy5pbm5lckhlaWdodCAtIDEwMCApIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChzLnN1cGVyU3F1YXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKHMuc3VwZXJTcXVhdCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGp1c3RDU1NWYXJpYWJsZXMoKSB7XG4gICAgICAgICAgICB2YXIgcm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgIHZhciBhY3RpdmVNYXggPSBNYXRoLmZsb29yKCh0aGlzLmhlaWdodE5lZWRlZCAtIHRoaXMudW5pdFBhZGRpbmcgLSB0aGlzLmhlYWRlckhlaWdodCkgKiAodGhpcy5tYXhBY3RpdmUgLyAodGhpcy5tYXhBY3RpdmUgKyB0aGlzLm1heERpc2NvbnRpbnVlZCkpKTtcbiAgICAgICAgICAgIHJvb3Quc3R5bGUuc2V0UHJvcGVydHkoJy0tdW5pdC1kaW1lbnNpb24nLCB0aGlzLm1pblVuaXREaW1lbnNpb24gKyAncHgnKTtcbiAgICAgICAgICAgIHJvb3Quc3R5bGUuc2V0UHJvcGVydHkoJy0taGVhZGVyLWhlaWdodCcsIHRoaXMuaGVhZGVySGVpZ2h0ICsgJ3B4Jyk7XG4gICAgICAgICAgICByb290LnN0eWxlLnNldFByb3BlcnR5KCctLW1heC1jb250YWluZXItaGVpZ2h0JywgdGhpcy5oZWlnaHROZWVkZWQgKyAncHgnKTtcbiAgICAgICAgICAgIHJvb3Quc3R5bGUuc2V0UHJvcGVydHkoJy0tYWN0aXZlLW1heC1oZWlnaHQnLCBhY3RpdmVNYXggKyAncHgnKTtcbiAgICAgICAgICAgIHJvb3Quc3R5bGUuc2V0UHJvcGVydHkoJy0tZGlzY29udGludWVkLW1heC1oZWlnaHQnLCBNYXRoLmZsb29yKHRoaXMuaGVpZ2h0TmVlZGVkIC0gYWN0aXZlTWF4IC0gdGhpcy5oZWFkZXJIZWlnaHQpICsgJ3B4Jyk7XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICA6cm9vdCB7XG4gICAgICAgICAgICAgICAgLS1tYXgtY29udGFpbmVyLWhlaWdodDogODAwcHg7XG4gICAgICAgICAgICAgICAgLS1hY3RpdmUtbWF4LWhlaWdodDogMzY4cHg7XG4gICAgICAgICAgICAgICAgLS1kaXNjb250aW51ZWQtbWF4LWhlaWdodDogMzY4cHg7XG4gICAgICAgICAgICAgICAgLS1zcXVhdC1hY3RpdmUtcHJvcG9ydGlvbjogNTB2aDtcbiAgICAgICAgICAgICAgICAtLXNxdWF0LWRpc2NvbnRpbnVlZC1wcm9wb3J0aW9uOiA1MHZoO1xuICAgICAgICAgICAgICAgIC0tdW5pdC1kaW1lbnNpb246IDMwcHg7XG4gICAgICAgICAgICAgICAgLS1oZWFkZXItaGVpZ2h0OiA0NXB4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAqL1xuICAgICAgICB9XG4gICAgICAgIGFkanVzdENTU1ZhcmlhYmxlcy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgICBpbml0aWFsaXplWWVhckJ1dHRvbnMoKXtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLnllYXJCdXR0b24pLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGJ1dHRvbik7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50WWVhciA9IFMuZ2V0U3RhdGUoJ3llYXInKVswXTtcbiAgICAgICAgICAgICAgICB0aGlzLmJsdXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoIGN1cnJlbnRZZWFyICE9PSB0aGlzLnZhbHVlICkgeyAvLyBpcyBub3QgdGhlIGFscmVhZHkgc2VsZWN0ZWQgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGxldCBvYnNlcnZhdGlvbnMgPSB0aGlzLnZhbHVlID4gY3VycmVudFllYXIgPyBbMCwxXSA6IFsxLDBdO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCd5ZWFyJywgW3RoaXMudmFsdWUsIHJlc29sdmUsIG9ic2VydmF0aW9uc1swXV0pO1xuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFMuc2V0U3RhdGUoJ3llYXInLCBbdGhpcy52YWx1ZSwgbnVsbCwgb2JzZXJ2YXRpb25zWzFdXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvYnNlcnZhdGlvbiA9IHRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKHMub2JzZXJ2YXRpb24wKSA/IDEgOiAwO1xuICAgICAgICAgICAgICAgICAgICBTLnNldFN0YXRlKCd5ZWFyJywgW3RoaXMudmFsdWUsIG51bGwsIG9ic2VydmF0aW9uXSk7ICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGUobXNnLGRhdGEpIHsgLy8gaGVyZSBkYXRhIGlzIGFuIGFycmF5LiBbMF06IHllYXI7IFsxXTogbnVsbCBvciBgcmVzb2x2ZWAgZnJvbSB0aGUgUHJvbWlzZS4gbmVlZHMgdG8gcmVzb2x2ZSB0cnVlIHdoZW4gYWxsIHRyYW5zaXRpb25zIG9mIGN1cnJlbnQgdXBkYXRlIGFyZSBmaW5pc2hlZCAuIDMuIG9ic2VydmF0aW9uIGluZGV4XG4gICAgICAgIGxldCB0b0JlRGVzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgcy55ZWFyQnV0dG9uQWN0aXZlKTtcbiAgICAgICAgdG9CZURlc2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZShzLnllYXJCdXR0b25BY3RpdmUsIHMub2JzZXJ2YXRpb24sIHMub2JzZXJ2YXRpb24wLCBzLm9ic2VydmF0aW9uMSk7XG4gICAgICAgIHZhciBidG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b25bdmFsdWU9XCInICsgZGF0YVswXSArJ1wiXScpO1xuICAgICAgICBidG4uY2xhc3NMaXN0LmFkZChzLnllYXJCdXR0b25BY3RpdmUpO1xuICAgICAgICBpZiAoIGRhdGFbMl0gPT09IDAgKXtcbiAgICAgICAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKHMub2JzZXJ2YXRpb24xKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKHMub2JzZXJ2YXRpb24wKTtcbiAgICAgICAgfVxuICAgICAgICBidG4uY2xhc3NMaXN0LmFkZChzLm9ic2VydmF0aW9uLCBzWydvYnNlcnZhdGlvbicgKyBkYXRhWzJdXSlcbiAgICAgICAgdGhpcy5GTElQKHBhcnNlSW50KGRhdGFbMF0pLCBkYXRhWzFdLCBkYXRhWzJdKTtcbiAgICAgICAgdGhpcy51cGRhdGVUZXh0KCk7XG4gICAgfVxuICAgIHVwZGF0ZVRleHQoKXtcbiAgICAgICAgLy8gcGhhc2VNZW1iZXJzWzFdIGlzIHRoZSBjdXJyZW50IHN0YXRlOyBbMF0gaXMgdGhlIHByZXZpb3VzIHN0YXRlXG4gICAgICAgIFxuICAgICAgICB2YXIgdG90YWxBY3RpdmUgPSB0aGlzLnBoYXNlTWVtYmVyc1sxXVt0aGlzLnBoYXNlTWVtYmVyc1sxXS5sZW5ndGggLSAxXS5hY3RpdmUubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWxEaXNjb250aW51ZWQgPSB0aGlzLnBoYXNlTWVtYmVyc1sxXS5yZWR1Y2UoKGFjYyxjdXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjICsgY3VyLmRpc2NvbnRpbnVlZC5sZW5ndGg7XG4gICAgICAgICAgICB9LDApLFxuICAgICAgICAgICAgYXBwcm92ZWRTcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RvdGFsLWFwcHJvdmVkJyksXG4gICAgICAgICAgICBkaXNjb250aW51ZWRTcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RvdGFsLWRpc2NvbnRpbnVlZCcpO1xuICAgICAgICBpZiAoIGFwcHJvdmVkU3Bhbi5pbm5lckhUTUwgIT0gdG90YWxBY3RpdmUpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0b3RhbC1hcHByb3ZlZCcpLmZhZGVJbkNvbnRlbnQodG90YWxBY3RpdmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICggZGlzY29udGludWVkU3Bhbi5pbm5lckhUTUwgIT0gdG90YWxEaXNjb250aW51ZWQgKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG90YWwtZGlzY29udGludWVkJykuZmFkZUluQ29udGVudCh0b3RhbERpc2NvbnRpbnVlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgRkxJUChkYXRhLCByZXNvbHZlLCBvYnNlcnZhdGlvbiA9IDEpeyAvLyBvYm5zZXJ2YXRpb24gZGVmYXVsdHMgdG8gMSBmb3IgdGhlIGluaXRpYWwgcGFnZSBsb2FkIGFuaW1hdGlvblxuICAgICAgICB0aGlzLnJlY29yZEZpcnN0UG9zaXRpb25zKCk7IC8vIGZpcnN0XG4gICAgICAgIHRoaXMuY2xlYXJBdHRyaWJ1dGVzQW5kRGV0YWlscygpO1xuXG4gICAgICAgIC8vIHBhcmFtcyAxLiBpbmRleCBvZiB0aGUgeWVhciAoMjAxNCAtPiAwKTsgMi4gaW5kZXggb2YgdGhlIG9ic2VydmF0aW9uOyBcbiAgICAgICAgdGhpcy5wb3B1bGF0ZVBsYWNlaG9sZGVycyh0aGlzLm1vZGVsLnllYXJzLmluZGV4T2YoZGF0YSksIG9ic2VydmF0aW9uKTsgLy8gbGFzdCAgXG4gICAgICAgIHRoaXMubm9uRW1wdHlEcnVncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgcy5kcnVnICsgJzpub3QoLicgKyBzLmRydWdFbXB0eSArICcpJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuZmlyc3RQb3NpdGlvbnMpO1xuICAgICAgICAvL3NldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbnZlcnRQb3NpdGlvbnMoKTtcbiAgICAgICAgICAgIHRoaXMucGxheUFuaW1hdGlvbihyZXNvbHZlKTsgLy8gcGFzcyBpbiB0aGUgYHJlc29sdmVgIGZ1bmN0aW9uIGZyb20gdGhlIHByb21pc2UgaW5pdGlhdGVkIHdoZW4gdGhlIHllYXIgYnV0dG9uIHdhcyBwcmVzc2VkIG9yIFBsYXkgbG9vcCBjeWNsZWRcbiAgICAgICAgLy8gICAgfSwgMzAwMCk7IC8vIGludmVydCBhbmQgcGxheVxuICAgICAgICAvLyAqKioqKiBUTyBETyAqKioqKiogSU5WRVJTSU9OIGlzbid0IHdvcmtpbmcgcHJvcGVybHkuIG5lZWQgdG8gcmVtb3ZlIGNsYXNzZXMgKmFuZCogcmVtb3ZlIGRldGFpbHMgZHJhd2VycyBiZWZvcmUgcmVwb3B1bGF0aW5nXG4gICAgICAgIC8vIHRoZSBwbGFjZWhvbGRlcnMuIHdoeSBpcyB0aGVyZSBhIHRyYW5zaXRpb24gb24gdGhlIGludmVydD8gYXJlIHRoZSBpZCdzIGJlaW5nIGFzc2lnbiBwcm9wZXJseT9cbiAgICB9XG4gICAgcmVjb3JkRmlyc3RQb3NpdGlvbnMoKXtcbiAgICAgICAgdGhpcy5maXJzdFBvc2l0aW9ucyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLicgKyBzLmRydWcgKyAnOm5vdCgnICsgcy5kcnVnRW1wdHkgKyAnKScpKS5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGFjY1tjdXIuaWRdID0gY3VyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSx7fSk7XG4gICAgfVxuICAgIGNsZWFyQXR0cmlidXRlc0FuZERldGFpbHMoKXtcbiAgICAgICAgdGhpcy5ub25FbXB0eURydWdzLmZvckVhY2goZHJ1ZyA9PiB7XG4gICAgICAgICAgICB2YXIgZGV0YWlscyA9IGRydWcucXVlcnlTZWxlY3RvcignLicgKyBzLmRldGFpbERyYXdlcik7XG4gICAgICAgICAgICBkcnVnLmNsYXNzTmFtZSA9ICBgJHtzLmRydWd9ICR7cy5kcnVnRW1wdHl9YDtcbiAgICAgICAgICAgIGRydWcuaWQgPSAnJztcbiAgICAgICAgICAgIGRydWcucmVtb3ZlQ2hpbGQoZGV0YWlscyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbnZlcnRQb3NpdGlvbnMoKXtcbiAgICAgICAgdGhpcy5ub25FbXB0eURydWdzLmZvckVhY2goZHJ1ZyA9PiB7XG4gICAgICAgICAgICBkcnVnLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gICAgICAgICAgICB2YXIgbGFzdFBvc2l0aW9uID0gZHJ1Zy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICBkZWx0YVkgPSB0aGlzLmZpcnN0UG9zaXRpb25zW2RydWcuaWRdID8gdGhpcy5maXJzdFBvc2l0aW9uc1tkcnVnLmlkXS50b3AgLSBsYXN0UG9zaXRpb24udG9wIDogLTEwMDAsXG4gICAgICAgICAgICAgICAgZGVsdGFYID0gdGhpcy5maXJzdFBvc2l0aW9uc1tkcnVnLmlkXSA/IHRoaXMuZmlyc3RQb3NpdGlvbnNbZHJ1Zy5pZF0ubGVmdCAtIGxhc3RQb3NpdGlvbi5sZWZ0IDogLTEwMDA7IC8vIGRydWdzIHRoYXQgYXJlIGVudGVyaW5nIHdpbGwgbm90IGhhdmUgZmlyc3RQb3NpdGlvbnNcbiAgICAgICAgICAgIGRydWcuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke2RlbHRhWH1weCwgJHtkZWx0YVl9cHgpYDtcbiAgICAgICAgICAgIGlmICggIXRoaXMuZmlyc3RQb3NpdGlvbnNbZHJ1Zy5pZF0gKXtcbiAgICAgICAgICAgICAgICBkcnVnLmNsYXNzTGlzdC5hZGQocy5lbnRlcmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBwbGF5QW5pbWF0aW9uKHJlc29sdmUpe1xuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IDUwMDtcbiAgICAgICAgdGhpcy5ub25FbXB0eURydWdzLmZvckVhY2goZHJ1ZyA9PiB7XG4gICAgICAgICAgICBkcnVnLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICggZHVyYXRpb24gLyAxMDAwICkgKyAncyc7XG4gICAgICAgICAgICBkcnVnLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMCwwKSc7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIC8qKGNvbnNvbGUubG9nKHRoaXMucGhhc2VNZW1iZXJzKTtcbiAgICAgICAgY29uc3QgaW5jcmVtZW50ID0gNTA7XG4gICAgICAgIHZhciBkZWxheTtcbiAgICAgICAgWzQsMywyLDEsMF0uZm9yRWFjaCgocGhhc2UsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoIGluZGV4ID09PSAwICl7XG4gICAgICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsYXkgPSB0aGlzLnBoYXNlTWVtYmVyc1swXVtwaGFzZSArIDFdLmFjdGl2ZS5jb25jYXQodGhpcy5waGFzZU1lbWJlcnNbMF1bcGhhc2UgKyAxXS5kaXNjb250aW51ZWQpLmxlbmd0aCAqIGluY3JlbWVudCArIDUwMCArIGluY3JlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGhhc2VNZW1iZXJzWzBdW3BoYXNlXS5hY3RpdmUuY29uY2F0KHRoaXMucGhhc2VNZW1iZXJzWzBdW3BoYXNlXS5kaXNjb250aW51ZWQpLmZvckVhY2goKGVhY2gsIGopID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2IycgKyBlYWNoICk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzAuNXMnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLDApJztcbiAgICAgICAgICAgICAgICAgICAgfSwgaW5jcmVtZW50ICogaik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgIH0pO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHMuZW50ZXJpbmcpLmZvckVhY2goZHJ1ZyA9PiB7XG4gICAgICAgICAgICBkcnVnLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwLjVzJztcbiAgICAgICAgICAgIGRydWcuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLDApJztcbiAgICAgICAgfSk7Ki9cbiAgICAgICAgXG4vKioqKiAgVE8gRE8gKioqKioqXG5cbmFzc2lnbiBjbGFzc05hbWVzIHRvIGRydWdzIGFjY29yZGluZyB0byB3aGljaCB3YXkgdGhleSBhcmUgbW92aW5nLiBwcm9ncmVzc2luZywgcmVncmVzc2luZywgZGlzY29udGludWluZywgZW50ZXJpbmcsIHJlZW50ZXJpbmdcbnByb2JhYmx5IGRvbmUgdXAgaW4gbG9vcCBzdGFydGluZyBhbiBsbiAxNDEuXG5cbiAgICAgICAgdmFyIGFuaW1hdGUgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgICAgICBbJ2ZvbycsJ2JhciddLmZvckVhY2goKGJheixpLGFycmF5KSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhiYXopO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGkgPT09IGFycmF5Lmxlbmd0aCAtIDEgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAxMDAwICogaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBhbmltYXRlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3Jlc29sdmVkJyk7XG4gICAgICAgIH0pO1xuICAgICAgICAvKiAgc2V0VGltZW91dChmdW5jdGlvbigpeyAvLyB0cmFuc2l0aW9uIHdvbid0IGhhcHBlbiB3L28gdGhlIHNldFRpbWVvdXQgdHJpY2tcbiAgICAgICAgICAgICAgZHJ1Zy5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMC44cyc7XG4gICAgICAgICAgICAgIGRydWcuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLDApJztcbiAgICAgICAgICAgICAgKioqKiogSEVSRSAqKiogQ1lDTEUgVEhST1VHSCBjb2x1bW5zIG9uZSBieSBvbmVcbiAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNyYy12aWV3cy12aXotdmlldy0tY29sdW1uJylbMF0ucXVlcnlTZWxlY3RvckFsbCgnLnNyYy12aWV3cy12aXotdmlldy0tZHJ1ZycpLmZvckVhY2goZHJ1ZyA9PiB7ZHJ1Zy5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMC44cyc7ZHJ1Zy5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsMCknO30pO1xuICAgICAgICAgIH0pOyovXG4gICAgfVxufSIsIi8qIGdsb2JhbCBQVUJMSUNQQVRIIHByb2Nlc3MgKi9cbi8vdXRpbHNcbi8vaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMtY29sbGVjdGlvbic7XG5pbXBvcnQgUGFwYSBmcm9tICdwYXBhcGFyc2UnO1xuaW1wb3J0IHsgc3RhdGVNb2R1bGUgYXMgUyB9IGZyb20gJ3N0YXRlZnVsLWRlYWQnO1xuLy9pbXBvcnQgUFMgZnJvbSAncHVic3ViLXNldHRlcic7XG5pbXBvcnQgeyBwdWJsaXNoV2luZG93UmVzaXplIH0gZnJvbSAnQFV0aWxzJztcblxuLy9kYXRhICggQ1NWcyBsb2FkZWQgYnkgZmlsZS1sb2FkZXIgZm9yIHVzZSBieSBQYXBhcGFyc2UgYXQgYnVpbGQgYW5kIHJ1bnRpbWUuIHRoYXQncyBzZXQgaW4gd2VicGFjay5jb21tb24uanMgKVxuaW1wb3J0IGRhdGEgZnJvbSAnLi9kYXRhL2FieC1kYXRhLmNzdic7XG5cbi8vdmlld3NcbmltcG9ydCBWaXpWaWV3IGZyb20gJy4vdmlld3Mvdml6LXZpZXcvJztcbi8vaW1wb3J0IEZpZnR5U3RhdGVWaWV3IGZyb20gJy4vdmlld3MvZmlmdHktc3RhdGUvJztcblxuLy8gYXBwIHByb3RvdHlwZVxuaW1wb3J0IFBDVEFwcCBmcm9tICdAQXBwJztcblxuLy9zdGF0aWMgY29udGVudFxuaW1wb3J0IHNlY3Rpb25zIGZyb20gJy4vcGFydGlhbHMvc2VjdGlvbnMuaHRtbCc7XG5pbXBvcnQgaW50cm8gZnJvbSAnLi9wYXJ0aWFscy9pbnRyby5tZCc7XG5pbXBvcnQgbm90ZXMgZnJvbSAnLi9wYXJ0aWFscy9ub3Rlcy5tZCc7XG5cblxucHVibGlzaFdpbmRvd1Jlc2l6ZShTKTsgLy8gaW5pdGlhbGl6ZSBwdWJsaXNoIHdpbmRvdyByZXNpemUgd2l0aCBTdGF0ZU1PZHVsZSBhcyBwYXJhbS9cblxuY29uc3QgbW9kZWwgPSB7XG4gICAgXG4gICAgLy8gYW55IHN0YXRpYyBkYXRhIHNob3VsZCBiZSBtYWRlIHByb3BlcnRpZXMgb2YgdGhlIG1vZGVsIG5vd1xuICAgIFxufTtcblxuY29uc3Qgdmlld3MgPSBbXTsgLy8gdmlld3MgZ2V0IHB1c2ggIG5seSBhZnRlciBtb2RlbCBpcyBmdWxseSByZWFkeSwgd2l0aCBhbnkgcnVudGltZSBkYXRhIGxvYWRlZFxuY29uc3Qgc3RhcnRZZWFyID0gMjAxNDtcblxuZnVuY3Rpb24gZ2V0UnVudGltZURhdGEoKXtcbiAgICB2YXIgcHVibGljUGF0aCA9ICcnO1xuICAgIGlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiAhd2luZG93LklTX1BSRVJFTkRFUklORyApeyAvLyBwcm9kdWN0aW9uIGJ1aWxkIG5lZWRzIHRvIGtub3cgdGhlIHB1YmxpYyBwYXRoIG9mIGFzc2V0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgZGV2IGFuZCBwcmV2aWV3LCBhc3NldHMgYXJlIGEgY2hpbGQgb2Ygcm9vdDsgZm9yIGJ1aWxkIHRoZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJlIGluIHNvbWUgZGlzdGFudCBwYXRoIG9uIHNpdGVjb3JlXG4gICAgICAgIHB1YmxpY1BhdGggPSBQVUJMSUNQQVRIOyAvLyBUT0RPOiBzZXQgUFVCTElDUEFUSCB1c2luZyBkZWZpbmUgcGx1Z2luIGluIHdlYnBhY2suYnVpbGQuanNcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdmFyIGFwcENvbnRhaW5lciA9IHRoaXMuZWw7XG4gICAgICAgIFBhcGEucGFyc2UocHVibGljUGF0aCArIGRhdGEsIHtcbiAgICAgICAgICAgIGRvd25sb2FkOiB0cnVlLFxuICAgICAgICAgICAgZHluYW1pY1R5cGluZzogdHJ1ZSxcbiAgICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICAgIGZhc3RNb2RlOiBmYWxzZSwgLy8gc3RyaW5nIGVzY2FwZXMgbmVlZGVkIHRvIHBhcnNlIHNyaW5naWZpZWQgYXJyYXlzIHdpdGggY29tbWFzXG4gICAgICAgICAgICBza2lwRW1wdHlMaW5lczogdHJ1ZSxcbiAgICAgICAgICAgIGJlZm9yZUZpcnN0Q2h1bmsoY2h1bmspeyAvLyBvbiBwcmVyZW5kZXIsIGRvIHNpbXBsZSBoYXNoIG9mIENTViBjb250ZW50cyBhbmQgYXBwZW5kIGFzIGF0dHJpYnV0ZSBvZiB0aGUgYXBwIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF0IHJ1bnRpbWUsIGRvIHNhbWUgaGFzaCBvZiBjc3YgY29udGVudHMgYW5kIGNvbXBhcmUgdG8gb3JpZ2luYWwuIGlmIGhhc2hlcyBtYXRjaCwgYXBwIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb250aW51ZSBub3JtYWxseS4gaWYgbWlzbWF0Y2hlZCwgYXBwIHdpbGwgcmVyZW5kZXIgYWxsIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIG5ldyBkYXRhLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgYWxsb3dzIGZvciBgaG90YCB1cGRhdGluZyBvZiB0aGUgbWFpbiBkYXRhIGZpbGUgd2l0aG91dCByZWJ1aWxkaW5nIHRoZSBkaXN0LyBmb2xkZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYG1vZGVsLmlzTWlzbWF0Y2hgIHdpbGwgYmUgc2V0IHRvIGB0cnVlYCBhbmQgdGhlIHByZXJlbmRlcmluZyBmdW5jdGlvbnMgd2lsbCBjaGVjayB0aGF0IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIHJlc3BvbmQgYWNjb3JkaW5nbHlcblxuICAgICAgICAgICAgICAgIHZhciBkYXRhSGFzaCA9IGNodW5rLmhhc2hDb2RlKCk7IC8vIGhhc2hDb2RlIGlzIGhlbHBlciBmdW5jdGlvbiBmcm9tIHV0aWxzLCBpbXBvcnRlZCBhbmQgSUlGRSdkIGluIGluZGV4LmpzXG4gICAgICAgICAgICAgICAgaWYgKCB3aW5kb3cuSVNfUFJFUkVOREVSSU5HICl7XG4gICAgICAgICAgICAgICAgICAgIGFwcENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1oYXNoJywgZGF0YUhhc2gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnICYmIGRhdGFIYXNoLnRvU3RyaW5nKCkgIT09IGFwcENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtZGF0YS1oYXNoJykgKXtcbiAgICAgICAgICAgICAgICAgICAgYXBwQ29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS1kYXRhLW1pc21hdGNoJyx0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhdGEgbWlzbWF0Y2gnKTtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuaXNNaXNtYXRjaGVkID0gdHJ1ZTsgLy8gc2V0IHNvIHRoYXQgY29tcG9uZW50cyBjYW4gYWNjZXNzIHRoaXMgdmFsdWUgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBsZXRlOiByZXNwb25zZSA9PiB7IC8vIGFycm93IGZ1bmN0aW9uIGhlcmUgdG8ga2VlcCBgdGhpc2AgY29udGV4dCBhcyBTdGF0ZURlYnRcbiAgICAgICAgICAgICAgICB2aWV3cy5sZW5ndGggPSAwOyAgXG4gICAgICAgICAgICAgICAgbW9kZWwueWVhcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAvLyBmaW5kIG51bWJlciBvZiB5ZWFycyBpbiBkYXRhLiByZWxpZXMgb24gYWxsIHJvd3MgaGF2aW5nIHRoZSBzYW1lIG51bWJlclxuICAgICAgICAgICAgICAgIHZhciBsb29wV2hpbGUgPSB0cnVlLFxuICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcblxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhcnJheSBvZiB5ZWFycyBwcmVzZW50IGluIHRoZSBkYXRhLCBzdGFydGluZyB3aXRoIHN0YXJ0WWVhciBkZWZpbmVkIGFib3ZlXG4gICAgICAgICAgICAgICAgd2hpbGUgKCBsb29wV2hpbGUgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCByZXNwb25zZS5kYXRhWzBdLmhhc093blByb3BlcnR5KHN0YXJ0WWVhciArIGluZGV4KSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnllYXJzLnB1c2goc3RhcnRZZWFyICsgaW5kZXgpOyAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9vcFdoaWxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5kZXgrK1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtb2RlbC51bm5lc3RlZERhdGEgPSByZXNwb25zZS5kYXRhLm1hcChkID0+IHsgLy8gdHVybiBlYWNoIHN0cmluZyB2YWx1ZSBsaWtlIFwiMS0xZFwiIGludG8gYW4gYXJyYXkgLCBbMSwxZF1cbiAgICAgICAgICAgICAgICAgICAgZC5pZCA9ICdkcnVnLScgKyBkLmlkO1xuICAgICAgICAgICAgICAgICAgICBtb2RlbC55ZWFycy5mb3JFYWNoKHllYXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZFt5ZWFyXSA9IFswLDFdLm1hcChvYnNlcnZhdGlvbiA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBwYXJzZUludChkW3llYXJdLnNwbGl0KCctJylbb2JzZXJ2YXRpb25dKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNEaXNjb250aW51ZWQ6ICggZFt5ZWFyXS5zcGxpdCgnLScpW29ic2VydmF0aW9uXS50b1N0cmluZygpLmluZGV4T2YoJ2QnKSAhPT0gLTEgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1vZGVsLmRhdGEgPSBtb2RlbC55ZWFycy5tYXAoeWVhciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YXRpb25zOiBbMCwxXS5tYXAob2JzZXJ2YXRpb24gPT4geyAvLyBlYWNoIHllYXIgaGFzIHR3byBvYnNlcnZhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzEsIDIsIDMsIDQsIDVdLm1hcChwaGFzZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhhc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IG1vZGVsLnVubmVzdGVkRGF0YS5maWx0ZXIoZCA9PiBkW3llYXJdW29ic2VydmF0aW9uXS5jb2x1bW4gPT09IHBoYXNlKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobW9kZWwpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUxlbmd0aHMgPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXNjb250aW51ZWRMZW5ndGhzID0gW107XG4gICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgbWF4aW11bSBudW1iZXIgb2Ygbm9uZGlzY29udGludWVkIGRydWdzIGluIG9uZSBjb2x1bW4gYXQgYW55IHRpbWUuIHNpZGUgZWZmZWN0IHB1c2hlcyBcbiAgICAgICAgICAgICAgICAvLyBudW1iZXIgb2YgZGlzY29udGludWVkIGRydWdzIHRvIGFycmF5IGZvciBtYXggdGJkIGxhdGVyXG4gICAgICAgICAgICAgICAgLy8gdGhlc2UgdmFsdWVzIHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hlbiBzdGFja2VkIGRydWdzIG5lZWQgdG8gYmUgY29sbGFwc2VkIGRvd25cbiAgICAgICAgICAgICAgICAvLyBmb3Igc21hbGxlciBzY3JlZW5zXG4gICAgICAgICAgICAgICAgbW9kZWwuZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkLm9ic2VydmF0aW9ucy5mb3JFYWNoKChvYnMsaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzLmZvckVhY2gocGhhc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZUxlbmd0aHMucHVzaChwaGFzZS52YWx1ZXMuZmlsdGVyKGRydWcgPT4gZHJ1Z1tkLnllYXJdW2ldLmlzRGlzY29udGludWVkICE9PSB0cnVlKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvbnRpbnVlZExlbmd0aHMucHVzaChwaGFzZS52YWx1ZXMuZmlsdGVyKGRydWcgPT4gZHJ1Z1tkLnllYXJdW2ldLmlzRGlzY29udGludWVkID09PSB0cnVlKS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1vZGVsLm1heEFjdGl2ZSA9IE1hdGgubWF4KC4uLmFjdGl2ZUxlbmd0aHMpO1xuICAgICAgICAgICAgICAgIG1vZGVsLm1heERpc2NvbnRpbnVlZCA9IE1hdGgubWF4KC4uLmRpc2NvbnRpbnVlZExlbmd0aHMpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1vZGVsKTtcbiAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8qIHB1c2ggdmlld3Mgbm93IHRoYXQgbW9kZWwgaXMgY29tcGxldGUgKi9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2aWV3cy5wdXNoKFxuICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29tcG9uZW50KG1vZGVsLCBWaXpWaWV3LCAnZGl2I3Zpei12aWV3Jywge3JlbmRlclRvU2VsZWN0b3I6ICcjYWJ4LXZpc3VhbGl6YXRpb24nLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXN9KVxuICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuY3JlYXRlQ29tcG9uZW50KG1vZGVsLCBGaWZ0eVN0YXRlVmlldywgJ2RpdiNmaWZ0eS1zdGF0ZS12aWV3Jywge3JlbmRlclRvU2VsZWN0b3I6ICcjc2VjdGlvbi1zdGF0ZXMgLmpzLWlubmVyLWNvbnRlbnQnLCByZXJlbmRlck9uRGF0YU1pc21hdGNoOiB0cnVlLCBwYXJlbnQ6IHRoaXN9KSAgXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcil7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFCWEFwcCBleHRlbmRzIFBDVEFwcCB7XG4gICAgcHJlcmVuZGVyKCl7XG5cbiAgICAgICAgLy9pbmRzZXJ0IGFueSBzdGF0aWMgY29udGVudCBoZXJlXG4gICAgICAgIHRoaXMuZWwuaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVlbmQnLCBzZWN0aW9ucyk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbnRybycpLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJiZWdpbicsIGludHJvICk7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhYngtbm90ZXMnKS5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyYmVnaW4nLCBub3RlcyApO1xuICAgICAgICAvL3RoaXMud2FzUHJlcmVuZGVyZWQgPSBmYWxzZTtcbiAgICAgICAgZ2V0UnVudGltZURhdGEuY2FsbCh0aGlzKS50aGVuKCgpID0+IHsgLy8gYmluZCBTdGF0ZURlYnQgYXMgY29udGV4dCBgdGhpc2AgZm9yIGdldFJ1bnRpbWVEYXRhIHNvIHRoYXQgaXQgY2FuIGFjY2Vlc3MgdGhpcy5lbCwgZXRjXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codmlldyk7XG4gICAgICAgICAgLyogPyAqLyAgICAgIHZpZXcuY29udGFpbmVyLmFwcGVuZENoaWxkKHZpZXcuZWwpOyAvLyBkaWZmZXJlbnQgaGVyZSBmcm9tIENhcGVUb3duOiB2aWV3cyBhcmVuJ3QgYXBwZW5kZWQgdG8gYXBwIGNvbnRhaW5lcjsgc29tZSBzdGF0aWMgY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyBwcmVzZW50IGFscmVhZHkuIHZpZXdzIGFwcGVuZGVkIHRvICp0aGVpciogY29udGFpbmVyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvL3RoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3JlbmRlcmVkJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbml0KCl7XG4gICAgICAgIHN1cGVyLmluaXQoKTtcbiAgICAgICAvLyB0aGlzLmF0dGFjaFNlY3Rpb25PcGVuQ2xvc2UoKTtcbiAgICAgICAgZ2V0UnVudGltZURhdGEuY2FsbCh0aGlzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHZpZXdzLmZvckVhY2godmlldyA9PiB7XG4gICAgICAgICAgICAgICB2aWV3LmluaXQodGhpcyk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4vKiAgICAgICAgaWYgKCBtb2R1bGUuaG90ICl7XG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBtb2R1bGUuaG90LmFjY2VwdCgnLi92aWV3cy9zdGF0ZS1jb21wYXJpc29uJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhY2NlcHQhJywgYXJndW1lbnRzLCB0aGF0KTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2VjdGlvbi1jb21wYXJpc29uIC5qcy1pbm5lci1jb250ZW50JykuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gdGhhdC5jcmVhdGVDb21wb25lbnQobW9kZWwsIENvbXBhcmlzb25WaWV3LCAnZGl2I2NvbXBhcmlzb24tdmlldycsIHtyZW5kZXJUb1NlbGVjdG9yOiAnI3NlY3Rpb24tY29tcGFyaXNvbiAuanMtaW5uZXItY29udGVudCcsIHJlcmVuZGVyT25EYXRhTWlzbWF0Y2g6IHRydWV9KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXBsYWNlbWVudCk7XG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQuY29udGFpbmVyLmFwcGVuZENoaWxkKHJlcGxhY2VtZW50LmVsKTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gKi9cbiAgICB9XG59IiwiLyogZ2xvYmFsIHByb2Nlc3MgKi9cbi8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBbXCJlcnJvclwiLCB7IFwidmFyc0lnbm9yZVBhdHRlcm5cIjogXCJTdHJpbmdIZWxwZXJzfEZhZGVJblRleHRcIiB9XSovIC8vYWxsb3cgU3RyaW5nSGVscGVycyB0byBiZSBpcG9ydGVkIChkZWZpbmVkKSBhbmQgbm90IGJlaW5nIGV4cGxpY2l0bHkgY2FsbGVkXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIHdpdGhvdXQgdHJpZ2dlcmluZyBlc2xpbnQgZXJyb3JcbmltcG9ydCB7IFN0cmluZ0hlbHBlcnMsIEZhZGVJblRleHQgfSBmcm9tICdAVXRpbHMnOyAvLyBzdHJpbmcgaGVscGVycyBpcyBhbiBJSUZFXG5pbXBvcnQgQUJYQXBwIGZyb20gJy4vYWJ4LmpzJztcbmltcG9ydCAnLi9jc3Mvc3R5bGVzLnNjc3MnO1xuXG5cbmNvbnN0IGNvbnRhaW5lciA9ICcjcGV3LWFwcCc7XG5jb25zdCBBcHAgPSBuZXcgQUJYQXBwKGNvbnRhaW5lciwgeyAvLyBTdGF0ZURlYnQgZXh0ZW5kcyBQQ1RBcHAtanMuIFBDVEFwcC1qcydzIGNvbnN0cnVjdG9yIG1ldGhvZCBpcyBjYWxsZWQsIHAxIGNvbnRhaXVuZXIsIHAyIG9wdGlvbnNcblx0bmVlZHNSb3V0ZXI6IGZhbHNlXG59KTtcbmlmICggcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgd2luZG93LklTX1BSRVJFTkRFUklORyApeyAvLyBwcm9jZXNzIGRldmVsb3BtZW50IG1lYW5zIHVzaW5nIFdlYlBhY2sgZGV2IHNlcnZlci4gd2luZG93IGlzIHByZXJlbmRlcmluZyBtZWFucyBpblxuXHRBcHAucHJlcmVuZGVyKCk7XG59XG5BcHAuaW5pdCgpOyJdLCJzb3VyY2VSb290IjoiIn0=